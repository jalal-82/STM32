
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08009a90  08009a90  0000aa90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a35c  0800a35c  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a35c  0800a35c  0000b35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a364  0800a364  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a364  0800a364  0000b364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a368  0800a368  0000b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a36c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001dc  0800a548  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  0800a548  0000c734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001526d  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003282  00000000  00000000  00021479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00024700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec9  00000000  00000000  000259e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000055d9  00000000  00000000  000268b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001949b  00000000  00000000  0002be8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f45b  00000000  00000000  00045325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe8  00000000  00000000  000e47c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ea7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a78 	.word	0x08009a78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009a78 	.word	0x08009a78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <lcd_send_cmd>:

uint16_t addr_8=SLAVE_ADDRESS_LCD;


void lcd_send_cmd (char cmd,int i2c_frame_size)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]

		uint8_t i2c_frame_data[4];

		i2c_frame_data[0] = (cmd & 0xF0) | 0x0c;
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	f023 030f 	bic.w	r3, r3, #15
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	f043 030c 	orr.w	r3, r3, #12
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	733b      	strb	r3, [r7, #12]
		i2c_frame_data[1] = i2c_frame_data[0] & 0xFB;
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	f023 0304 	bic.w	r3, r3, #4
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	737b      	strb	r3, [r7, #13]

		i2c_frame_data[2] = ((cmd << 4) & 0xF0) | 0x0c;
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	f043 030c 	orr.w	r3, r3, #12
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	73bb      	strb	r3, [r7, #14]
		i2c_frame_data[3] = i2c_frame_data[2] & 0xFB;
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	f023 0304 	bic.w	r3, r3, #4
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]

		// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
		//Please write your own code here
		HAL_I2C_Master_Transmit(&hi2c1, addr_8, i2c_frame_data, i2c_frame_size, 100);
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <lcd_send_cmd+0x6c>)
 8000fcc:	8819      	ldrh	r1, [r3, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	2064      	movs	r0, #100	@ 0x64
 8000fd8:	9000      	str	r0, [sp, #0]
 8000fda:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <lcd_send_cmd+0x70>)
 8000fdc:	f003 fe76 	bl	8004ccc <HAL_I2C_Master_Transmit>

		HAL_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f002 fe45 	bl	8003c70 <HAL_Delay>

}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000250 	.word	0x20000250

08000ff8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t i2c_frame_data[4];
	data_u = (data&0xf0);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f023 030f 	bic.w	r3, r3, #15
 8001008:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[0] = data_u|0x0D;  //en=1, rs=0
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f043 030d 	orr.w	r3, r3, #13
 8001016:	b2db      	uxtb	r3, r3
 8001018:	723b      	strb	r3, [r7, #8]
	i2c_frame_data[1] = data_u|0x09;  //en=0, rs=0
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f043 0309 	orr.w	r3, r3, #9
 8001020:	b2db      	uxtb	r3, r3
 8001022:	727b      	strb	r3, [r7, #9]
	i2c_frame_data[2] = data_l|0x0D;  //en=1, rs=0
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	f043 030d 	orr.w	r3, r3, #13
 800102a:	b2db      	uxtb	r3, r3
 800102c:	72bb      	strb	r3, [r7, #10]
	i2c_frame_data[3] = data_l|0x09;  //en=0, rs=0
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	f043 0309 	orr.w	r3, r3, #9
 8001034:	b2db      	uxtb	r3, r3
 8001036:	72fb      	strb	r3, [r7, #11]
	// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
		//Please write your own code here
	
	HAL_I2C_Master_Transmit(&hi2c1, addr_8, i2c_frame_data, 4, 100);
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <lcd_send_data+0x64>)
 800103a:	8819      	ldrh	r1, [r3, #0]
 800103c:	f107 0208 	add.w	r2, r7, #8
 8001040:	2364      	movs	r3, #100	@ 0x64
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2304      	movs	r3, #4
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <lcd_send_data+0x68>)
 8001048:	f003 fe40 	bl	8004ccc <HAL_I2C_Master_Transmit>
	
	HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f002 fe0f 	bl	8003c70 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000
 8001060:	20000250 	.word	0x20000250

08001064 <lcd_clear>:

void lcd_clear (void)  // clear display
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	//send command to clear the display
	//Please write your own code here

	lcd_send_cmd(LCD_CLEARDISPLAY, 4);
 8001068:	2104      	movs	r1, #4
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff8a 	bl	8000f84 <lcd_send_cmd>
	HAL_Delay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f002 fdfd 	bl	8003c70 <HAL_Delay>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <lcd_init>:

void lcd_init (uint16_t addr_7)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]

	addr_8=addr_7<<1;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <lcd_init+0xcc>)
 800108e:	801a      	strh	r2, [r3, #0]
	// Wait for LCD to power up
		HAL_Delay(50);
 8001090:	2032      	movs	r0, #50	@ 0x32
 8001092:	f002 fded 	bl	8003c70 <HAL_Delay>

		// Special initialization sequence for 4-bit mode
		// First command
		uint8_t init_data[1] = {0x30};  // 0011 0000 - Function set
 8001096:	2330      	movs	r3, #48	@ 0x30
 8001098:	733b      	strb	r3, [r7, #12]
		HAL_I2C_Master_Transmit(&hi2c1, addr_8, init_data, 1, 100);
 800109a:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <lcd_init+0xcc>)
 800109c:	8819      	ldrh	r1, [r3, #0]
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	4828      	ldr	r0, [pc, #160]	@ (800114c <lcd_init+0xd0>)
 80010aa:	f003 fe0f 	bl	8004ccc <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80010ae:	2005      	movs	r0, #5
 80010b0:	f002 fdde 	bl	8003c70 <HAL_Delay>

		// Second command
		HAL_I2C_Master_Transmit(&hi2c1, addr_8, init_data, 1, 100);
 80010b4:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <lcd_init+0xcc>)
 80010b6:	8819      	ldrh	r1, [r3, #0]
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	2364      	movs	r3, #100	@ 0x64
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	4822      	ldr	r0, [pc, #136]	@ (800114c <lcd_init+0xd0>)
 80010c4:	f003 fe02 	bl	8004ccc <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80010c8:	2005      	movs	r0, #5
 80010ca:	f002 fdd1 	bl	8003c70 <HAL_Delay>

		// Third command
		HAL_I2C_Master_Transmit(&hi2c1, addr_8, init_data, 1, 100);
 80010ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <lcd_init+0xcc>)
 80010d0:	8819      	ldrh	r1, [r3, #0]
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	2364      	movs	r3, #100	@ 0x64
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	481b      	ldr	r0, [pc, #108]	@ (800114c <lcd_init+0xd0>)
 80010de:	f003 fdf5 	bl	8004ccc <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80010e2:	2005      	movs	r0, #5
 80010e4:	f002 fdc4 	bl	8003c70 <HAL_Delay>

		// Set to 4-bit mode
		init_data[0] = 0x20;  // 0010 0000 - 4-bit mode
 80010e8:	2320      	movs	r3, #32
 80010ea:	733b      	strb	r3, [r7, #12]
		HAL_I2C_Master_Transmit(&hi2c1, addr_8, init_data, 1, 100);
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <lcd_init+0xcc>)
 80010ee:	8819      	ldrh	r1, [r3, #0]
 80010f0:	f107 020c 	add.w	r2, r7, #12
 80010f4:	2364      	movs	r3, #100	@ 0x64
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	4814      	ldr	r0, [pc, #80]	@ (800114c <lcd_init+0xd0>)
 80010fc:	f003 fde6 	bl	8004ccc <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f002 fdb5 	bl	8003c70 <HAL_Delay>

		// Now in 4-bit mode, continue with other settings
		lcd_send_cmd(0x28, 4);  // 2 line, 5x8 font size
 8001106:	2104      	movs	r1, #4
 8001108:	2028      	movs	r0, #40	@ 0x28
 800110a:	f7ff ff3b 	bl	8000f84 <lcd_send_cmd>
		HAL_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f002 fdae 	bl	8003c70 <HAL_Delay>
		lcd_send_cmd(0x0C, 4);  // Display on, cursor off
 8001114:	2104      	movs	r1, #4
 8001116:	200c      	movs	r0, #12
 8001118:	f7ff ff34 	bl	8000f84 <lcd_send_cmd>
		HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f002 fda7 	bl	8003c70 <HAL_Delay>
		lcd_send_cmd(0x06, 4);  // Auto increment cursor, no display shift
 8001122:	2104      	movs	r1, #4
 8001124:	2006      	movs	r0, #6
 8001126:	f7ff ff2d 	bl	8000f84 <lcd_send_cmd>
		HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f002 fda0 	bl	8003c70 <HAL_Delay>
		lcd_send_cmd(0x01, 4);  // Clear display
 8001130:	2104      	movs	r1, #4
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ff26 	bl	8000f84 <lcd_send_cmd>
		HAL_Delay(2);
 8001138:	2002      	movs	r0, #2
 800113a:	f002 fd99 	bl	8003c70 <HAL_Delay>

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	20000250 	.word	0x20000250

08001150 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001158:	e006      	b.n	8001168 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff48 	bl	8000ff8 <lcd_send_data>
	while (*str) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f4      	bne.n	800115a <lcd_send_string+0xa>
	}
	HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f002 fd7d 	bl	8003c70 <HAL_Delay>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <LED_Init>:
static const uint8_t PROXIMITY_DUTY_CYCLE = 30; // 30% duty cycle (0-100) for dimmer brightness
static const uint32_t PEAK_FLASH_DURATION = 500; // 0.5 second flash for peak detection
static const uint32_t BLINK_PERIOD_MS = 100; // 10Hz blink rate (100ms period)

// Initialize LED control
void LED_Init(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    // LD2 should already be initialized as output in MX_GPIO_Init()
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Ensure LED starts off
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <LED_Init+0x20>)
 800118a:	f003 fc41 	bl	8004a10 <HAL_GPIO_WritePin>
    currentMode = LED_OFF;
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <LED_Init+0x24>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    previousMode = LED_OFF;
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <LED_Init+0x28>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020000 	.word	0x40020000
 80011a4:	200001f8 	.word	0x200001f8
 80011a8:	200001f9 	.word	0x200001f9

080011ac <LED_SetMode>:

// Set the LED mode
void LED_SetMode(LedMode_t mode) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    // Special case for peak flash: remember previous mode to return to it
    if (mode == LED_PEAK_FLASH) {
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d115      	bne.n	80011e8 <LED_SetMode+0x3c>
        if (currentMode != LED_PEAK_FLASH) {
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <LED_SetMode+0xa4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d003      	beq.n	80011cc <LED_SetMode+0x20>
            // Only save previous mode if we're not already in PEAK_FLASH mode
            previousMode = currentMode;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <LED_SetMode+0xa4>)
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <LED_SetMode+0xa8>)
 80011ca:	701a      	strb	r2, [r3, #0]
        }
        currentMode = LED_PEAK_FLASH;
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <LED_SetMode+0xa4>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
        modeStartTime = HAL_GetTick();
 80011d2:	f002 fd41 	bl	8003c58 <HAL_GetTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001258 <LED_SetMode+0xac>)
 80011da:	6013      	str	r3, [r2, #0]
        
        // Turn LED fully ON at the start of peak detection
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	481e      	ldr	r0, [pc, #120]	@ (800125c <LED_SetMode+0xb0>)
 80011e2:	f003 fc15 	bl	8004a10 <HAL_GPIO_WritePin>
        return;
 80011e6:	e030      	b.n	800124a <LED_SetMode+0x9e>
    }
    
    // For other modes, only update if mode changes
    if (mode != currentMode) {
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <LED_SetMode+0xa4>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d02b      	beq.n	800124a <LED_SetMode+0x9e>
        currentMode = mode;
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <LED_SetMode+0xa4>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	7013      	strb	r3, [r2, #0]
        modeStartTime = HAL_GetTick();
 80011f8:	f002 fd2e 	bl	8003c58 <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <LED_SetMode+0xac>)
 8001200:	6013      	str	r3, [r2, #0]
        pwmCounter = 0;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <LED_SetMode+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

        // Immediate actions based on mode
        switch (mode) {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d012      	beq.n	8001234 <LED_SetMode+0x88>
 800120e:	2b03      	cmp	r3, #3
 8001210:	dc1a      	bgt.n	8001248 <LED_SetMode+0x9c>
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <LED_SetMode+0x70>
 8001216:	2b01      	cmp	r3, #1
 8001218:	d006      	beq.n	8001228 <LED_SetMode+0x7c>
                lastBlinkTime = modeStartTime;
                break;
                
            // LED_PEAK_FLASH handled separately above
            default:
                break;
 800121a:	e015      	b.n	8001248 <LED_SetMode+0x9c>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	480e      	ldr	r0, [pc, #56]	@ (800125c <LED_SetMode+0xb0>)
 8001222:	f003 fbf5 	bl	8004a10 <HAL_GPIO_WritePin>
                break;
 8001226:	e010      	b.n	800124a <LED_SetMode+0x9e>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	480b      	ldr	r0, [pc, #44]	@ (800125c <LED_SetMode+0xb0>)
 800122e:	f003 fbef 	bl	8004a10 <HAL_GPIO_WritePin>
                break;
 8001232:	e00a      	b.n	800124a <LED_SetMode+0x9e>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2120      	movs	r1, #32
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <LED_SetMode+0xb0>)
 800123a:	f003 fbe9 	bl	8004a10 <HAL_GPIO_WritePin>
                lastBlinkTime = modeStartTime;
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <LED_SetMode+0xac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <LED_SetMode+0xb8>)
 8001244:	6013      	str	r3, [r2, #0]
                break;
 8001246:	e000      	b.n	800124a <LED_SetMode+0x9e>
                break;
 8001248:	bf00      	nop
        }
    }
}
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001f8 	.word	0x200001f8
 8001254:	200001f9 	.word	0x200001f9
 8001258:	200001fc 	.word	0x200001fc
 800125c:	40020000 	.word	0x40020000
 8001260:	20000204 	.word	0x20000204
 8001264:	20000200 	.word	0x20000200

08001268 <LED_Process>:

// Process LED state based on current mode and timing
void LED_Process(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 800126e:	f002 fcf3 	bl	8003c58 <HAL_GetTick>
 8001272:	6078      	str	r0, [r7, #4]

    switch (currentMode) {
 8001274:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <LED_Process+0xf8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d02c      	beq.n	80012d6 <LED_Process+0x6e>
 800127c:	2b03      	cmp	r3, #3
 800127e:	dc6a      	bgt.n	8001356 <LED_Process+0xee>
 8001280:	2b01      	cmp	r3, #1
 8001282:	dc01      	bgt.n	8001288 <LED_Process+0x20>
 8001284:	2b00      	cmp	r3, #0
        case LED_OFF:
        case LED_ON:
            // These modes maintain constant state, no processing needed
            break;
 8001286:	e066      	b.n	8001356 <LED_Process+0xee>
    switch (currentMode) {
 8001288:	2b02      	cmp	r3, #2
 800128a:	d000      	beq.n	800128e <LED_Process+0x26>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
                }
            }
            break;
    }
}
 800128c:	e063      	b.n	8001356 <LED_Process+0xee>
            if (currentTime - modeStartTime >= PEAK_FLASH_DURATION) {
 800128e:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <LED_Process+0xfc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800129a:	4293      	cmp	r3, r2
 800129c:	d358      	bcc.n	8001350 <LED_Process+0xe8>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2120      	movs	r1, #32
 80012a2:	4831      	ldr	r0, [pc, #196]	@ (8001368 <LED_Process+0x100>)
 80012a4:	f003 fbb4 	bl	8004a10 <HAL_GPIO_WritePin>
                if (previousMode == LED_PROXIMITY_BLINK) {
 80012a8:	4b30      	ldr	r3, [pc, #192]	@ (800136c <LED_Process+0x104>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d10d      	bne.n	80012cc <LED_Process+0x64>
                    currentMode = previousMode;
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <LED_Process+0x104>)
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <LED_Process+0xf8>)
 80012b6:	701a      	strb	r2, [r3, #0]
                    modeStartTime = currentTime;
 80012b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001364 <LED_Process+0xfc>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
                    lastBlinkTime = currentTime;
 80012be:	4a2c      	ldr	r2, [pc, #176]	@ (8001370 <LED_Process+0x108>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
                    pwmCounter = 0;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <LED_Process+0x10c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
            break;
 80012ca:	e041      	b.n	8001350 <LED_Process+0xe8>
                    currentMode = previousMode;
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <LED_Process+0x104>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <LED_Process+0xf8>)
 80012d2:	701a      	strb	r2, [r3, #0]
            break;
 80012d4:	e03c      	b.n	8001350 <LED_Process+0xe8>
            if (currentTime - lastBlinkTime >= 5) { // Update every 5ms for smoother PWM
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <LED_Process+0x108>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d938      	bls.n	8001354 <LED_Process+0xec>
                lastBlinkTime = currentTime;
 80012e2:	4a23      	ldr	r2, [pc, #140]	@ (8001370 <LED_Process+0x108>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6013      	str	r3, [r2, #0]
                pwmCounter = (pwmCounter + 1) % 100;
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <LED_Process+0x10c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <LED_Process+0x110>)
 80012f0:	fb82 1203 	smull	r1, r2, r2, r3
 80012f4:	1151      	asrs	r1, r2, #5
 80012f6:	17da      	asrs	r2, r3, #31
 80012f8:	1a8a      	subs	r2, r1, r2
 80012fa:	2164      	movs	r1, #100	@ 0x64
 80012fc:	fb01 f202 	mul.w	r2, r1, r2
 8001300:	1a9a      	subs	r2, r3, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <LED_Process+0x10c>)
 8001306:	701a      	strb	r2, [r3, #0]
                uint8_t blinkPhase = ((currentTime / (BLINK_PERIOD_MS / 2)) % 2) == 0;
 8001308:	2364      	movs	r3, #100	@ 0x64
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	70fb      	strb	r3, [r7, #3]
                if (blinkPhase) {
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <LED_Process+0xdc>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <LED_Process+0x10c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
                                    (pwmCounter < PROXIMITY_DUTY_CYCLE) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800132c:	221e      	movs	r2, #30
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 
 800132e:	4293      	cmp	r3, r2
 8001330:	bf34      	ite	cc
 8001332:	2301      	movcc	r3, #1
 8001334:	2300      	movcs	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	2120      	movs	r1, #32
 800133c:	480a      	ldr	r0, [pc, #40]	@ (8001368 <LED_Process+0x100>)
 800133e:	f003 fb67 	bl	8004a10 <HAL_GPIO_WritePin>
            break;
 8001342:	e007      	b.n	8001354 <LED_Process+0xec>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2120      	movs	r1, #32
 8001348:	4807      	ldr	r0, [pc, #28]	@ (8001368 <LED_Process+0x100>)
 800134a:	f003 fb61 	bl	8004a10 <HAL_GPIO_WritePin>
            break;
 800134e:	e001      	b.n	8001354 <LED_Process+0xec>
            break;
 8001350:	bf00      	nop
 8001352:	e000      	b.n	8001356 <LED_Process+0xee>
            break;
 8001354:	bf00      	nop
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001f8 	.word	0x200001f8
 8001364:	200001fc 	.word	0x200001fc
 8001368:	40020000 	.word	0x40020000
 800136c:	200001f9 	.word	0x200001f9
 8001370:	20000200 	.word	0x20000200
 8001374:	20000204 	.word	0x20000204
 8001378:	51eb851f 	.word	0x51eb851f

0800137c <LED_SetProximityThreshold>:

// Set proximity threshold
void LED_SetProximityThreshold(float threshold_mm) {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	ed87 0a01 	vstr	s0, [r7, #4]
    proximityThreshold = threshold_mm;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <LED_SetProximityThreshold+0x1c>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000004 	.word	0x20000004

0800139c <LED_GetProximityThreshold>:

// Get proximity threshold
float LED_GetProximityThreshold(void) {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
    return proximityThreshold;
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <LED_GetProximityThreshold+0x18>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	ee07 3a90 	vmov	s15, r3
}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000004 	.word	0x20000004

080013b8 <LED_GetMode>:

// Get current LED mode
LedMode_t LED_GetMode(void) {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
    return currentMode;
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <LED_GetMode+0x14>)
 80013be:	781b      	ldrb	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200001f8 	.word	0x200001f8

080013d0 <HAL_TIM_PeriodElapsedCallback>:
uint32_t lastToggleTime = 0;
const uint32_t DISPLAY_TOGGLE_INTERVAL = 3000;  // Toggle every 3 seconds
uint8_t buttonPressCount = 0;  // Counter to track button presses

/* TIM2 interrupt callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    Signals_HandleTimerInterrupt(htim);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f001 fcb7 	bl	8002d4c <Signals_HandleTimerInterrupt>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <waitForTimeOrButtonPress>:

/* Helper function to wait for a time period or detect button press */
uint8_t waitForTimeOrButtonPress(uint32_t waitTimeMs) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    uint32_t startTime = HAL_GetTick();
 80013f0:	f002 fc32 	bl	8003c58 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]
    uint8_t localButtonState = buttonState; // Start with current state
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <waitForTimeOrButtonPress+0x8c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	75fb      	strb	r3, [r7, #23]
    uint8_t buttonPressed = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	75bb      	strb	r3, [r7, #22]
    
    while (HAL_GetTick() - startTime < waitTimeMs) {
 8001400:	e02a      	b.n	8001458 <waitForTimeOrButtonPress+0x70>
        // Check for button press (with debounce)
        uint8_t currentButtonState = !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001406:	481c      	ldr	r0, [pc, #112]	@ (8001478 <waitForTimeOrButtonPress+0x90>)
 8001408:	f003 faea 	bl	80049e0 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf0c      	ite	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	2300      	movne	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	73fb      	strb	r3, [r7, #15]
        
        // Button pressed (rising edge)
        if (currentButtonState && !localButtonState) {
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d016      	beq.n	800144e <waitForTimeOrButtonPress+0x66>
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d113      	bne.n	800144e <waitForTimeOrButtonPress+0x66>
            HAL_Delay(50); // Simple debounce
 8001426:	2032      	movs	r0, #50	@ 0x32
 8001428:	f002 fc22 	bl	8003c70 <HAL_Delay>
            // Recheck to confirm it's still pressed
            if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 800142c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001430:	4811      	ldr	r0, [pc, #68]	@ (8001478 <waitForTimeOrButtonPress+0x90>)
 8001432:	f003 fad5 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <waitForTimeOrButtonPress+0x66>
                // Update global button state
                buttonState = currentButtonState;
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <waitForTimeOrButtonPress+0x8c>)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	7013      	strb	r3, [r2, #0]
                prevButtonState = localButtonState;
 8001442:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <waitForTimeOrButtonPress+0x94>)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	7013      	strb	r3, [r2, #0]
                buttonPressed = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	75bb      	strb	r3, [r7, #22]
                break;
 800144c:	e00c      	b.n	8001468 <waitForTimeOrButtonPress+0x80>
            }
        }
        
        localButtonState = currentButtonState;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	75fb      	strb	r3, [r7, #23]
        HAL_Delay(10);
 8001452:	200a      	movs	r0, #10
 8001454:	f002 fc0c 	bl	8003c70 <HAL_Delay>
    while (HAL_GetTick() - startTime < waitTimeMs) {
 8001458:	f002 fbfe 	bl	8003c58 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8cc      	bhi.n	8001402 <waitForTimeOrButtonPress+0x1a>
    }
    
    return buttonPressed;
 8001468:	7dbb      	ldrb	r3, [r7, #22]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000037c 	.word	0x2000037c
 8001478:	40020800 	.word	0x40020800
 800147c:	2000037d 	.word	0x2000037d

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001486:	f002 fb81 	bl	8003b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148a:	f000 f961 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148e:	f000 fb0f 	bl	8001ab0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001492:	f000 fae3 	bl	8001a5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001496:	f000 fa17 	bl	80018c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800149a:	f000 fa43 	bl	8001924 <MX_TIM1_Init>
  MX_ADC1_Init();
 800149e:	f000 f9c1 	bl	8001824 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014a2:	f000 fa8f 	bl	80019c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(0x27);
 80014a6:	2027      	movs	r0, #39	@ 0x27
 80014a8:	f7ff fde8 	bl	800107c <lcd_init>

  LED_Init();
 80014ac:	f7ff fe68 	bl	8001180 <LED_Init>


  Signals_Init(&htim2, &htim1, &hadc1);
 80014b0:	4a94      	ldr	r2, [pc, #592]	@ (8001704 <main+0x284>)
 80014b2:	4995      	ldr	r1, [pc, #596]	@ (8001708 <main+0x288>)
 80014b4:	4895      	ldr	r0, [pc, #596]	@ (800170c <main+0x28c>)
 80014b6:	f001 fc0f 	bl	8002cd8 <Signals_Init>
  
  // Initialize the report generator for UART reporting only
  Report_Init(&huart2);
 80014ba:	4895      	ldr	r0, [pc, #596]	@ (8001710 <main+0x290>)
 80014bc:	f000 ff84 	bl	80023c8 <Report_Init>

  // Welcome message
  lcd_clear();
 80014c0:	f7ff fdd0 	bl	8001064 <lcd_clear>
  lcd_send_string("Dual Sensor");
 80014c4:	4893      	ldr	r0, [pc, #588]	@ (8001714 <main+0x294>)
 80014c6:	f7ff fe43 	bl	8001150 <lcd_send_string>
  lcd_send_cmd(LCD_LINE2, 4);
 80014ca:	2104      	movs	r1, #4
 80014cc:	20c0      	movs	r0, #192	@ 0xc0
 80014ce:	f7ff fd59 	bl	8000f84 <lcd_send_cmd>
  lcd_send_string("Recorder v1.0");
 80014d2:	4891      	ldr	r0, [pc, #580]	@ (8001718 <main+0x298>)
 80014d4:	f7ff fe3c 	bl	8001150 <lcd_send_string>

  HAL_Delay(2000);
 80014d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014dc:	f002 fbc8 	bl	8003c70 <HAL_Delay>
  lcd_clear();
 80014e0:	f7ff fdc0 	bl	8001064 <lcd_clear>
  lcd_send_string("Press B1 to");
 80014e4:	488d      	ldr	r0, [pc, #564]	@ (800171c <main+0x29c>)
 80014e6:	f7ff fe33 	bl	8001150 <lcd_send_string>
  lcd_send_cmd(LCD_LINE2, 4);
 80014ea:	2104      	movs	r1, #4
 80014ec:	20c0      	movs	r0, #192	@ 0xc0
 80014ee:	f7ff fd49 	bl	8000f84 <lcd_send_cmd>
  lcd_send_string("start recording");
 80014f2:	488b      	ldr	r0, [pc, #556]	@ (8001720 <main+0x2a0>)
 80014f4:	f7ff fe2c 	bl	8001150 <lcd_send_string>

  // Init toggle timing
  lastToggleTime = HAL_GetTick();
 80014f8:	f002 fbae 	bl	8003c58 <HAL_GetTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a89      	ldr	r2, [pc, #548]	@ (8001724 <main+0x2a4>)
 8001500:	6013      	str	r3, [r2, #0]
  uint32_t lastDisplayUpdateTime = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]


  while (1)
    {
    /* USER CODE END WHILE */
	  uint32_t currentTime = HAL_GetTick();
 8001506:	f002 fba7 	bl	8003c58 <HAL_GetTick>
 800150a:	6078      	str	r0, [r7, #4]

	  /* Process LED state */
	  LED_Process();
 800150c:	f7ff feac 	bl	8001268 <LED_Process>

	  /* Read button state (B1 is active low) */
	  prevButtonState = buttonState;
 8001510:	4b85      	ldr	r3, [pc, #532]	@ (8001728 <main+0x2a8>)
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	4b85      	ldr	r3, [pc, #532]	@ (800172c <main+0x2ac>)
 8001516:	701a      	strb	r2, [r3, #0]
	  buttonState = !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);  // Invert because button is active low
 8001518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151c:	4884      	ldr	r0, [pc, #528]	@ (8001730 <main+0x2b0>)
 800151e:	f003 fa5f 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <main+0x2a8>)
 8001532:	701a      	strb	r2, [r3, #0]

	  /* Button press detection (rising edge) */
	  if (buttonState && !prevButtonState) {
 8001534:	4b7c      	ldr	r3, [pc, #496]	@ (8001728 <main+0x2a8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80ba 	beq.w	80016b2 <main+0x232>
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <main+0x2ac>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80b5 	bne.w	80016b2 <main+0x232>
		  buttonPressCount++;  // Increment the button press counter
 8001548:	4b7a      	ldr	r3, [pc, #488]	@ (8001734 <main+0x2b4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b78      	ldr	r3, [pc, #480]	@ (8001734 <main+0x2b4>)
 8001552:	701a      	strb	r2, [r3, #0]

		  if (buttonPressCount == 1) {
 8001554:	4b77      	ldr	r3, [pc, #476]	@ (8001734 <main+0x2b4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d135      	bne.n	80015c8 <main+0x148>
			  // First button press
			  if (!Signals_IsRecording()) {
 800155c:	f001 fd7b 	bl	8003056 <Signals_IsRecording>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <main+0xf6>
				  Signals_StartRecording();
 8001566:	f001 fd59 	bl	800301c <Signals_StartRecording>
				  lcd_clear();
 800156a:	f7ff fd7b 	bl	8001064 <lcd_clear>
				  lcd_send_string("REC: Potentiomtr");
 800156e:	4872      	ldr	r0, [pc, #456]	@ (8001738 <main+0x2b8>)
 8001570:	f7ff fdee 	bl	8001150 <lcd_send_string>
 8001574:	e09d      	b.n	80016b2 <main+0x232>
			  } else {
				  Signals_StopRecording();
 8001576:	f001 fd65 	bl	8003044 <Signals_StopRecording>
				  // Generate the analysis report AFTER stopping and before resetting data
				  Report_GenerateAnalysisReport(Recording_GetPotData(), Recording_GetUltraData());
 800157a:	f000 ff11 	bl	80023a0 <Recording_GetPotData>
 800157e:	4604      	mov	r4, r0
 8001580:	f000 ff18 	bl	80023b4 <Recording_GetUltraData>
 8001584:	4603      	mov	r3, r0
 8001586:	4619      	mov	r1, r3
 8001588:	4620      	mov	r0, r4
 800158a:	f001 f813 	bl	80025b4 <Report_GenerateAnalysisReport>

				  // Display a message that recording stopped and report was generated
				  lcd_clear();
 800158e:	f7ff fd69 	bl	8001064 <lcd_clear>
				  lcd_send_string("REC Stopped.");
 8001592:	486a      	ldr	r0, [pc, #424]	@ (800173c <main+0x2bc>)
 8001594:	f7ff fddc 	bl	8001150 <lcd_send_string>
				  lcd_send_cmd(LCD_LINE2, 4);
 8001598:	2104      	movs	r1, #4
 800159a:	20c0      	movs	r0, #192	@ 0xc0
 800159c:	f7ff fcf2 	bl	8000f84 <lcd_send_cmd>
				  lcd_send_string("Report Sent (UART)");
 80015a0:	4867      	ldr	r0, [pc, #412]	@ (8001740 <main+0x2c0>)
 80015a2:	f7ff fdd5 	bl	8001150 <lcd_send_string>
				  HAL_Delay(2000); // Show message for a bit
 80015a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015aa:	f002 fb61 	bl	8003c70 <HAL_Delay>

				  // Prepare for next session or stats view
				  lcd_clear();
 80015ae:	f7ff fd59 	bl	8001064 <lcd_clear>
				  lcd_send_string("Press B1 for");
 80015b2:	4864      	ldr	r0, [pc, #400]	@ (8001744 <main+0x2c4>)
 80015b4:	f7ff fdcc 	bl	8001150 <lcd_send_string>
				  lcd_send_cmd(LCD_LINE2, 4);
 80015b8:	2104      	movs	r1, #4
 80015ba:	20c0      	movs	r0, #192	@ 0xc0
 80015bc:	f7ff fce2 	bl	8000f84 <lcd_send_cmd>
				  lcd_send_string("Stats / New Rec");
 80015c0:	4861      	ldr	r0, [pc, #388]	@ (8001748 <main+0x2c8>)
 80015c2:	f7ff fdc5 	bl	8001150 <lcd_send_string>
 80015c6:	e074      	b.n	80016b2 <main+0x232>
			  }
		  } else if (buttonPressCount == 2) {
 80015c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001734 <main+0x2b4>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d170      	bne.n	80016b2 <main+0x232>
			  // Second button press: display detailed statistics on LCD
			  // Data stream log was already sent live during recording.
			  // Analysis report was sent when recording stopped (on first press if it was stopping).

			  // If recording was active, stop it and generate final analysis report
			  if (Signals_IsRecording()) {
 80015d0:	f001 fd41 	bl	8003056 <Signals_IsRecording>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00e      	beq.n	80015f8 <main+0x178>
				  Signals_StopRecording();
 80015da:	f001 fd33 	bl	8003044 <Signals_StopRecording>
				  // Generate final report using accessor functions
				  Report_GenerateAnalysisReport(Recording_GetPotData(), Recording_GetUltraData()); // Ensure final report is sent
 80015de:	f000 fedf 	bl	80023a0 <Recording_GetPotData>
 80015e2:	4604      	mov	r4, r0
 80015e4:	f000 fee6 	bl	80023b4 <Recording_GetUltraData>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f000 ffe1 	bl	80025b4 <Report_GenerateAnalysisReport>
				  HAL_Delay(100); // Small delay
 80015f2:	2064      	movs	r0, #100	@ 0x64
 80015f4:	f002 fb3c 	bl	8003c70 <HAL_Delay>
			  }

			  // Cycle through statistics windows on LCD
			  uint8_t exitStatsView = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	72fb      	strb	r3, [r7, #11]
			  
			  // Show each detailed stats window for 5 seconds or until button is pressed
			  // Window 1 - Potentiometer Basic Stats
			  Recording_ToggleDetailedStats(); // Toggle to window 1
 80015fc:	f000 fe4e 	bl	800229c <Recording_ToggleDetailedStats>
			  Recording_UpdateDisplay();
 8001600:	f000 fe78 	bl	80022f4 <Recording_UpdateDisplay>
			  if (waitForTimeOrButtonPress(5000)) { exitStatsView = 1; }
 8001604:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001608:	f7ff feee 	bl	80013e8 <waitForTimeOrButtonPress>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <main+0x196>
 8001612:	2301      	movs	r3, #1
 8001614:	72fb      	strb	r3, [r7, #11]
			  
			  if (!exitStatsView) {
 8001616:	7afb      	ldrb	r3, [r7, #11]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10c      	bne.n	8001636 <main+0x1b6>
				  // Window 2 - Potentiometer Advanced Stats
				  Recording_ToggleDetailedStats(); // Toggle to window 2
 800161c:	f000 fe3e 	bl	800229c <Recording_ToggleDetailedStats>
				  Recording_UpdateDisplay();
 8001620:	f000 fe68 	bl	80022f4 <Recording_UpdateDisplay>
				  if (waitForTimeOrButtonPress(5000)) { exitStatsView = 1; }
 8001624:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001628:	f7ff fede 	bl	80013e8 <waitForTimeOrButtonPress>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <main+0x1b6>
 8001632:	2301      	movs	r3, #1
 8001634:	72fb      	strb	r3, [r7, #11]
			  }
			  
			  if (!exitStatsView) {
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10c      	bne.n	8001656 <main+0x1d6>
				  // Window 3 - Ultrasonic Stats
				  Recording_ToggleDetailedStats(); // Toggle to window 3
 800163c:	f000 fe2e 	bl	800229c <Recording_ToggleDetailedStats>
				  Recording_UpdateDisplay();
 8001640:	f000 fe58 	bl	80022f4 <Recording_UpdateDisplay>
				  if (waitForTimeOrButtonPress(5000)) { exitStatsView = 1; }
 8001644:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001648:	f7ff fece 	bl	80013e8 <waitForTimeOrButtonPress>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <main+0x1d6>
 8001652:	2301      	movs	r3, #1
 8001654:	72fb      	strb	r3, [r7, #11]
			  }
			  
			  if (!exitStatsView) {
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <main+0x1f6>
				  // Window 4 - Combined Stats
				  Recording_ToggleDetailedStats(); // Toggle to window 4
 800165c:	f000 fe1e 	bl	800229c <Recording_ToggleDetailedStats>
				  Recording_UpdateDisplay();
 8001660:	f000 fe48 	bl	80022f4 <Recording_UpdateDisplay>
				  if (waitForTimeOrButtonPress(5000)) { exitStatsView = 1; }
 8001664:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001668:	f7ff febe 	bl	80013e8 <waitForTimeOrButtonPress>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <main+0x1f6>
 8001672:	2301      	movs	r3, #1
 8001674:	72fb      	strb	r3, [r7, #11]
			  }
			  
			  // Reset to normal view (Window 0) for next time
			  Recording_ToggleDetailedStats(); // Toggle back to 0
 8001676:	f000 fe11 	bl	800229c <Recording_ToggleDetailedStats>

			  // Reset for new recording session
			  Recording_Init();
 800167a:	f000 fd63 	bl	8002144 <Recording_Init>
			  resetStaticTrackers(); // Reset tracking variables in signals.c
 800167e:	f001 faf5 	bl	8002c6c <resetStaticTrackers>

			  lcd_clear();
 8001682:	f7ff fcef 	bl	8001064 <lcd_clear>
			  lcd_send_string("Press B1 to");
 8001686:	4825      	ldr	r0, [pc, #148]	@ (800171c <main+0x29c>)
 8001688:	f7ff fd62 	bl	8001150 <lcd_send_string>
			  lcd_send_cmd(LCD_LINE2, 4);
 800168c:	2104      	movs	r1, #4
 800168e:	20c0      	movs	r0, #192	@ 0xc0
 8001690:	f7ff fc78 	bl	8000f84 <lcd_send_cmd>
			  lcd_send_string("start recording");
 8001694:	4822      	ldr	r0, [pc, #136]	@ (8001720 <main+0x2a0>)
 8001696:	f7ff fd5b 	bl	8001150 <lcd_send_string>

			  buttonPressCount = 0; // Reset for next cycle
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <main+0x2b4>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
			  buttonState = 0;
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <main+0x2a8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
			  prevButtonState = 0;
 80016a6:	4b21      	ldr	r3, [pc, #132]	@ (800172c <main+0x2ac>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 80016ac:	2064      	movs	r0, #100	@ 0x64
 80016ae:	f002 fadf 	bl	8003c70 <HAL_Delay>
		  }
	  }

	  /* Toggle display if needed */
	  if (currentTime - lastToggleTime > DISPLAY_TOGGLE_INTERVAL) {
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <main+0x2a4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016be:	4293      	cmp	r3, r2
 80016c0:	d90c      	bls.n	80016dc <main+0x25c>
		  displayToggle = !displayToggle;
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <main+0x2cc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <main+0x2cc>)
 80016d4:	701a      	strb	r2, [r3, #0]
		  lastToggleTime = currentTime;
 80016d6:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <main+0x2a4>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6013      	str	r3, [r2, #0]
	  }

	  /* Update display at reasonable rate (5Hz is plenty for LCD) */
	  if (currentTime - lastDisplayUpdateTime >= 200) {
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80016e4:	d90a      	bls.n	80016fc <main+0x27c>
		  /* Display statistics on LCD based on current view */
		  if (displayToggle == 0) {
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <main+0x2cc>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <main+0x274>
			  Signals_DisplayPotView();
 80016ee:	f001 fcbf 	bl	8003070 <Signals_DisplayPotView>
 80016f2:	e001      	b.n	80016f8 <main+0x278>
		  } else {
			  Signals_DisplayUltraView();
 80016f4:	f001 fcdc 	bl	80030b0 <Signals_DisplayUltraView>
		  }
		  lastDisplayUpdateTime = currentTime;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
	  }

	  /* Small delay for system performance */
	  HAL_Delay(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f002 fab7 	bl	8003c70 <HAL_Delay>
    {
 8001702:	e700      	b.n	8001506 <main+0x86>
 8001704:	20000208 	.word	0x20000208
 8001708:	200002a4 	.word	0x200002a4
 800170c:	200002ec 	.word	0x200002ec
 8001710:	20000334 	.word	0x20000334
 8001714:	08009a90 	.word	0x08009a90
 8001718:	08009a9c 	.word	0x08009a9c
 800171c:	08009aac 	.word	0x08009aac
 8001720:	08009ab8 	.word	0x08009ab8
 8001724:	20000380 	.word	0x20000380
 8001728:	2000037c 	.word	0x2000037c
 800172c:	2000037d 	.word	0x2000037d
 8001730:	40020800 	.word	0x40020800
 8001734:	20000384 	.word	0x20000384
 8001738:	08009ac8 	.word	0x08009ac8
 800173c:	08009adc 	.word	0x08009adc
 8001740:	08009aec 	.word	0x08009aec
 8001744:	08009b00 	.word	0x08009b00
 8001748:	08009b10 	.word	0x08009b10
 800174c:	2000037e 	.word	0x2000037e

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	@ 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	@ 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f006 f8bd 	bl	80078de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <SystemClock_Config+0xcc>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	4a27      	ldr	r2, [pc, #156]	@ (800181c <SystemClock_Config+0xcc>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	@ 0x40
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <SystemClock_Config+0xcc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <SystemClock_Config+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a21      	ldr	r2, [pc, #132]	@ (8001820 <SystemClock_Config+0xd0>)
 800179a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <SystemClock_Config+0xd0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017c0:	2310      	movs	r3, #16
 80017c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fdd2 	bl	8005380 <HAL_RCC_OscConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017e2:	f000 f9e1 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e6:	230f      	movs	r3, #15
 80017e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ea:	2302      	movs	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2102      	movs	r1, #2
 8001802:	4618      	mov	r0, r3
 8001804:	f004 f834 	bl	8005870 <HAL_RCC_ClockConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800180e:	f000 f9cb 	bl	8001ba8 <Error_Handler>
  }
}
 8001812:	bf00      	nop
 8001814:	3750      	adds	r7, #80	@ 0x50
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000

08001824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001838:	4a21      	ldr	r2, [pc, #132]	@ (80018c0 <MX_ADC1_Init+0x9c>)
 800183a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <MX_ADC1_Init+0x98>)
 800183e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <MX_ADC1_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001850:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <MX_ADC1_Init+0xa0>)
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <MX_ADC1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001872:	2201      	movs	r2, #1
 8001874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001880:	2201      	movs	r2, #1
 8001882:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001884:	480d      	ldr	r0, [pc, #52]	@ (80018bc <MX_ADC1_Init+0x98>)
 8001886:	f002 fa17 	bl	8003cb8 <HAL_ADC_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001890:	f000 f98a 	bl	8001ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800189c:	2303      	movs	r3, #3
 800189e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_ADC1_Init+0x98>)
 80018a6:	f002 fbcb 	bl	8004040 <HAL_ADC_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018b0:	f000 f97a 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000208 	.word	0x20000208
 80018c0:	40012000 	.word	0x40012000
 80018c4:	0f000001 	.word	0x0f000001

080018c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018ce:	4a13      	ldr	r2, [pc, #76]	@ (800191c <MX_I2C1_Init+0x54>)
 80018d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018d2:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018d4:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <MX_I2C1_Init+0x58>)
 80018d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	@ (8001918 <MX_I2C1_Init+0x50>)
 8001906:	f003 f89d 	bl	8004a44 <HAL_I2C_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001910:	f000 f94a 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000250 	.word	0x20000250
 800191c:	40005400 	.word	0x40005400
 8001920:	000186a0 	.word	0x000186a0

08001924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001940:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_TIM1_Init+0x98>)
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <MX_TIM1_Init+0x9c>)
 8001944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_TIM1_Init+0x98>)
 8001948:	2253      	movs	r2, #83	@ 0x53
 800194a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <MX_TIM1_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_TIM1_Init+0x98>)
 8001954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001958:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <MX_TIM1_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_TIM1_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_TIM1_Init+0x98>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196c:	4813      	ldr	r0, [pc, #76]	@ (80019bc <MX_TIM1_Init+0x98>)
 800196e:	f004 f99f 	bl	8005cb0 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001978:	f000 f916 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001980:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <MX_TIM1_Init+0x98>)
 800198a:	f004 fb8d 	bl	80060a8 <HAL_TIM_ConfigClockSource>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001994:	f000 f908 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_TIM1_Init+0x98>)
 80019a6:	f004 fd8f 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019b0:	f000 f8fa 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200002a4 	.word	0x200002a4
 80019c0:	40010000 	.word	0x40010000

080019c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	463b      	mov	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <MX_TIM2_Init+0x94>)
 80019e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <MX_TIM2_Init+0x94>)
 80019ea:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80019ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <MX_TIM2_Init+0x94>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80019f6:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <MX_TIM2_Init+0x94>)
 80019f8:	2209      	movs	r2, #9
 80019fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <MX_TIM2_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <MX_TIM2_Init+0x94>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a08:	4813      	ldr	r0, [pc, #76]	@ (8001a58 <MX_TIM2_Init+0x94>)
 8001a0a:	f004 f951 	bl	8005cb0 <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a14:	f000 f8c8 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <MX_TIM2_Init+0x94>)
 8001a26:	f004 fb3f 	bl	80060a8 <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a30:	f000 f8ba 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_TIM2_Init+0x94>)
 8001a42:	f004 fd41 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a4c:	f000 f8ac 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200002ec 	.word	0x200002ec

08001a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_USART2_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f004 fd9a 	bl	80065cc <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 f883 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000334 	.word	0x20000334
 8001aac:	40004400 	.word	0x40004400

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a33      	ldr	r2, [pc, #204]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a2c      	ldr	r2, [pc, #176]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a25      	ldr	r2, [pc, #148]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <MX_GPIO_Init+0xec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001b3c:	4818      	ldr	r0, [pc, #96]	@ (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b3e:	f002 ff67 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b48:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <MX_GPIO_Init+0xf4>)
 8001b5a:	f002 fdbd 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001b5e:	2310      	movs	r3, #16
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b72:	f002 fdb1 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG_Pin;
 8001b76:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b90:	f002 fda2 	bl	80046d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	@ 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020800 	.word	0x40020800

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <Error_Handler+0x8>

08001bb4 <PotRecording_Init>:

/**
 * Initialize potentiometer recording data structure
 * Sets all values to their initial state for a new recording session
 */
void PotRecording_Init(PotRecordingData *data) {
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    data->startTime = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
    data->elapsedTime = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
    data->minVoltage = 3.3f;    // Initialize to max possible so first reading becomes minimum
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <PotRecording_Init+0x8c>)
 8001bcc:	609a      	str	r2, [r3, #8]
    data->maxVoltage = 0.0f;    // Initialize to min possible so first reading becomes maximum
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
    data->peakCount = 0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
    data->isRecording = 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	751a      	strb	r2, [r3, #20]
    data->lastVoltage = 0.0f;   // Used for peak detection
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
    data->risingEdge = 0;       // Flag to track if voltage is rising (for peak detection)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
    data->peakThreshold = 0.1f; // 10% of range as threshold for peaks
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <PotRecording_Init+0x90>)
 8001bf4:	621a      	str	r2, [r3, #32]
    data->timeAbove95Pct = 0;   // Time spent above 95% of the voltage range
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    data->timeBelow5Pct = 0;    // Time spent below 5% of the voltage range
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28
    data->crossings50Pct = 0;   // Number of times the voltage crosses the 50% level
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c
    data->lastPeakTime = 0;     // Timestamp of the last detected peak
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    data->totalPeakInterval = 0;// Sum of time intervals between consecutive peaks
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
    data->peaksWhenCloseCount = 0; // Peaks detected when object is close to ultrasonic sensor
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38
    // Initialize alias members
    data->midCrossingCount = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    data->timeAboveHighThreshold = 0;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	641a      	str	r2, [r3, #64]	@ 0x40
    data->timeBelowLowThreshold = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    data->peakCountWhenClose = 0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40533333 	.word	0x40533333
 8001c44:	3dcccccd 	.word	0x3dcccccd

08001c48 <PotRecording_Start>:

/**
 * Start recording potentiometer data
 * Resets all statistics and begins a new recording session
 */
void PotRecording_Start(PotRecordingData *data) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    data->startTime = HAL_GetTick();
 8001c50:	f002 f802 	bl	8003c58 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
    data->isRecording = 1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	751a      	strb	r2, [r3, #20]
    data->peakCount = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
    data->minVoltage = 3.3f;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <PotRecording_Start+0x88>)
 8001c6a:	609a      	str	r2, [r3, #8]
    data->maxVoltage = 0.0f;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
    data->lastVoltage = -1.0f;  // Set to invalid value to force initialization on first reading
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <PotRecording_Start+0x8c>)
 8001c78:	619a      	str	r2, [r3, #24]
    data->risingEdge = 0;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    data->elapsedTime = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
    data->timeAbove95Pct = 0;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    data->timeBelow5Pct = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	629a      	str	r2, [r3, #40]	@ 0x28
    data->crossings50Pct = 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
    data->lastPeakTime = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	631a      	str	r2, [r3, #48]	@ 0x30
    data->totalPeakInterval = 0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	635a      	str	r2, [r3, #52]	@ 0x34
    data->peaksWhenCloseCount = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    // Initialize alias members
    data->midCrossingCount = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	63da      	str	r2, [r3, #60]	@ 0x3c
    data->timeAboveHighThreshold = 0;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    data->timeBelowLowThreshold = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	645a      	str	r2, [r3, #68]	@ 0x44
    data->peakCountWhenClose = 0;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	649a      	str	r2, [r3, #72]	@ 0x48
    
    // Reset the midpoint tracking
    was_above_midpoint = 0;
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <PotRecording_Start+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40533333 	.word	0x40533333
 8001cd4:	bf800000 	.word	0xbf800000
 8001cd8:	20000385 	.word	0x20000385

08001cdc <PotRecording_Stop>:

/**
 * Stop recording potentiometer data
 * Marks the recording as stopped but preserves all collected statistics
 */
void PotRecording_Stop(PotRecordingData *data) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    data->isRecording = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	751a      	strb	r2, [r3, #20]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <PotRecording_Process>:
/**
 * Process a new potentiometer voltage reading
 * Updates statistics, detects peaks, and manages time-related metrics
 * Uses rising and falling edge detection with a threshold for peak detection
 */
void PotRecording_Process(PotRecordingData *data, float voltage) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	ed87 0a00 	vstr	s0, [r7]
    // Skip processing if recording is not active
    if (!data->isRecording) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7d1b      	ldrb	r3, [r3, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8104 	beq.w	8001f16 <PotRecording_Process+0x21e>
        return;
    }
    
    // Update elapsed time
    uint32_t currentTime = HAL_GetTick();
 8001d0e:	f001 ffa3 	bl	8003c58 <HAL_GetTick>
 8001d12:	62f8      	str	r0, [r7, #44]	@ 0x2c
    data->elapsedTime = currentTime - data->startTime;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	605a      	str	r2, [r3, #4]

    // Update min/max voltage
    if (voltage < data->minVoltage) data->minVoltage = voltage;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d26:	ed97 7a00 	vldr	s14, [r7]
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d502      	bpl.n	8001d3a <PotRecording_Process+0x42>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	609a      	str	r2, [r3, #8]
    if (voltage > data->maxVoltage) data->maxVoltage = voltage;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d40:	ed97 7a00 	vldr	s14, [r7]
 8001d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	dd02      	ble.n	8001d54 <PotRecording_Process+0x5c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	60da      	str	r2, [r3, #12]

    // Calculate voltage range thresholds for statistics
    float range = data->maxVoltage - data->minVoltage;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    if (range > 0.01f) {  // Only calculate thresholds if we have a meaningful voltage range
 8001d68:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d6c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001f20 <PotRecording_Process+0x228>
 8001d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	dd72      	ble.n	8001e60 <PotRecording_Process+0x168>
        float threshold5pct = data->minVoltage + (range * 0.05f);   // 5% level
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d84:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8001f24 <PotRecording_Process+0x22c>
 8001d88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        float threshold95pct = data->minVoltage + (range * 0.95f);  // 95% level
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d9a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d9e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001f28 <PotRecording_Process+0x230>
 8001da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	edc7 7a08 	vstr	s15, [r7, #32]
        
        static uint32_t lastSampleTime = 0;
        
        // Track time spent above 95% of voltage range
        if (voltage > threshold95pct) {
 8001dae:	ed97 7a00 	vldr	s14, [r7]
 8001db2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	dd12      	ble.n	8001de6 <PotRecording_Process+0xee>
            if (lastSampleTime > 0) {
 8001dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f2c <PotRecording_Process+0x234>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <PotRecording_Process+0xee>
                uint32_t timeSpentHere = currentTime - lastSampleTime;
 8001dc8:	4b58      	ldr	r3, [pc, #352]	@ (8001f2c <PotRecording_Process+0x234>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]
                data->timeAbove95Pct += timeSpentHere;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
                data->timeAboveHighThreshold = data->timeAbove95Pct; // Keep alias in sync
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        }
        
        // Track time spent below 5% of voltage range
        if (voltage < threshold5pct) {
 8001de6:	ed97 7a00 	vldr	s14, [r7]
 8001dea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d512      	bpl.n	8001e1e <PotRecording_Process+0x126>
            if (lastSampleTime > 0) {
 8001df8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <PotRecording_Process+0x234>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <PotRecording_Process+0x126>
                uint32_t timeSpentHere = currentTime - lastSampleTime;
 8001e00:	4b4a      	ldr	r3, [pc, #296]	@ (8001f2c <PotRecording_Process+0x234>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	61bb      	str	r3, [r7, #24]
                data->timeBelow5Pct += timeSpentHere;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28
                data->timeBelowLowThreshold = data->timeBelow5Pct; // Keep alias in sync
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        
        // Simple midpoint crossing detection using fixed 1.65V threshold
        uint8_t is_above_midpoint = (voltage > FIXED_MIDPOINT_VOLTAGE) ? 1 : 0;
 8001e1e:	edd7 7a00 	vldr	s15, [r7]
 8001e22:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001f30 <PotRecording_Process+0x238>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	bfcc      	ite	gt
 8001e30:	2301      	movgt	r3, #1
 8001e32:	2300      	movle	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	75fb      	strb	r3, [r7, #23]
        
        // Detect a crossing (change in which side of midpoint we're on)
        if (is_above_midpoint != was_above_midpoint) {
 8001e38:	4b3e      	ldr	r3, [pc, #248]	@ (8001f34 <PotRecording_Process+0x23c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	7dfa      	ldrb	r2, [r7, #23]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d008      	beq.n	8001e54 <PotRecording_Process+0x15c>
            // We crossed the midpoint - increment the counter
            data->crossings50Pct++;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
            data->midCrossingCount = data->crossings50Pct; // Keep alias in sync
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        
        // Update for next comparison
        was_above_midpoint = is_above_midpoint;
 8001e54:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <PotRecording_Process+0x23c>)
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	7013      	strb	r3, [r2, #0]
        
        lastSampleTime = currentTime;
 8001e5a:	4a34      	ldr	r2, [pc, #208]	@ (8001f2c <PotRecording_Process+0x234>)
 8001e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5e:	6013      	str	r3, [r2, #0]
    }

    // Skip first reading since we need two readings for peak detection
    if (data->lastVoltage < 0.0f) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	d503      	bpl.n	8001e78 <PotRecording_Process+0x180>
        data->lastVoltage = voltage;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	619a      	str	r2, [r3, #24]
        return;
 8001e76:	e04f      	b.n	8001f18 <PotRecording_Process+0x220>
    }

    // Peak detection logic
    float threshold = 0.03f;  // Minimum change to consider as significant (to filter noise)
 8001e78:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <PotRecording_Process+0x240>)
 8001e7a:	613b      	str	r3, [r7, #16]
    
    // Rising edge detection (voltage increasing)
    if (voltage > data->lastVoltage + threshold) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	ed97 7a00 	vldr	s14, [r7]
 8001e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	dd07      	ble.n	8001ea8 <PotRecording_Process+0x1b0>
        if (data->risingEdge == 0) data->risingEdge = 1;  // Mark as rising edge
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7f1b      	ldrb	r3, [r3, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d136      	bne.n	8001f0e <PotRecording_Process+0x216>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	771a      	strb	r2, [r3, #28]
 8001ea6:	e032      	b.n	8001f0e <PotRecording_Process+0x216>
    } 
    // Falling edge detection (voltage decreasing)
    else if (voltage < data->lastVoltage - threshold) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	ed93 7a06 	vldr	s14, [r3, #24]
 8001eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb6:	ed97 7a00 	vldr	s14, [r7]
 8001eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	d524      	bpl.n	8001f0e <PotRecording_Process+0x216>
        // If we were on a rising edge and now voltage is falling, we've detected a peak
        if (data->risingEdge == 1) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7f1b      	ldrb	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d120      	bne.n	8001f0e <PotRecording_Process+0x216>
            data->peakCount++;  // Increment peak counter
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]
            data->risingEdge = 0;  // Reset rising edge flag
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
            
            // Flash LED to indicate peak detection
            LED_SetMode(LED_PEAK_FLASH);
 8001edc:	2002      	movs	r0, #2
 8001ede:	f7ff f965 	bl	80011ac <LED_SetMode>
            
            // Calculate time between peaks for frequency calculation
            uint32_t currentPeakTime = currentTime;
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	60fb      	str	r3, [r7, #12]
            if (data->lastPeakTime > 0 && data->peakCount > 1) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <PotRecording_Process+0x210>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d908      	bls.n	8001f08 <PotRecording_Process+0x210>
                data->totalPeakInterval += (currentPeakTime - data->lastPeakTime);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	1acb      	subs	r3, r1, r3
 8001f02:	441a      	add	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            data->lastPeakTime = currentPeakTime;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
    
    // Update lastVoltage for next comparison
    data->lastVoltage = voltage;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	e000      	b.n	8001f18 <PotRecording_Process+0x220>
        return;
 8001f16:	bf00      	nop
}
 8001f18:	3730      	adds	r7, #48	@ 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	3c23d70a 	.word	0x3c23d70a
 8001f24:	3d4ccccd 	.word	0x3d4ccccd
 8001f28:	3f733333 	.word	0x3f733333
 8001f2c:	20000388 	.word	0x20000388
 8001f30:	3fd33333 	.word	0x3fd33333
 8001f34:	20000385 	.word	0x20000385
 8001f38:	3cf5c28f 	.word	0x3cf5c28f

08001f3c <PotRecording_DisplayStats>:

/**
 * Display basic potentiometer statistics on LCD
 * Shows recording time, peak count, and min/max voltage
 */
void PotRecording_DisplayStats(PotRecordingData *data) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    char buffer[20];

    // Clear LCD
    lcd_clear();
 8001f44:	f7ff f88e 	bl	8001064 <lcd_clear>

    if (!data->isRecording) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7d1b      	ldrb	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <PotRecording_DisplayStats+0x2a>
        lcd_send_string("Press B1");
 8001f50:	4836      	ldr	r0, [pc, #216]	@ (800202c <PotRecording_DisplayStats+0xf0>)
 8001f52:	f7ff f8fd 	bl	8001150 <lcd_send_string>
        lcd_send_cmd(LCD_LINE2, 4);
 8001f56:	2104      	movs	r1, #4
 8001f58:	20c0      	movs	r0, #192	@ 0xc0
 8001f5a:	f7ff f813 	bl	8000f84 <lcd_send_cmd>
        lcd_send_string("to start");
 8001f5e:	4834      	ldr	r0, [pc, #208]	@ (8002030 <PotRecording_DisplayStats+0xf4>)
 8001f60:	f7ff f8f6 	bl	8001150 <lcd_send_string>
 8001f64:	e05f      	b.n	8002026 <PotRecording_DisplayStats+0xea>
        return;
    }

    // First line: Time & Peaks
    lcd_send_cmd(LCD_LINE1, 4);  // Return to beginning of first line
 8001f66:	2104      	movs	r1, #4
 8001f68:	2080      	movs	r0, #128	@ 0x80
 8001f6a:	f7ff f80b 	bl	8000f84 <lcd_send_cmd>
    lcd_send_string("T:");
 8001f6e:	4831      	ldr	r0, [pc, #196]	@ (8002034 <PotRecording_DisplayStats+0xf8>)
 8001f70:	f7ff f8ee 	bl	8001150 <lcd_send_string>
    sprintf(buffer, "%lu.%lus", data->elapsedTime / 1000, (data->elapsedTime % 1000) / 100);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a2f      	ldr	r2, [pc, #188]	@ (8002038 <PotRecording_DisplayStats+0xfc>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0999      	lsrs	r1, r3, #6
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <PotRecording_DisplayStats+0xfc>)
 8001f86:	fba3 0302 	umull	r0, r3, r3, r2
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f90:	fb00 f303 	mul.w	r3, r0, r3
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	4a29      	ldr	r2, [pc, #164]	@ (800203c <PotRecording_DisplayStats+0x100>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	f107 000c 	add.w	r0, r7, #12
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	4926      	ldr	r1, [pc, #152]	@ (8002040 <PotRecording_DisplayStats+0x104>)
 8001fa6:	f005 fc35 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f8ce 	bl	8001150 <lcd_send_string>

    lcd_send_string(" P:");
 8001fb4:	4823      	ldr	r0, [pc, #140]	@ (8002044 <PotRecording_DisplayStats+0x108>)
 8001fb6:	f7ff f8cb 	bl	8001150 <lcd_send_string>
    sprintf(buffer, "%lu", data->peakCount);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4921      	ldr	r1, [pc, #132]	@ (8002048 <PotRecording_DisplayStats+0x10c>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 fc25 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f8be 	bl	8001150 <lcd_send_string>

    // Second line: Min/Max voltage
    lcd_send_cmd(LCD_LINE2, 4);
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	20c0      	movs	r0, #192	@ 0xc0
 8001fd8:	f7fe ffd4 	bl	8000f84 <lcd_send_cmd>
    sprintf(buffer, "%.1f", data->minVoltage);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fab9 	bl	8000558 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	f107 000c 	add.w	r0, r7, #12
 8001fee:	4917      	ldr	r1, [pc, #92]	@ (800204c <PotRecording_DisplayStats+0x110>)
 8001ff0:	f005 fc10 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f8a9 	bl	8001150 <lcd_send_string>
    lcd_send_string("V-");
 8001ffe:	4814      	ldr	r0, [pc, #80]	@ (8002050 <PotRecording_DisplayStats+0x114>)
 8002000:	f7ff f8a6 	bl	8001150 <lcd_send_string>
    sprintf(buffer, "%.1fV", data->maxVoltage);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe faa5 	bl	8000558 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	f107 000c 	add.w	r0, r7, #12
 8002016:	490f      	ldr	r1, [pc, #60]	@ (8002054 <PotRecording_DisplayStats+0x118>)
 8002018:	f005 fbfc 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f895 	bl	8001150 <lcd_send_string>
}
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	08009b20 	.word	0x08009b20
 8002030:	08009b2c 	.word	0x08009b2c
 8002034:	08009b38 	.word	0x08009b38
 8002038:	10624dd3 	.word	0x10624dd3
 800203c:	51eb851f 	.word	0x51eb851f
 8002040:	08009b3c 	.word	0x08009b3c
 8002044:	08009b48 	.word	0x08009b48
 8002048:	08009b4c 	.word	0x08009b4c
 800204c:	08009b50 	.word	0x08009b50
 8002050:	08009b58 	.word	0x08009b58
 8002054:	08009b5c 	.word	0x08009b5c

08002058 <Potentiometer_Init>:
/**
  * @brief Initialize potentiometer (ADC settings)
  * @param hadc Pointer to ADC handle
  * @retval None
  */
void Potentiometer_Init(ADC_HandleTypeDef *hadc) {
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    potADC = hadc;
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <Potentiometer_Init+0x1c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000038c 	.word	0x2000038c

08002078 <Potentiometer_Read>:

uint16_t Potentiometer_Read(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
    // Start conversion
    HAL_ADC_Start(potADC);
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <Potentiometer_Read+0x48>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f001 fe5c 	bl	8003d40 <HAL_ADC_Start>

    // Wait for conversion to complete with timeout
    if (HAL_ADC_PollForConversion(potADC, 10) != HAL_OK) {
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <Potentiometer_Read+0x48>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	210a      	movs	r1, #10
 800208e:	4618      	mov	r0, r3
 8002090:	f001 ff3d 	bl	8003f0e <HAL_ADC_PollForConversion>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <Potentiometer_Read+0x26>
        return 0; // Return 0 if timeout or error
 800209a:	2300      	movs	r3, #0
 800209c:	e00c      	b.n	80020b8 <Potentiometer_Read+0x40>
    }

    // Read ADC value
    uint16_t value = HAL_ADC_GetValue(potADC);
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <Potentiometer_Read+0x48>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 ffbe 	bl	8004024 <HAL_ADC_GetValue>
 80020a8:	4603      	mov	r3, r0
 80020aa:	80fb      	strh	r3, [r7, #6]

    // Stop conversion
    HAL_ADC_Stop(potADC);
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <Potentiometer_Read+0x48>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 fef9 	bl	8003ea8 <HAL_ADC_Stop>

    return value;
 80020b6:	88fb      	ldrh	r3, [r7, #6]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000038c 	.word	0x2000038c

080020c4 <Potentiometer_GetVoltage>:
/**
  * @brief Get voltage from potentiometer (0-3.3V)
  * @retval Voltage in volts
  */
float Potentiometer_GetVoltage(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
    uint16_t rawValue = Potentiometer_Read();
 80020ca:	f7ff ffd5 	bl	8002078 <Potentiometer_Read>
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]

    // Ensure valid reading
    if (rawValue == 0 && HAL_ADC_GetState(potADC) != HAL_ADC_STATE_READY) {
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <Potentiometer_GetVoltage+0x2a>
 80020d8:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <Potentiometer_GetVoltage+0x70>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f8e1 	bl	80042a4 <HAL_ADC_GetState>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d002      	beq.n	80020ee <Potentiometer_GetVoltage+0x2a>
        return 0.0f; // Return 0 if ADC is not ready
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e01b      	b.n	8002126 <Potentiometer_GetVoltage+0x62>
    }

    // Convert to voltage (assuming 12-bit ADC and 3.3V reference)
    // Add a small epsilon to avoid negative zero (-0.00) in display
    float voltage = ((float)rawValue * 3.3f) / 4095.0f;
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002138 <Potentiometer_GetVoltage+0x74>
 80020fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002100:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800213c <Potentiometer_GetVoltage+0x78>
 8002104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002108:	edc7 7a00 	vstr	s15, [r7]
    return voltage < 0.001f ? 0.0f : voltage;  // Prevent negative zero
 800210c:	edd7 7a00 	vldr	s15, [r7]
 8002110:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002140 <Potentiometer_GetVoltage+0x7c>
 8002114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	d502      	bpl.n	8002124 <Potentiometer_GetVoltage+0x60>
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e000      	b.n	8002126 <Potentiometer_GetVoltage+0x62>
 8002124:	683b      	ldr	r3, [r7, #0]
}
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eeb0 0a67 	vmov.f32	s0, s15
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000038c 	.word	0x2000038c
 8002138:	40533333 	.word	0x40533333
 800213c:	457ff000 	.word	0x457ff000
 8002140:	3a83126f 	.word	0x3a83126f

08002144 <Recording_Init>:

/**
 * Initialize recording functionality
 * Sets up data structures for both sensors
 */
void Recording_Init(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    PotRecording_Init(&potData);
 8002148:	4805      	ldr	r0, [pc, #20]	@ (8002160 <Recording_Init+0x1c>)
 800214a:	f7ff fd33 	bl	8001bb4 <PotRecording_Init>
    UltraRecording_Init(&ultraData);
 800214e:	4805      	ldr	r0, [pc, #20]	@ (8002164 <Recording_Init+0x20>)
 8002150:	f001 fb1a 	bl	8003788 <UltraRecording_Init>
    currentDetailedStatsWindow = 0;
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <Recording_Init+0x24>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000390 	.word	0x20000390
 8002164:	200003dc 	.word	0x200003dc
 8002168:	20000408 	.word	0x20000408

0800216c <Recording_Start>:

/**
 * Start recording from both sensors
 */
void Recording_Start(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    PotRecording_Start(&potData);
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <Recording_Start+0x14>)
 8002172:	f7ff fd69 	bl	8001c48 <PotRecording_Start>
    UltraRecording_Start(&ultraData);
 8002176:	4803      	ldr	r0, [pc, #12]	@ (8002184 <Recording_Start+0x18>)
 8002178:	f001 fb36 	bl	80037e8 <UltraRecording_Start>
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000390 	.word	0x20000390
 8002184:	200003dc 	.word	0x200003dc

08002188 <Recording_Stop>:

/**
 * Stop recording from both sensors
 */
void Recording_Stop(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
    PotRecording_Stop(&potData);
 800218c:	4803      	ldr	r0, [pc, #12]	@ (800219c <Recording_Stop+0x14>)
 800218e:	f7ff fda5 	bl	8001cdc <PotRecording_Stop>
    UltraRecording_Stop(&ultraData);
 8002192:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <Recording_Stop+0x18>)
 8002194:	f001 fb56 	bl	8003844 <UltraRecording_Stop>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000390 	.word	0x20000390
 80021a0:	200003dc 	.word	0x200003dc

080021a4 <Recording_ProcessPotReading>:
 * Updates statistics and peak detection
 * 
 * @param voltage Current voltage reading from the potentiometer
 * @param distanceMm Current distance reading from the ultrasonic sensor
 */
void Recording_ProcessPotReading(float voltage, float distanceMm) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ae:	edc7 0a00 	vstr	s1, [r7]
    PotRecording_Process(&potData, voltage);
 80021b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80021b6:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <Recording_ProcessPotReading+0x20>)
 80021b8:	f7ff fd9e 	bl	8001cf8 <PotRecording_Process>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000390 	.word	0x20000390

080021c8 <Recording_ProcessUltraReading>:
 * Updates statistics and direction change detection
 * 
 * @param distanceMm Current distance reading from the ultrasonic sensor in millimeters
 * @param isHighSignal Flag indicating if the potentiometer signal is high
 */
void Recording_ProcessUltraReading(float distanceMm, uint8_t isHighSignal) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80021d2:	4603      	mov	r3, r0
 80021d4:	70fb      	strb	r3, [r7, #3]
    UltraRecording_Process(&ultraData, distanceMm);
 80021d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80021da:	482c      	ldr	r0, [pc, #176]	@ (800228c <Recording_ProcessUltraReading+0xc4>)
 80021dc:	f001 fb40 	bl	8003860 <UltraRecording_Process>
    
    // Track direction changes during high signal separately
    // We need to maintain this here as it combines data from both sensors
    if (isHighSignal) {
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04f      	beq.n	8002286 <Recording_ProcessUltraReading+0xbe>
        static int8_t lastDir = 0;
        static float lastDist = 0;
        
        if (lastDist == 0) {
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <Recording_ProcessUltraReading+0xc8>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d103      	bne.n	80021fe <Recording_ProcessUltraReading+0x36>
            lastDist = distanceMm;
 80021f6:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <Recording_ProcessUltraReading+0xc8>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6013      	str	r3, [r2, #0]
            return;
 80021fc:	e043      	b.n	8002286 <Recording_ProcessUltraReading+0xbe>
        }
        
        // Detect direction with a deadband to filter noise
        float deadband = 10.0f;
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <Recording_ProcessUltraReading+0xcc>)
 8002200:	60bb      	str	r3, [r7, #8]
        int8_t currentDir = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
        
        if (distanceMm > lastDist + deadband) {
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <Recording_ProcessUltraReading+0xc8>)
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002214:	ed97 7a01 	vldr	s14, [r7, #4]
 8002218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	dd02      	ble.n	8002228 <Recording_ProcessUltraReading+0x60>
            currentDir = 1;  // Moving away
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e00f      	b.n	8002248 <Recording_ProcessUltraReading+0x80>
        } else if (distanceMm < lastDist - deadband) {
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <Recording_ProcessUltraReading+0xc8>)
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002236:	ed97 7a01 	vldr	s14, [r7, #4]
 800223a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002242:	d501      	bpl.n	8002248 <Recording_ProcessUltraReading+0x80>
            currentDir = -1; // Moving closer
 8002244:	23ff      	movs	r3, #255	@ 0xff
 8002246:	73fb      	strb	r3, [r7, #15]
        }
        
        // Count direction change if we have a valid previous direction and current direction
        if (lastDir != 0 && currentDir != 0 && currentDir != lastDir) {
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <Recording_ProcessUltraReading+0xd0>)
 800224a:	f993 3000 	ldrsb.w	r3, [r3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00f      	beq.n	8002272 <Recording_ProcessUltraReading+0xaa>
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <Recording_ProcessUltraReading+0xaa>
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <Recording_ProcessUltraReading+0xd0>)
 800225c:	f993 3000 	ldrsb.w	r3, [r3]
 8002260:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002264:	429a      	cmp	r2, r3
 8002266:	d004      	beq.n	8002272 <Recording_ProcessUltraReading+0xaa>
            ultraData.dirChangeWhenHighSignalCount++;
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <Recording_ProcessUltraReading+0xc4>)
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	3301      	adds	r3, #1
 800226e:	4a07      	ldr	r2, [pc, #28]	@ (800228c <Recording_ProcessUltraReading+0xc4>)
 8002270:	6293      	str	r3, [r2, #40]	@ 0x28
        }
        
        // Update tracking variables for next reading
        lastDist = distanceMm;
 8002272:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <Recording_ProcessUltraReading+0xc8>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6013      	str	r3, [r2, #0]
        if (currentDir != 0) {
 8002278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <Recording_ProcessUltraReading+0xbe>
            lastDir = currentDir;
 8002280:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <Recording_ProcessUltraReading+0xd0>)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	7013      	strb	r3, [r2, #0]
        }
    }
}
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200003dc 	.word	0x200003dc
 8002290:	20000410 	.word	0x20000410
 8002294:	41200000 	.word	0x41200000
 8002298:	20000414 	.word	0x20000414

0800229c <Recording_ToggleDetailedStats>:

/**
 * Toggle detailed statistics window display
 * Cycles through available windows (1-4) or returns to normal stats display (0)
 */
void Recording_ToggleDetailedStats(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 80022a2:	f001 fcd9 	bl	8003c58 <HAL_GetTick>
 80022a6:	6078      	str	r0, [r7, #4]
    
    // Prevent rapid window switching by enforcing a delay
    if (currentTime - lastWindowChangeTime < windowSwitchDelay) {
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <Recording_ToggleDetailedStats+0x4c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d313      	bcc.n	80022e0 <Recording_ToggleDetailedStats+0x44>
        return;
    }
    
    lastWindowChangeTime = currentTime;
 80022b8:	4a0b      	ldr	r2, [pc, #44]	@ (80022e8 <Recording_ToggleDetailedStats+0x4c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
    
    // Cycle through windows: None -> 1 -> 2 -> 3 -> 4 -> None
    currentDetailedStatsWindow = (currentDetailedStatsWindow + 1) % 5;
 80022be:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <Recording_ToggleDetailedStats+0x50>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <Recording_ToggleDetailedStats+0x54>)
 80022c6:	fb83 1302 	smull	r1, r3, r3, r2
 80022ca:	1059      	asrs	r1, r3, #1
 80022cc:	17d3      	asrs	r3, r2, #31
 80022ce:	1ac9      	subs	r1, r1, r3
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	1ad1      	subs	r1, r2, r3
 80022d8:	b2ca      	uxtb	r2, r1
 80022da:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <Recording_ToggleDetailedStats+0x50>)
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e000      	b.n	80022e2 <Recording_ToggleDetailedStats+0x46>
        return;
 80022e0:	bf00      	nop
}
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000040c 	.word	0x2000040c
 80022ec:	20000408 	.word	0x20000408
 80022f0:	66666667 	.word	0x66666667

080022f4 <Recording_UpdateDisplay>:

/**
 * Update the LCD display with current statistics
 * Shows either basic stats or detailed stats depending on current window selection
 */
void Recording_UpdateDisplay(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    // Display the appropriate window based on current selection
    switch (currentDetailedStatsWindow) {
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <Recording_UpdateDisplay+0x7c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d835      	bhi.n	800236c <Recording_UpdateDisplay+0x78>
 8002300:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <Recording_UpdateDisplay+0x14>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	0800231d 	.word	0x0800231d
 800230c:	0800234b 	.word	0x0800234b
 8002310:	08002353 	.word	0x08002353
 8002314:	0800235b 	.word	0x0800235b
 8002318:	08002363 	.word	0x08002363
        case 0:
            // Show basic stats from both sensors
            if (HAL_GetTick() % 4000 < 2000) {
 800231c:	f001 fc9c 	bl	8003c58 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <Recording_UpdateDisplay+0x80>)
 8002324:	fba3 1302 	umull	r1, r3, r3, r2
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002338:	d203      	bcs.n	8002342 <Recording_UpdateDisplay+0x4e>
                // First 2 seconds: Show potentiometer stats
                PotRecording_DisplayStats(&potData);
 800233a:	480f      	ldr	r0, [pc, #60]	@ (8002378 <Recording_UpdateDisplay+0x84>)
 800233c:	f7ff fdfe 	bl	8001f3c <PotRecording_DisplayStats>
            } else {
                // Next 2 seconds: Show ultrasonic stats
                UltraRecording_DisplayStats(&ultraData);
            }
            break;
 8002340:	e014      	b.n	800236c <Recording_UpdateDisplay+0x78>
                UltraRecording_DisplayStats(&ultraData);
 8002342:	480e      	ldr	r0, [pc, #56]	@ (800237c <Recording_UpdateDisplay+0x88>)
 8002344:	f001 fb58 	bl	80039f8 <UltraRecording_DisplayStats>
            break;
 8002348:	e010      	b.n	800236c <Recording_UpdateDisplay+0x78>
            
        case 1:
            // Detailed potentiometer stats window 1
            resutlsDisplay_PotentiometerWindow1(&potData);
 800234a:	480b      	ldr	r0, [pc, #44]	@ (8002378 <Recording_UpdateDisplay+0x84>)
 800234c:	f000 fac2 	bl	80028d4 <resutlsDisplay_PotentiometerWindow1>
            break;
 8002350:	e00c      	b.n	800236c <Recording_UpdateDisplay+0x78>
            
        case 2:
            // Detailed potentiometer stats window 2
            resutlsDisplay_PotentiometerWindow2(&potData);
 8002352:	4809      	ldr	r0, [pc, #36]	@ (8002378 <Recording_UpdateDisplay+0x84>)
 8002354:	f000 fb50 	bl	80029f8 <resutlsDisplay_PotentiometerWindow2>
            break;
 8002358:	e008      	b.n	800236c <Recording_UpdateDisplay+0x78>
            
        case 3:
            // Detailed ultrasonic stats window
            resutlsDisplay_UltrasonicWindow(&ultraData);
 800235a:	4808      	ldr	r0, [pc, #32]	@ (800237c <Recording_UpdateDisplay+0x88>)
 800235c:	f000 fbf6 	bl	8002b4c <resutlsDisplay_UltrasonicWindow>
            break;
 8002360:	e004      	b.n	800236c <Recording_UpdateDisplay+0x78>
            
        case 4:
            // Combined stats window
            resutlsDisplay_CombinedWindow(&potData, &ultraData);
 8002362:	4906      	ldr	r1, [pc, #24]	@ (800237c <Recording_UpdateDisplay+0x88>)
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <Recording_UpdateDisplay+0x84>)
 8002366:	f000 fc4f 	bl	8002c08 <resutlsDisplay_CombinedWindow>
            break;
 800236a:	bf00      	nop
    }
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000408 	.word	0x20000408
 8002374:	10624dd3 	.word	0x10624dd3
 8002378:	20000390 	.word	0x20000390
 800237c:	200003dc 	.word	0x200003dc

08002380 <Recording_IsShowingDetailedStats>:
/**
 * Check if detailed statistics are currently being displayed
 * 
 * @return 1 if a detailed stats window is active, 0 otherwise
 */
uint8_t Recording_IsShowingDetailedStats(void) {
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    return (currentDetailedStatsWindow > 0);
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <Recording_IsShowingDetailedStats+0x1c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	20000408 	.word	0x20000408

080023a0 <Recording_GetPotData>:
 * Get pointer to potentiometer data structure
 * Used for report generation
 * 
 * @return Pointer to the potentiometer data structure
 */
PotRecordingData* Recording_GetPotData(void) {
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
    return &potData;
 80023a4:	4b02      	ldr	r3, [pc, #8]	@ (80023b0 <Recording_GetPotData+0x10>)
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	20000390 	.word	0x20000390

080023b4 <Recording_GetUltraData>:
 * Get pointer to ultrasonic data structure
 * Used for report generation
 * 
 * @return Pointer to the ultrasonic data structure
 */
UltraRecordingData* Recording_GetUltraData(void) {
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
    return &ultraData;
 80023b8:	4b02      	ldr	r3, [pc, #8]	@ (80023c4 <Recording_GetUltraData+0x10>)
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	200003dc 	.word	0x200003dc

080023c8 <Report_Init>:
// Static variables
static UART_HandleTypeDef *reportUart;
static char reportBuffer[384]; // Increased buffer size for more data

// Initialize the report generator module
void Report_Init(UART_HandleTypeDef *huart) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    reportUart = huart;
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <Report_Init+0x1c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000418 	.word	0x20000418

080023e8 <SendUartLine>:

// Helper function to send a line of text via UART (for analysis report)
static void SendUartLine(const char *text) {
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    if (reportUart) {
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <SendUartLine+0x44>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d014      	beq.n	8002422 <SendUartLine+0x3a>
        HAL_UART_Transmit(reportUart, (uint8_t*)text, strlen(text), 100);
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <SendUartLine+0x44>)
 80023fa:	681c      	ldr	r4, [r3, #0]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fd ff3f 	bl	8000280 <strlen>
 8002402:	4603      	mov	r3, r0
 8002404:	b29a      	uxth	r2, r3
 8002406:	2364      	movs	r3, #100	@ 0x64
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4620      	mov	r0, r4
 800240c:	f004 f92e 	bl	800666c <HAL_UART_Transmit>
        const char *newline = "\r\n";
 8002410:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <SendUartLine+0x48>)
 8002412:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(reportUart, (uint8_t*)newline, 2, 10);
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <SendUartLine+0x44>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	230a      	movs	r3, #10
 800241a:	2202      	movs	r2, #2
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	f004 f925 	bl	800666c <HAL_UART_Transmit>
    }
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	bf00      	nop
 800242c:	20000418 	.word	0x20000418
 8002430:	08009b64 	.word	0x08009b64

08002434 <Report_LogLiveDataLine>:
// Log a single line of real-time sensor data via UART in CSV format
int Report_LogLiveDataLine(uint32_t timestamp, float voltage, uint8_t is_peak, 
                          float distance_mm, uint8_t is_dir_change, 
                          float min_voltage, float max_voltage,
                          uint8_t is_high_signal, uint8_t is_low_signal,
                          uint8_t is_mid_crossing, uint8_t is_close_distance) {
 8002434:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002438:	b096      	sub	sp, #88	@ 0x58
 800243a:	af0c      	add	r7, sp, #48	@ 0x30
 800243c:	6178      	str	r0, [r7, #20]
 800243e:	ed87 0a04 	vstr	s0, [r7, #16]
 8002442:	4608      	mov	r0, r1
 8002444:	edc7 0a02 	vstr	s1, [r7, #8]
 8002448:	4611      	mov	r1, r2
 800244a:	ed87 1a01 	vstr	s2, [r7, #4]
 800244e:	edc7 1a00 	vstr	s3, [r7]
 8002452:	461a      	mov	r2, r3
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	460b      	mov	r3, r1
 800245a:	73bb      	strb	r3, [r7, #14]
 800245c:	4613      	mov	r3, r2
 800245e:	737b      	strb	r3, [r7, #13]
    if (!reportUart) {
 8002460:	4b40      	ldr	r3, [pc, #256]	@ (8002564 <Report_LogLiveDataLine+0x130>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <Report_LogLiveDataLine+0x3a>
        return -1; // UART not initialized
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	e074      	b.n	8002558 <Report_LogLiveDataLine+0x124>
    }
    
    // Calculate signal levels based on min/max
    float voltage_range = max_voltage - min_voltage;
 800246e:	ed97 7a00 	vldr	s14, [r7]
 8002472:	edd7 7a01 	vldr	s15, [r7, #4]
 8002476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float volt_5pct = min_voltage + (voltage_range * 0.05f);
 800247e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002482:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002568 <Report_LogLiveDataLine+0x134>
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	ed97 7a01 	vldr	s14, [r7, #4]
 800248e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002492:	edc7 7a08 	vstr	s15, [r7, #32]
    float volt_95pct = min_voltage + (voltage_range * 0.95f);
 8002496:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800249a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800256c <Report_LogLiveDataLine+0x138>
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	edc7 7a07 	vstr	s15, [r7, #28]
    
    // Check if voltage is above 95% or below 5% of range
    uint8_t above_95pct = (voltage > volt_95pct) ? 1 : 0;
 80024ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80024b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80024b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024be:	bfcc      	ite	gt
 80024c0:	2301      	movgt	r3, #1
 80024c2:	2300      	movle	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	76fb      	strb	r3, [r7, #27]
    uint8_t below_5pct = (voltage < volt_5pct) ? 1 : 0;
 80024c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80024cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80024d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	bf4c      	ite	mi
 80024da:	2301      	movmi	r3, #1
 80024dc:	2300      	movpl	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	76bb      	strb	r3, [r7, #26]
    
    // Format data into CSV string with additional columns
    sprintf(reportBuffer, "%lu, %.2f, %d, %.0f, %d, %d, %d, %d, %d, %d\r\n", 
 80024e2:	6938      	ldr	r0, [r7, #16]
 80024e4:	f7fe f838 	bl	8000558 <__aeabi_f2d>
 80024e8:	4680      	mov	r8, r0
 80024ea:	4689      	mov	r9, r1
 80024ec:	7bfe      	ldrb	r6, [r7, #15]
 80024ee:	68b8      	ldr	r0, [r7, #8]
 80024f0:	f7fe f832 	bl	8000558 <__aeabi_f2d>
 80024f4:	4683      	mov	fp, r0
 80024f6:	468c      	mov	ip, r1
 80024f8:	7bb9      	ldrb	r1, [r7, #14]
 80024fa:	7ef8      	ldrb	r0, [r7, #27]
 80024fc:	7ebb      	ldrb	r3, [r7, #26]
 80024fe:	461d      	mov	r5, r3
 8002500:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002504:	f897 4050 	ldrb.w	r4, [r7, #80]	@ 0x50
 8002508:	4623      	mov	r3, r4
 800250a:	7b7c      	ldrb	r4, [r7, #13]
 800250c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800250e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002510:	9209      	str	r2, [sp, #36]	@ 0x24
 8002512:	462b      	mov	r3, r5
 8002514:	9308      	str	r3, [sp, #32]
 8002516:	9007      	str	r0, [sp, #28]
 8002518:	9106      	str	r1, [sp, #24]
 800251a:	e9cd bc04 	strd	fp, ip, [sp, #16]
 800251e:	9602      	str	r6, [sp, #8]
 8002520:	e9cd 8900 	strd	r8, r9, [sp]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4912      	ldr	r1, [pc, #72]	@ (8002570 <Report_LogLiveDataLine+0x13c>)
 8002528:	4812      	ldr	r0, [pc, #72]	@ (8002574 <Report_LogLiveDataLine+0x140>)
 800252a:	f005 f973 	bl	8007814 <siprintf>
            is_close_distance,   // 1 if distance < 100mm (close)
            is_high_signal       // 1 if voltage > 50% of range
           );
    
    // Transmit via UART
    HAL_StatusTypeDef status = HAL_UART_Transmit(reportUart, (uint8_t*)reportBuffer, strlen(reportBuffer), 100);
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <Report_LogLiveDataLine+0x130>)
 8002530:	681c      	ldr	r4, [r3, #0]
 8002532:	4810      	ldr	r0, [pc, #64]	@ (8002574 <Report_LogLiveDataLine+0x140>)
 8002534:	f7fd fea4 	bl	8000280 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	b29a      	uxth	r2, r3
 800253c:	2364      	movs	r3, #100	@ 0x64
 800253e:	490d      	ldr	r1, [pc, #52]	@ (8002574 <Report_LogLiveDataLine+0x140>)
 8002540:	4620      	mov	r0, r4
 8002542:	f004 f893 	bl	800666c <HAL_UART_Transmit>
 8002546:	4603      	mov	r3, r0
 8002548:	767b      	strb	r3, [r7, #25]
    
    return (status == HAL_OK) ? 0 : -1;
 800254a:	7e7b      	ldrb	r3, [r7, #25]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <Report_LogLiveDataLine+0x120>
 8002550:	2300      	movs	r3, #0
 8002552:	e001      	b.n	8002558 <Report_LogLiveDataLine+0x124>
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	@ 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002562:	bf00      	nop
 8002564:	20000418 	.word	0x20000418
 8002568:	3d4ccccd 	.word	0x3d4ccccd
 800256c:	3f733333 	.word	0x3f733333
 8002570:	08009b68 	.word	0x08009b68
 8002574:	2000041c 	.word	0x2000041c

08002578 <Report_WriteLiveDataHeader>:

// Write CSV header for live data logging
void Report_WriteLiveDataHeader(void) {
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
    if (reportUart) {
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <Report_WriteLiveDataHeader+0x34>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <Report_WriteLiveDataHeader+0x2a>
        const char *header = "# Time(ms), Voltage(V), Peak, Distance(mm), ReverseDir, Above95%, Below5%, MidCross, CloseObj, HighSignal\r\n";
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <Report_WriteLiveDataHeader+0x38>)
 8002588:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(reportUart, (uint8_t*)header, strlen(header), 100);
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <Report_WriteLiveDataHeader+0x34>)
 800258c:	681c      	ldr	r4, [r3, #0]
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fd fe76 	bl	8000280 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	b29a      	uxth	r2, r3
 8002598:	2364      	movs	r3, #100	@ 0x64
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4620      	mov	r0, r4
 800259e:	f004 f865 	bl	800666c <HAL_UART_Transmit>
    }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000418 	.word	0x20000418
 80025b0:	08009b98 	.word	0x08009b98

080025b4 <Report_GenerateAnalysisReport>:

// Generate a comprehensive analysis report via UART
void Report_GenerateAnalysisReport(PotRecordingData *potData, UltraRecordingData *ultraData) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    // Report header
    SendUartLine("---------------------------------------------------");
 80025be:	48aa      	ldr	r0, [pc, #680]	@ (8002868 <Report_GenerateAnalysisReport+0x2b4>)
 80025c0:	f7ff ff12 	bl	80023e8 <SendUartLine>
    SendUartLine("            SIGNAL ANALYSIS REPORT                 ");
 80025c4:	48a9      	ldr	r0, [pc, #676]	@ (800286c <Report_GenerateAnalysisReport+0x2b8>)
 80025c6:	f7ff ff0f 	bl	80023e8 <SendUartLine>
    SendUartLine("---------------------------------------------------");
 80025ca:	48a7      	ldr	r0, [pc, #668]	@ (8002868 <Report_GenerateAnalysisReport+0x2b4>)
 80025cc:	f7ff ff0c 	bl	80023e8 <SendUartLine>
    
    // General information
    float durationSeconds = potData->elapsedTime / 1000.0f;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025dc:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8002870 <Report_GenerateAnalysisReport+0x2bc>
 80025e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    sprintf(reportBuffer, "Duration: %.1f s", durationSeconds);
 80025e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025ea:	f7fd ffb5 	bl	8000558 <__aeabi_f2d>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	49a0      	ldr	r1, [pc, #640]	@ (8002874 <Report_GenerateAnalysisReport+0x2c0>)
 80025f4:	48a0      	ldr	r0, [pc, #640]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80025f6:	f005 f90d 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 80025fa:	489f      	ldr	r0, [pc, #636]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80025fc:	f7ff fef4 	bl	80023e8 <SendUartLine>
    
    // Potentiometer data
    SendUartLine("\n--- POTENTIOMETER DATA ---");
 8002600:	489e      	ldr	r0, [pc, #632]	@ (800287c <Report_GenerateAnalysisReport+0x2c8>)
 8002602:	f7ff fef1 	bl	80023e8 <SendUartLine>
    
    sprintf(reportBuffer, "Min Voltage: %.2f V", potData->minVoltage);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ffa4 	bl	8000558 <__aeabi_f2d>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	499a      	ldr	r1, [pc, #616]	@ (8002880 <Report_GenerateAnalysisReport+0x2cc>)
 8002616:	4898      	ldr	r0, [pc, #608]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002618:	f005 f8fc 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 800261c:	4896      	ldr	r0, [pc, #600]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800261e:	f7ff fee3 	bl	80023e8 <SendUartLine>
    
    sprintf(reportBuffer, "Max Voltage: %.2f V", potData->maxVoltage);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff96 	bl	8000558 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4994      	ldr	r1, [pc, #592]	@ (8002884 <Report_GenerateAnalysisReport+0x2d0>)
 8002632:	4891      	ldr	r0, [pc, #580]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002634:	f005 f8ee 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 8002638:	488f      	ldr	r0, [pc, #572]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800263a:	f7ff fed5 	bl	80023e8 <SendUartLine>
    
    sprintf(reportBuffer, "Peak Count: %lu", potData->peakCount);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	461a      	mov	r2, r3
 8002644:	4990      	ldr	r1, [pc, #576]	@ (8002888 <Report_GenerateAnalysisReport+0x2d4>)
 8002646:	488c      	ldr	r0, [pc, #560]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002648:	f005 f8e4 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 800264c:	488a      	ldr	r0, [pc, #552]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800264e:	f7ff fecb 	bl	80023e8 <SendUartLine>
    
    // Calculate average frequency (peaks per second)
    float avgFrequency = 0.0f;
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
    if (potData->peakCount > 1 && potData->totalPeakInterval > 0) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d929      	bls.n	80026b4 <Report_GenerateAnalysisReport+0x100>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002664:	2b00      	cmp	r3, #0
 8002666:	d025      	beq.n	80026b4 <Report_GenerateAnalysisReport+0x100>
        // Avg interval in ms = totalInterval / (peakCount - 1)
        float avgIntervalMs = (float)potData->totalPeakInterval / (float)(potData->peakCount - 1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	3b01      	subs	r3, #1
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002686:	edc7 7a07 	vstr	s15, [r7, #28]
        // Frequency = 1000 / avgIntervalMs (to get Hz)
        avgFrequency = 1000.0f / avgIntervalMs;
 800268a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002870 <Report_GenerateAnalysisReport+0x2bc>
 800268e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002696:	edc7 7a08 	vstr	s15, [r7, #32]
        
        sprintf(reportBuffer, "Avg Frequency: %.2f Hz", avgFrequency);
 800269a:	6a38      	ldr	r0, [r7, #32]
 800269c:	f7fd ff5c 	bl	8000558 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4979      	ldr	r1, [pc, #484]	@ (800288c <Report_GenerateAnalysisReport+0x2d8>)
 80026a6:	4874      	ldr	r0, [pc, #464]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80026a8:	f005 f8b4 	bl	8007814 <siprintf>
        SendUartLine(reportBuffer);
 80026ac:	4872      	ldr	r0, [pc, #456]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80026ae:	f7ff fe9b 	bl	80023e8 <SendUartLine>
    if (potData->peakCount > 1 && potData->totalPeakInterval > 0) {
 80026b2:	e002      	b.n	80026ba <Report_GenerateAnalysisReport+0x106>
    } else {
        SendUartLine("Avg Frequency: N/A (insufficient peaks)");
 80026b4:	4876      	ldr	r0, [pc, #472]	@ (8002890 <Report_GenerateAnalysisReport+0x2dc>)
 80026b6:	f7ff fe97 	bl	80023e8 <SendUartLine>
    }
    
    // Time statistics
    float timeAbove95Sec = potData->timeAbove95Pct / 1000.0f;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c6:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8002870 <Report_GenerateAnalysisReport+0x2bc>
 80026ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ce:	edc7 7a06 	vstr	s15, [r7, #24]
    sprintf(reportBuffer, "Time >95%%: %.1f s", timeAbove95Sec);
 80026d2:	69b8      	ldr	r0, [r7, #24]
 80026d4:	f7fd ff40 	bl	8000558 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	496d      	ldr	r1, [pc, #436]	@ (8002894 <Report_GenerateAnalysisReport+0x2e0>)
 80026de:	4866      	ldr	r0, [pc, #408]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80026e0:	f005 f898 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 80026e4:	4864      	ldr	r0, [pc, #400]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80026e6:	f7ff fe7f 	bl	80023e8 <SendUartLine>
    
    float timeBelow5Sec = potData->timeBelow5Pct / 1000.0f;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f6:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8002870 <Report_GenerateAnalysisReport+0x2bc>
 80026fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fe:	edc7 7a05 	vstr	s15, [r7, #20]
    sprintf(reportBuffer, "Time <5%%: %.1f s", timeBelow5Sec);
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7fd ff28 	bl	8000558 <__aeabi_f2d>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4962      	ldr	r1, [pc, #392]	@ (8002898 <Report_GenerateAnalysisReport+0x2e4>)
 800270e:	485a      	ldr	r0, [pc, #360]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002710:	f005 f880 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 8002714:	4858      	ldr	r0, [pc, #352]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002716:	f7ff fe67 	bl	80023e8 <SendUartLine>
    
    sprintf(reportBuffer, "Mid-Level Crossings: %lu", potData->crossings50Pct);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	461a      	mov	r2, r3
 8002720:	495e      	ldr	r1, [pc, #376]	@ (800289c <Report_GenerateAnalysisReport+0x2e8>)
 8002722:	4855      	ldr	r0, [pc, #340]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002724:	f005 f876 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 8002728:	4853      	ldr	r0, [pc, #332]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800272a:	f7ff fe5d 	bl	80023e8 <SendUartLine>
    
    // Ultrasonic data
    SendUartLine("\n--- ULTRASONIC DATA ---");
 800272e:	485c      	ldr	r0, [pc, #368]	@ (80028a0 <Report_GenerateAnalysisReport+0x2ec>)
 8002730:	f7ff fe5a 	bl	80023e8 <SendUartLine>
    
    if (ultraData->minDistance <= ultraData->maxDistance) {
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	ed93 7a02 	vldr	s14, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d840      	bhi.n	80027cc <Report_GenerateAnalysisReport+0x218>
        sprintf(reportBuffer, "Min Distance: %.0f mm", ultraData->minDistance);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff02 	bl	8000558 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4952      	ldr	r1, [pc, #328]	@ (80028a4 <Report_GenerateAnalysisReport+0x2f0>)
 800275a:	4847      	ldr	r0, [pc, #284]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800275c:	f005 f85a 	bl	8007814 <siprintf>
        SendUartLine(reportBuffer);
 8002760:	4845      	ldr	r0, [pc, #276]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002762:	f7ff fe41 	bl	80023e8 <SendUartLine>
        
        sprintf(reportBuffer, "Max Distance: %.0f mm", ultraData->maxDistance);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fef4 	bl	8000558 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	494c      	ldr	r1, [pc, #304]	@ (80028a8 <Report_GenerateAnalysisReport+0x2f4>)
 8002776:	4840      	ldr	r0, [pc, #256]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002778:	f005 f84c 	bl	8007814 <siprintf>
        SendUartLine(reportBuffer);
 800277c:	483e      	ldr	r0, [pc, #248]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800277e:	f7ff fe33 	bl	80023e8 <SendUartLine>
        
        // Calculate average distance
        float avgDistance = 0.0f;
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
        if (ultraData->validDistanceCount > 0) {
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <Report_GenerateAnalysisReport+0x210>
            avgDistance = ultraData->totalDistanceSum / (float)ultraData->validDistanceCount;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	edd3 6a08 	vldr	s13, [r3, #32]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a6:	edc7 7a04 	vstr	s15, [r7, #16]
            sprintf(reportBuffer, "Avg Distance: %.1f mm", avgDistance);
 80027aa:	6938      	ldr	r0, [r7, #16]
 80027ac:	f7fd fed4 	bl	8000558 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	493d      	ldr	r1, [pc, #244]	@ (80028ac <Report_GenerateAnalysisReport+0x2f8>)
 80027b6:	4830      	ldr	r0, [pc, #192]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80027b8:	f005 f82c 	bl	8007814 <siprintf>
            SendUartLine(reportBuffer);
 80027bc:	482e      	ldr	r0, [pc, #184]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80027be:	f7ff fe13 	bl	80023e8 <SendUartLine>
 80027c2:	e006      	b.n	80027d2 <Report_GenerateAnalysisReport+0x21e>
        } else {
            SendUartLine("Avg Distance: N/A (no valid readings)");
 80027c4:	483a      	ldr	r0, [pc, #232]	@ (80028b0 <Report_GenerateAnalysisReport+0x2fc>)
 80027c6:	f7ff fe0f 	bl	80023e8 <SendUartLine>
 80027ca:	e002      	b.n	80027d2 <Report_GenerateAnalysisReport+0x21e>
        }
    } else {
        SendUartLine("No valid ultrasonic data recorded");
 80027cc:	4839      	ldr	r0, [pc, #228]	@ (80028b4 <Report_GenerateAnalysisReport+0x300>)
 80027ce:	f7ff fe0b 	bl	80023e8 <SendUartLine>
    }
    
    sprintf(reportBuffer, "Direction Changes: %lu", ultraData->dirChangeCount);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	461a      	mov	r2, r3
 80027d8:	4937      	ldr	r1, [pc, #220]	@ (80028b8 <Report_GenerateAnalysisReport+0x304>)
 80027da:	4827      	ldr	r0, [pc, #156]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80027dc:	f005 f81a 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 80027e0:	4825      	ldr	r0, [pc, #148]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 80027e2:	f7ff fe01 	bl	80023e8 <SendUartLine>
    
    // Calculate time in ultrasonic range
    float validTimeSeconds = 0.0f;
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
    if (ultraData->validDistanceCount > 0) {
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d018      	beq.n	8002826 <Report_GenerateAnalysisReport+0x272>
        // Approximate time based on sampling rate (10Hz = 100ms per sample)
        validTimeSeconds = (float)ultraData->validDistanceCount * 0.1f;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002800:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80028bc <Report_GenerateAnalysisReport+0x308>
 8002804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002808:	edc7 7a03 	vstr	s15, [r7, #12]
        sprintf(reportBuffer, "Time in Range: %.1f s", validTimeSeconds);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7fd fea3 	bl	8000558 <__aeabi_f2d>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	492a      	ldr	r1, [pc, #168]	@ (80028c0 <Report_GenerateAnalysisReport+0x30c>)
 8002818:	4817      	ldr	r0, [pc, #92]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800281a:	f004 fffb 	bl	8007814 <siprintf>
        SendUartLine(reportBuffer);
 800281e:	4816      	ldr	r0, [pc, #88]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002820:	f7ff fde2 	bl	80023e8 <SendUartLine>
 8002824:	e002      	b.n	800282c <Report_GenerateAnalysisReport+0x278>
    } else {
        SendUartLine("Time in Range: 0.0 s");
 8002826:	4827      	ldr	r0, [pc, #156]	@ (80028c4 <Report_GenerateAnalysisReport+0x310>)
 8002828:	f7ff fdde 	bl	80023e8 <SendUartLine>
    }
    
    // Combined statistics
    SendUartLine("\n--- COMBINED STATISTICS ---");
 800282c:	4826      	ldr	r0, [pc, #152]	@ (80028c8 <Report_GenerateAnalysisReport+0x314>)
 800282e:	f7ff fddb 	bl	80023e8 <SendUartLine>
    
    sprintf(reportBuffer, "Dir Changes when Signal>50%%: %lu", ultraData->dirChangeWhenHighSignalCount);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	461a      	mov	r2, r3
 8002838:	4924      	ldr	r1, [pc, #144]	@ (80028cc <Report_GenerateAnalysisReport+0x318>)
 800283a:	480f      	ldr	r0, [pc, #60]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 800283c:	f004 ffea 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 8002840:	480d      	ldr	r0, [pc, #52]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002842:	f7ff fdd1 	bl	80023e8 <SendUartLine>
    
    sprintf(reportBuffer, "Peaks when Distance<100mm: %lu", potData->peaksWhenCloseCount);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	461a      	mov	r2, r3
 800284c:	4920      	ldr	r1, [pc, #128]	@ (80028d0 <Report_GenerateAnalysisReport+0x31c>)
 800284e:	480a      	ldr	r0, [pc, #40]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002850:	f004 ffe0 	bl	8007814 <siprintf>
    SendUartLine(reportBuffer);
 8002854:	4808      	ldr	r0, [pc, #32]	@ (8002878 <Report_GenerateAnalysisReport+0x2c4>)
 8002856:	f7ff fdc7 	bl	80023e8 <SendUartLine>
    
    // Report footer
    SendUartLine("---------------------------------------------------");
 800285a:	4803      	ldr	r0, [pc, #12]	@ (8002868 <Report_GenerateAnalysisReport+0x2b4>)
 800285c:	f7ff fdc4 	bl	80023e8 <SendUartLine>
}
 8002860:	bf00      	nop
 8002862:	3728      	adds	r7, #40	@ 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08009c04 	.word	0x08009c04
 800286c:	08009c38 	.word	0x08009c38
 8002870:	447a0000 	.word	0x447a0000
 8002874:	08009c6c 	.word	0x08009c6c
 8002878:	2000041c 	.word	0x2000041c
 800287c:	08009c80 	.word	0x08009c80
 8002880:	08009c9c 	.word	0x08009c9c
 8002884:	08009cb0 	.word	0x08009cb0
 8002888:	08009cc4 	.word	0x08009cc4
 800288c:	08009cd4 	.word	0x08009cd4
 8002890:	08009cec 	.word	0x08009cec
 8002894:	08009d14 	.word	0x08009d14
 8002898:	08009d28 	.word	0x08009d28
 800289c:	08009d3c 	.word	0x08009d3c
 80028a0:	08009d58 	.word	0x08009d58
 80028a4:	08009d74 	.word	0x08009d74
 80028a8:	08009d8c 	.word	0x08009d8c
 80028ac:	08009da4 	.word	0x08009da4
 80028b0:	08009dbc 	.word	0x08009dbc
 80028b4:	08009de4 	.word	0x08009de4
 80028b8:	08009e08 	.word	0x08009e08
 80028bc:	3dcccccd 	.word	0x3dcccccd
 80028c0:	08009e20 	.word	0x08009e20
 80028c4:	08009e38 	.word	0x08009e38
 80028c8:	08009e50 	.word	0x08009e50
 80028cc:	08009e70 	.word	0x08009e70
 80028d0:	08009e94 	.word	0x08009e94

080028d4 <resutlsDisplay_PotentiometerWindow1>:
 * Display detailed statistics window 1 for potentiometer data
 * Shows recording duration, min/max voltage, and peak count
 * 
 * @param data Pointer to the potentiometer recording data structure
 */
void resutlsDisplay_PotentiometerWindow1(PotRecordingData *data) {
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	6078      	str	r0, [r7, #4]
    char buffer[20];
    
    // Clear the LCD
    lcd_clear();
 80028dc:	f7fe fbc2 	bl	8001064 <lcd_clear>
    
    // First line: Recording duration
    lcd_send_string("Pot 1/4 ");
 80028e0:	483c      	ldr	r0, [pc, #240]	@ (80029d4 <resutlsDisplay_PotentiometerWindow1+0x100>)
 80028e2:	f7fe fc35 	bl	8001150 <lcd_send_string>
    
    // Format and display elapsed time in seconds
    if (data->elapsedTime >= 60000) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d91b      	bls.n	800292a <resutlsDisplay_PotentiometerWindow1+0x56>
        // Show minutes:seconds if recording is 1 minute or longer
        sprintf(buffer, "%lum%lus", data->elapsedTime / 60000, (data->elapsedTime % 60000) / 1000);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a38      	ldr	r2, [pc, #224]	@ (80029d8 <resutlsDisplay_PotentiometerWindow1+0x104>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	0b99      	lsrs	r1, r3, #14
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <resutlsDisplay_PotentiometerWindow1+0x104>)
 8002904:	fba3 0302 	umull	r0, r3, r3, r2
 8002908:	0b9b      	lsrs	r3, r3, #14
 800290a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800290e:	fb00 f303 	mul.w	r3, r0, r3
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4a31      	ldr	r2, [pc, #196]	@ (80029dc <resutlsDisplay_PotentiometerWindow1+0x108>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	f107 000c 	add.w	r0, r7, #12
 8002920:	460a      	mov	r2, r1
 8002922:	492f      	ldr	r1, [pc, #188]	@ (80029e0 <resutlsDisplay_PotentiometerWindow1+0x10c>)
 8002924:	f004 ff76 	bl	8007814 <siprintf>
 8002928:	e01a      	b.n	8002960 <resutlsDisplay_PotentiometerWindow1+0x8c>
    } else {
        // Show seconds.tenths for shorter recordings
        sprintf(buffer, "%lu.%lus", data->elapsedTime / 1000, (data->elapsedTime % 1000) / 100);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a2b      	ldr	r2, [pc, #172]	@ (80029dc <resutlsDisplay_PotentiometerWindow1+0x108>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	0999      	lsrs	r1, r3, #6
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4b28      	ldr	r3, [pc, #160]	@ (80029dc <resutlsDisplay_PotentiometerWindow1+0x108>)
 800293c:	fba3 0302 	umull	r0, r3, r3, r2
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <resutlsDisplay_PotentiometerWindow1+0x110>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f107 000c 	add.w	r0, r7, #12
 8002958:	460a      	mov	r2, r1
 800295a:	4923      	ldr	r1, [pc, #140]	@ (80029e8 <resutlsDisplay_PotentiometerWindow1+0x114>)
 800295c:	f004 ff5a 	bl	8007814 <siprintf>
    }
    lcd_send_string(buffer);
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fbf3 	bl	8001150 <lcd_send_string>
    
    // Second line: Min/Max voltage and peak count
    lcd_send_cmd(LCD_LINE2, 4);
 800296a:	2104      	movs	r1, #4
 800296c:	20c0      	movs	r0, #192	@ 0xc0
 800296e:	f7fe fb09 	bl	8000f84 <lcd_send_cmd>
    
    // Format and display min/max voltage
    sprintf(buffer, "%.2f-%.2fV", data->minVoltage, data->maxVoltage);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdee 	bl	8000558 <__aeabi_f2d>
 800297c:	4604      	mov	r4, r0
 800297e:	460d      	mov	r5, r1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fde7 	bl	8000558 <__aeabi_f2d>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	f107 000c 	add.w	r0, r7, #12
 8002992:	e9cd 2300 	strd	r2, r3, [sp]
 8002996:	4622      	mov	r2, r4
 8002998:	462b      	mov	r3, r5
 800299a:	4914      	ldr	r1, [pc, #80]	@ (80029ec <resutlsDisplay_PotentiometerWindow1+0x118>)
 800299c:	f004 ff3a 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fbd3 	bl	8001150 <lcd_send_string>
    
    // Display peak count
    lcd_send_string(" P:");
 80029aa:	4811      	ldr	r0, [pc, #68]	@ (80029f0 <resutlsDisplay_PotentiometerWindow1+0x11c>)
 80029ac:	f7fe fbd0 	bl	8001150 <lcd_send_string>
    sprintf(buffer, "%lu", data->peakCount);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	490e      	ldr	r1, [pc, #56]	@ (80029f4 <resutlsDisplay_PotentiometerWindow1+0x120>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f004 ff2a 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fbc3 	bl	8001150 <lcd_send_string>
}
 80029ca:	bf00      	nop
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08009eb4 	.word	0x08009eb4
 80029d8:	45e7b273 	.word	0x45e7b273
 80029dc:	10624dd3 	.word	0x10624dd3
 80029e0:	08009ec0 	.word	0x08009ec0
 80029e4:	51eb851f 	.word	0x51eb851f
 80029e8:	08009ecc 	.word	0x08009ecc
 80029ec:	08009ed8 	.word	0x08009ed8
 80029f0:	08009ee4 	.word	0x08009ee4
 80029f4:	08009ee8 	.word	0x08009ee8

080029f8 <resutlsDisplay_PotentiometerWindow2>:
 * Shows calculated frequency, time above 95%, time below 5%, 
 * and midpoint crossings
 * 
 * @param data Pointer to the potentiometer recording data structure
 */
void resutlsDisplay_PotentiometerWindow2(PotRecordingData *data) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    char buffer[20];
    float frequencyHz = 0.0f;
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Clear the LCD
    lcd_clear();
 8002a06:	f7fe fb2d 	bl	8001064 <lcd_clear>
    
    // First line: Window title and calculated frequency
    lcd_send_string("Pot 2/4 ");
 8002a0a:	4848      	ldr	r0, [pc, #288]	@ (8002b2c <resutlsDisplay_PotentiometerWindow2+0x134>)
 8002a0c:	f7fe fba0 	bl	8001150 <lcd_send_string>
    
    // Calculate and display frequency if we have peaks and reasonable recording time
    if (data->peakCount >= 2 && data->elapsedTime > 1000) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d923      	bls.n	8002a60 <resutlsDisplay_PotentiometerWindow2+0x68>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a20:	d91e      	bls.n	8002a60 <resutlsDisplay_PotentiometerWindow2+0x68>
        // Calculate frequency: peaks per second
        frequencyHz = (float)data->peakCount / ((float)data->elapsedTime / 1000.0f);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002b30 <resutlsDisplay_PotentiometerWindow2+0x138>
 8002a3e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        sprintf(buffer, "%.1fHz", frequencyHz);
 8002a4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a4c:	f7fd fd84 	bl	8000558 <__aeabi_f2d>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	f107 0008 	add.w	r0, r7, #8
 8002a58:	4936      	ldr	r1, [pc, #216]	@ (8002b34 <resutlsDisplay_PotentiometerWindow2+0x13c>)
 8002a5a:	f004 fedb 	bl	8007814 <siprintf>
 8002a5e:	e005      	b.n	8002a6c <resutlsDisplay_PotentiometerWindow2+0x74>
    } else {
        sprintf(buffer, "---Hz");
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4934      	ldr	r1, [pc, #208]	@ (8002b38 <resutlsDisplay_PotentiometerWindow2+0x140>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fed4 	bl	8007814 <siprintf>
    }
    lcd_send_string(buffer);
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fb6d 	bl	8001150 <lcd_send_string>
    
    // Second line: Time above 95%, below 5%, and midpoint crossings
    lcd_send_cmd(LCD_LINE2, 4);
 8002a76:	2104      	movs	r1, #4
 8002a78:	20c0      	movs	r0, #192	@ 0xc0
 8002a7a:	f7fe fa83 	bl	8000f84 <lcd_send_cmd>
    
    // Calculate percentage of time above high threshold (95%)
    float percentAbove = (float)data->timeAbove95Pct * 100.0f / (float)data->elapsedTime;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002b3c <resutlsDisplay_PotentiometerWindow2+0x144>
 8002a8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa2:	edc7 7a08 	vstr	s15, [r7, #32]
    sprintf(buffer, "H:%.0f%%", percentAbove);
 8002aa6:	6a38      	ldr	r0, [r7, #32]
 8002aa8:	f7fd fd56 	bl	8000558 <__aeabi_f2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	f107 0008 	add.w	r0, r7, #8
 8002ab4:	4922      	ldr	r1, [pc, #136]	@ (8002b40 <resutlsDisplay_PotentiometerWindow2+0x148>)
 8002ab6:	f004 fead 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fb46 	bl	8001150 <lcd_send_string>
    
    // Calculate percentage of time below low threshold (5%)
    float percentBelow = (float)data->timeBelow5Pct * 100.0f / (float)data->elapsedTime;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002b3c <resutlsDisplay_PotentiometerWindow2+0x144>
 8002ad4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae8:	edc7 7a07 	vstr	s15, [r7, #28]
    sprintf(buffer, " L:%.0f%%", percentBelow);
 8002aec:	69f8      	ldr	r0, [r7, #28]
 8002aee:	f7fd fd33 	bl	8000558 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	f107 0008 	add.w	r0, r7, #8
 8002afa:	4912      	ldr	r1, [pc, #72]	@ (8002b44 <resutlsDisplay_PotentiometerWindow2+0x14c>)
 8002afc:	f004 fe8a 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fb23 	bl	8001150 <lcd_send_string>
    
    // Display midpoint crossing count
    sprintf(buffer, " X:%lu", data->crossings50Pct);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0e:	f107 0308 	add.w	r3, r7, #8
 8002b12:	490d      	ldr	r1, [pc, #52]	@ (8002b48 <resutlsDisplay_PotentiometerWindow2+0x150>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 fe7d 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fb16 	bl	8001150 <lcd_send_string>
}
 8002b24:	bf00      	nop
 8002b26:	3728      	adds	r7, #40	@ 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08009eec 	.word	0x08009eec
 8002b30:	447a0000 	.word	0x447a0000
 8002b34:	08009ef8 	.word	0x08009ef8
 8002b38:	08009f00 	.word	0x08009f00
 8002b3c:	42c80000 	.word	0x42c80000
 8002b40:	08009f08 	.word	0x08009f08
 8002b44:	08009f14 	.word	0x08009f14
 8002b48:	08009f20 	.word	0x08009f20

08002b4c <resutlsDisplay_UltrasonicWindow>:
 * Display detailed statistics window for ultrasonic data
 * Shows time in range, min/max/avg distance
 * 
 * @param data Pointer to the ultrasonic recording data structure
 */
void resutlsDisplay_UltrasonicWindow(UltraRecordingData *data) {
 8002b4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b50:	b08c      	sub	sp, #48	@ 0x30
 8002b52:	af04      	add	r7, sp, #16
 8002b54:	6078      	str	r0, [r7, #4]
    char buffer[20];
    
    // Clear the LCD
    lcd_clear();
 8002b56:	f7fe fa85 	bl	8001064 <lcd_clear>
    
    // First line: Window title and min/max distance
    lcd_send_string("Ultra 3/4");
 8002b5a:	4828      	ldr	r0, [pc, #160]	@ (8002bfc <resutlsDisplay_UltrasonicWindow+0xb0>)
 8002b5c:	f7fe faf8 	bl	8001150 <lcd_send_string>
    
    // Second line: Min, max, and average distance
    lcd_send_cmd(LCD_LINE2, 4);
 8002b60:	2104      	movs	r1, #4
 8002b62:	20c0      	movs	r0, #192	@ 0xc0
 8002b64:	f7fe fa0e 	bl	8000f84 <lcd_send_cmd>
    
    // Check if we have valid data
    if (data->validDistanceCount > 0 && data->minDistance <= data->maxDistance) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03b      	beq.n	8002be8 <resutlsDisplay_UltrasonicWindow+0x9c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	d830      	bhi.n	8002be8 <resutlsDisplay_UltrasonicWindow+0x9c>
        // Calculate average distance
        float avgDistance = data->totalDistanceSum / data->validDistanceCount;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        
        // Display min/max/avg distances in millimeters
        sprintf(buffer, "%.0f/%.0f/%.0f", data->minDistance, avgDistance, data->maxDistance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fcd7 	bl	8000558 <__aeabi_f2d>
 8002baa:	4680      	mov	r8, r0
 8002bac:	4689      	mov	r9, r1
 8002bae:	69f8      	ldr	r0, [r7, #28]
 8002bb0:	f7fd fcd2 	bl	8000558 <__aeabi_f2d>
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	460d      	mov	r5, r1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fccb 	bl	8000558 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	f107 0008 	add.w	r0, r7, #8
 8002bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bce:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	490a      	ldr	r1, [pc, #40]	@ (8002c00 <resutlsDisplay_UltrasonicWindow+0xb4>)
 8002bd8:	f004 fe1c 	bl	8007814 <siprintf>
        lcd_send_string(buffer);
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fab5 	bl	8001150 <lcd_send_string>
    if (data->validDistanceCount > 0 && data->minDistance <= data->maxDistance) {
 8002be6:	e003      	b.n	8002bf0 <resutlsDisplay_UltrasonicWindow+0xa4>
    } else {
        lcd_send_string("No valid data");
 8002be8:	4806      	ldr	r0, [pc, #24]	@ (8002c04 <resutlsDisplay_UltrasonicWindow+0xb8>)
 8002bea:	f7fe fab1 	bl	8001150 <lcd_send_string>
    }
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08009f28 	.word	0x08009f28
 8002c00:	08009f34 	.word	0x08009f34
 8002c04:	08009f44 	.word	0x08009f44

08002c08 <resutlsDisplay_CombinedWindow>:
 * objects are close
 * 
 * @param potData Pointer to the potentiometer recording data structure
 * @param ultraData Pointer to the ultrasonic recording data structure
 */
void resutlsDisplay_CombinedWindow(PotRecordingData *potData, UltraRecordingData *ultraData) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    char buffer[20];
    
    // Clear the LCD
    lcd_clear();
 8002c12:	f7fe fa27 	bl	8001064 <lcd_clear>
    
    // First line: Window title and direction changes during high signal
    lcd_send_string("Comb 4/4 ");
 8002c16:	4812      	ldr	r0, [pc, #72]	@ (8002c60 <resutlsDisplay_CombinedWindow+0x58>)
 8002c18:	f7fe fa9a 	bl	8001150 <lcd_send_string>
    
    // Display direction changes that occurred during high signal
    sprintf(buffer, "DC:%lu", ultraData->dirChangeWhenHighSignalCount);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	490f      	ldr	r1, [pc, #60]	@ (8002c64 <resutlsDisplay_CombinedWindow+0x5c>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 fdf4 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fa8d 	bl	8001150 <lcd_send_string>
    
    // Second line: Peak count when object was close
    lcd_send_cmd(LCD_LINE2, 4);
 8002c36:	2104      	movs	r1, #4
 8002c38:	20c0      	movs	r0, #192	@ 0xc0
 8002c3a:	f7fe f9a3 	bl	8000f84 <lcd_send_cmd>
    
    // Display peaks that occurred when object was close
    sprintf(buffer, "PeaksClose:%lu", potData->peaksWhenCloseCount);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	4908      	ldr	r1, [pc, #32]	@ (8002c68 <resutlsDisplay_CombinedWindow+0x60>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f004 fde3 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fa7c 	bl	8001150 <lcd_send_string>
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08009f54 	.word	0x08009f54
 8002c64:	08009f60 	.word	0x08009f60
 8002c68:	08009f68 	.word	0x08009f68

08002c6c <resetStaticTrackers>:
// Variables for midpoint crossing detection
static float prev_voltage_for_crossing = 0;
static uint8_t was_above_mid = 0;

// Reset all static tracking variables - accessible from outside
void resetStaticTrackers() {
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    lastDirChangeCount = 0;
 8002c70:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <resetStaticTrackers+0x48>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    isHighSignal = 0;
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <resetStaticTrackers+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
    isCloseDistance = 0;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <resetStaticTrackers+0x50>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    sampleNumber = 0; // Reset sample counter
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <resetStaticTrackers+0x54>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
    current_sample_is_peak = 0;
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <resetStaticTrackers+0x58>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
    current_sample_is_dir_change = 0;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <resetStaticTrackers+0x5c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
    prev_voltage_for_crossing = 0; // Reset midpoint crossing detection
 8002c94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <resetStaticTrackers+0x60>)
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    was_above_mid = 0;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <resetStaticTrackers+0x64>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
    
    // Reset midpoint tracking in potentioRecording.c
    extern uint8_t was_above_midpoint;
    was_above_midpoint = 0;
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <resetStaticTrackers+0x68>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	200005c0 	.word	0x200005c0
 8002cb8:	200005b8 	.word	0x200005b8
 8002cbc:	200005b9 	.word	0x200005b9
 8002cc0:	200005ac 	.word	0x200005ac
 8002cc4:	200005c4 	.word	0x200005c4
 8002cc8:	200005c5 	.word	0x200005c5
 8002ccc:	200005c8 	.word	0x200005c8
 8002cd0:	200005cc 	.word	0x200005cc
 8002cd4:	20000385 	.word	0x20000385

08002cd8 <Signals_Init>:

// Initialize all signal handling
void Signals_Init(TIM_HandleTypeDef *htim_pot, TIM_HandleTypeDef *htim_ultra, ADC_HandleTypeDef *hadc) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
    // Store handlers
    potTimer = htim_pot;
 8002ce4:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <Signals_Init+0x54>)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6013      	str	r3, [r2, #0]
    ultraTimer = htim_ultra;
 8002cea:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <Signals_Init+0x58>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6013      	str	r3, [r2, #0]
    adc = hadc;
 8002cf0:	4a10      	ldr	r2, [pc, #64]	@ (8002d34 <Signals_Init+0x5c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6013      	str	r3, [r2, #0]

    // Initialize sensors
    Potentiometer_Init(adc);
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <Signals_Init+0x5c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f9ac 	bl	8002058 <Potentiometer_Init>
    Ultrasonic_Init(ultraTimer);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <Signals_Init+0x58>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fc3d 	bl	8003584 <Ultrasonic_Init>

    // Initialize recording functionality through the wrapper
    Recording_Init();
 8002d0a:	f7ff fa1b 	bl	8002144 <Recording_Init>

    // Start the potentiometer timer for consistent sampling
    HAL_TIM_Base_Start_IT(potTimer);
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <Signals_Init+0x54>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 f876 	bl	8005e04 <HAL_TIM_Base_Start_IT>

    LED_Init();
 8002d18:	f7fe fa32 	bl	8001180 <LED_Init>
    LED_SetProximityThreshold(800.0f); // 80cm default threshold
 8002d1c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002d38 <Signals_Init+0x60>
 8002d20:	f7fe fb2c 	bl	800137c <LED_SetProximityThreshold>
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000059c 	.word	0x2000059c
 8002d30:	200005a0 	.word	0x200005a0
 8002d34:	200005a4 	.word	0x200005a4
 8002d38:	44480000 	.word	0x44480000

08002d3c <debugPrintVoltageStats>:

// Add a function to periodically output voltage statistics
static void debugPrintVoltageStats() {
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
        }
        
        lastStatsTime = currentTime;
    }
    #endif
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <Signals_HandleTimerInterrupt>:

// Handle timer interrupts
void Signals_HandleTimerInterrupt(TIM_HandleTypeDef *htim) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b092      	sub	sp, #72	@ 0x48
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8002d54:	f000 ff80 	bl	8003c58 <HAL_GetTick>
 8002d58:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (htim->Instance == potTimer->Instance) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8002fd8 <Signals_HandleTimerInterrupt+0x28c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8133 	bne.w	8002fd0 <Signals_HandleTimerInterrupt+0x284>
        // This triggers at 1kHz
        potSampleCounter++;
 8002d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fdc <Signals_HandleTimerInterrupt+0x290>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b9a      	ldr	r3, [pc, #616]	@ (8002fdc <Signals_HandleTimerInterrupt+0x290>)
 8002d74:	701a      	strb	r2, [r3, #0]

        // We want 100Hz sampling rate (every 10 interrupts)
        if (potSampleCounter >= 10) {
 8002d76:	4b99      	ldr	r3, [pc, #612]	@ (8002fdc <Signals_HandleTimerInterrupt+0x290>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	f240 8128 	bls.w	8002fd0 <Signals_HandleTimerInterrupt+0x284>
            potSampleCounter = 0;
 8002d80:	4b96      	ldr	r3, [pc, #600]	@ (8002fdc <Signals_HandleTimerInterrupt+0x290>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
            float voltage = Potentiometer_GetVoltage();
 8002d86:	f7ff f99d 	bl	80020c4 <Potentiometer_GetVoltage>
 8002d8a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

            if (voltage >= 0.0f && voltage <= 3.3f) {
 8002d8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	db55      	blt.n	8002e48 <Signals_HandleTimerInterrupt+0xfc>
 8002d9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002da0:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8002fe0 <Signals_HandleTimerInterrupt+0x294>
 8002da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d84c      	bhi.n	8002e48 <Signals_HandleTimerInterrupt+0xfc>
                currentVoltage = voltage;
 8002dae:	4a8d      	ldr	r2, [pc, #564]	@ (8002fe4 <Signals_HandleTimerInterrupt+0x298>)
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	6013      	str	r3, [r2, #0]
                debugPrintVoltageStats(); // Enabled debug output
 8002db4:	f7ff ffc2 	bl	8002d3c <debugPrintVoltageStats>

                if (Signals_IsRecording()) {
 8002db8:	f000 f94d 	bl	8003056 <Signals_IsRecording>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d042      	beq.n	8002e48 <Signals_HandleTimerInterrupt+0xfc>
                    // Get the actual recording data
                    PotRecordingData* potData = Recording_GetPotData();
 8002dc2:	f7ff faed 	bl	80023a0 <Recording_GetPotData>
 8002dc6:	6278      	str	r0, [r7, #36]	@ 0x24
                    
                    // Update min/max before processing for accurate range calculations
                    if (voltage < potData->minVoltage) potData->minVoltage = voltage;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d502      	bpl.n	8002de2 <Signals_HandleTimerInterrupt+0x96>
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de0:	609a      	str	r2, [r3, #8]
                    if (voltage > potData->maxVoltage) potData->maxVoltage = voltage;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002de8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	dd02      	ble.n	8002dfc <Signals_HandleTimerInterrupt+0xb0>
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dfa:	60da      	str	r2, [r3, #12]

                    // Determine if signal is high based on FIXED threshold (1.65V)
                    isHighSignal = (voltage > FIXED_MIDPOINT_VOLTAGE) ? 1 : 0;
 8002dfc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e00:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8002fe8 <Signals_HandleTimerInterrupt+0x29c>
 8002e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0c:	bfcc      	ite	gt
 8002e0e:	2301      	movgt	r3, #1
 8002e10:	2300      	movle	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b75      	ldr	r3, [pc, #468]	@ (8002fec <Signals_HandleTimerInterrupt+0x2a0>)
 8002e18:	701a      	strb	r2, [r3, #0]
                    
                    // Store previous peak count to detect if PotRecording_Process finds a new one
                    uint32_t prevPeakCount = potData->peakCount;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	623b      	str	r3, [r7, #32]
                    
                    // Process the reading through the recording module
                    Recording_ProcessPotReading(voltage, currentDistance);
 8002e20:	4b73      	ldr	r3, [pc, #460]	@ (8002ff0 <Signals_HandleTimerInterrupt+0x2a4>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eef0 0a67 	vmov.f32	s1, s15
 8002e2a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002e2e:	f7ff f9b9 	bl	80021a4 <Recording_ProcessPotReading>
                    
                    // Track if a peak was detected in this sample
                    current_sample_is_peak = (potData->peakCount > prevPeakCount) ? 1 : 0;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	bf34      	ite	cc
 8002e3c:	2301      	movcc	r3, #1
 8002e3e:	2300      	movcs	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff4 <Signals_HandleTimerInterrupt+0x2a8>)
 8002e46:	701a      	strb	r2, [r3, #0]
                }
            }

            // Check if it's time to sample ultrasonic AND log data
            if (currentTime - lastUltrasonicSampleTime >= ULTRASONIC_SAMPLE_INTERVAL) {
 8002e48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff8 <Signals_HandleTimerInterrupt+0x2ac>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2264      	movs	r2, #100	@ 0x64
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f0c0 80bc 	bcc.w	8002fd0 <Signals_HandleTimerInterrupt+0x284>
                lastUltrasonicSampleTime = currentTime;
 8002e58:	4a67      	ldr	r2, [pc, #412]	@ (8002ff8 <Signals_HandleTimerInterrupt+0x2ac>)
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	6013      	str	r3, [r2, #0]

                if (Signals_IsRecording()) {
 8002e5e:	f000 f8fa 	bl	8003056 <Signals_IsRecording>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80b3 	beq.w	8002fd0 <Signals_HandleTimerInterrupt+0x284>
                    float distance_mm = Ultrasonic_GetDistance();
 8002e6a:	f000 fc43 	bl	80036f4 <Ultrasonic_GetDistance>
 8002e6e:	ed87 0a07 	vstr	s0, [r7, #28]
                    
                    if (distance_mm >= 0) {
 8002e72:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	db11      	blt.n	8002ea4 <Signals_HandleTimerInterrupt+0x158>
                        currentDistance = distance_mm;
 8002e80:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff0 <Signals_HandleTimerInterrupt+0x2a4>)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	6013      	str	r3, [r2, #0]
                        isCloseDistance = (distance_mm < CLOSE_DISTANCE_THRESHOLD) ? 1 : 0;
 8002e86:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8002ffc <Signals_HandleTimerInterrupt+0x2b0>
 8002e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e96:	bf4c      	ite	mi
 8002e98:	2301      	movmi	r3, #1
 8002e9a:	2300      	movpl	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b57      	ldr	r3, [pc, #348]	@ (8003000 <Signals_HandleTimerInterrupt+0x2b4>)
 8002ea2:	701a      	strb	r2, [r3, #0]
                    }
                    
                    // Get the actual recording data
                    UltraRecordingData* ultraData = Recording_GetUltraData();
 8002ea4:	f7ff fa86 	bl	80023b4 <Recording_GetUltraData>
 8002ea8:	61b8      	str	r0, [r7, #24]
                    PotRecordingData* potData = Recording_GetPotData();
 8002eaa:	f7ff fa79 	bl	80023a0 <Recording_GetPotData>
 8002eae:	6178      	str	r0, [r7, #20]
                    
                    // Store previous direction change count
                    uint32_t prevDirChangeCount = ultraData->dirChangeCount;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	613b      	str	r3, [r7, #16]
                    
                    // Process the reading through the recording module
                    Recording_ProcessUltraReading(distance_mm, isHighSignal);
 8002eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8002fec <Signals_HandleTimerInterrupt+0x2a0>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	ed97 0a07 	vldr	s0, [r7, #28]
 8002ec0:	f7ff f982 	bl	80021c8 <Recording_ProcessUltraReading>
                    
                    // Track if a direction change was detected in this sample
                    current_sample_is_dir_change = (ultraData->dirChangeCount > prevDirChangeCount) ? 1 : 0;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	bf34      	ite	cc
 8002ece:	2301      	movcc	r3, #1
 8002ed0:	2300      	movcs	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8003004 <Signals_HandleTimerInterrupt+0x2b8>)
 8002ed8:	701a      	strb	r2, [r3, #0]
                    
                    // Combined cross-sensor statistics update
                    if (isCloseDistance && current_sample_is_peak) {
 8002eda:	4b49      	ldr	r3, [pc, #292]	@ (8003000 <Signals_HandleTimerInterrupt+0x2b4>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <Signals_HandleTimerInterrupt+0x1b0>
 8002ee2:	4b44      	ldr	r3, [pc, #272]	@ (8002ff4 <Signals_HandleTimerInterrupt+0x2a8>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <Signals_HandleTimerInterrupt+0x1b0>
                        potData->peaksWhenCloseCount++; 
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38
                        potData->peakCountWhenClose = potData->peaksWhenCloseCount; // Keep alias in sync
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	649a      	str	r2, [r3, #72]	@ 0x48
                    }
                    
                    // Log data at ultrasonic rate (10Hz) with clean timestamps
                    if (Signals_IsRecording()) {
 8002efc:	f000 f8ab 	bl	8003056 <Signals_IsRecording>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d064      	beq.n	8002fd0 <Signals_HandleTimerInterrupt+0x284>
                        // Generate cleaner timestamps that match the assignment example (0, 10, 20, 30...)
                        // Incrementing by 10 for each ultrasonic sample (every ~100ms)
                        uint32_t clean_timestamp = sampleNumber * 10; 
 8002f06:	4b40      	ldr	r3, [pc, #256]	@ (8003008 <Signals_HandleTimerInterrupt+0x2bc>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
                        
                        // Cap the distance at 2000mm (2 meters) for logging
                        float capped_distance = currentDistance;
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <Signals_HandleTimerInterrupt+0x2a4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
                        if (capped_distance > 2000.0f) {
 8002f1a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002f1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800300c <Signals_HandleTimerInterrupt+0x2c0>
 8002f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2a:	dd01      	ble.n	8002f30 <Signals_HandleTimerInterrupt+0x1e4>
                            capped_distance = 2000.0f;
 8002f2c:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <Signals_HandleTimerInterrupt+0x2c4>)
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
                        }
                        
                        // Check if we're above or below the fixed midpoint
                        uint8_t now_above_mid = (currentVoltage > FIXED_MIDPOINT_VOLTAGE) ? 1 : 0;
 8002f30:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe4 <Signals_HandleTimerInterrupt+0x298>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002fe8 <Signals_HandleTimerInterrupt+0x29c>
 8002f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f42:	bfcc      	ite	gt
 8002f44:	2301      	movgt	r3, #1
 8002f46:	2300      	movle	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	72fb      	strb	r3, [r7, #11]
                        
                        // Detect if we've crossed the midpoint since last sample
                        uint8_t mid_crossing = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                        if (prev_voltage_for_crossing != 0 && was_above_mid != now_above_mid) {
 8002f52:	4b30      	ldr	r3, [pc, #192]	@ (8003014 <Signals_HandleTimerInterrupt+0x2c8>)
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	d007      	beq.n	8002f72 <Signals_HandleTimerInterrupt+0x226>
 8002f62:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <Signals_HandleTimerInterrupt+0x2cc>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	7afa      	ldrb	r2, [r7, #11]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d002      	beq.n	8002f72 <Signals_HandleTimerInterrupt+0x226>
                            mid_crossing = 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                        }
                        
                        // Update tracking variables
                        prev_voltage_for_crossing = currentVoltage;
 8002f72:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe4 <Signals_HandleTimerInterrupt+0x298>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <Signals_HandleTimerInterrupt+0x2c8>)
 8002f78:	6013      	str	r3, [r2, #0]
                        was_above_mid = now_above_mid;
 8002f7a:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <Signals_HandleTimerInterrupt+0x2cc>)
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	7013      	strb	r3, [r2, #0]
                        
                        // Live data logging with enhanced information
                        Report_LogLiveDataLine(
 8002f80:	4b18      	ldr	r3, [pc, #96]	@ (8002fe4 <Signals_HandleTimerInterrupt+0x298>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <Signals_HandleTimerInterrupt+0x2a8>)
 8002f88:	7819      	ldrb	r1, [r3, #0]
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <Signals_HandleTimerInterrupt+0x2b8>)
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f9a:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <Signals_HandleTimerInterrupt+0x2a0>)
 8002f9c:	7818      	ldrb	r0, [r3, #0]
 8002f9e:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <Signals_HandleTimerInterrupt+0x2b4>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	9302      	str	r3, [sp, #8]
 8002fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4603      	mov	r3, r0
 8002fb0:	eef0 1a66 	vmov.f32	s3, s13
 8002fb4:	eeb0 1a47 	vmov.f32	s2, s14
 8002fb8:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8002fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff fa37 	bl	8002434 <Report_LogLiveDataLine>
                            0,                        // Is low signal (unused parameter - calculated in function)
                            mid_crossing,             // Midpoint crossing detected
                            isCloseDistance           // Object is close (<100mm)
                        );
                        
                        sampleNumber++; // Increment for next sample
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <Signals_HandleTimerInterrupt+0x2bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8003008 <Signals_HandleTimerInterrupt+0x2bc>)
 8002fce:	6013      	str	r3, [r2, #0]
                    }
                }
            }
        }
    }
}
 8002fd0:	bf00      	nop
 8002fd2:	3738      	adds	r7, #56	@ 0x38
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	2000059c 	.word	0x2000059c
 8002fdc:	200005a8 	.word	0x200005a8
 8002fe0:	40533333 	.word	0x40533333
 8002fe4:	200005b0 	.word	0x200005b0
 8002fe8:	3fd33333 	.word	0x3fd33333
 8002fec:	200005b8 	.word	0x200005b8
 8002ff0:	200005b4 	.word	0x200005b4
 8002ff4:	200005c4 	.word	0x200005c4
 8002ff8:	200005bc 	.word	0x200005bc
 8002ffc:	42c80000 	.word	0x42c80000
 8003000:	200005b9 	.word	0x200005b9
 8003004:	200005c5 	.word	0x200005c5
 8003008:	200005ac 	.word	0x200005ac
 800300c:	44fa0000 	.word	0x44fa0000
 8003010:	44fa0000 	.word	0x44fa0000
 8003014:	200005c8 	.word	0x200005c8
 8003018:	200005cc 	.word	0x200005cc

0800301c <Signals_StartRecording>:

// Start recording on both sensors
void Signals_StartRecording(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    resetStaticTrackers();
 8003020:	f7ff fe24 	bl	8002c6c <resetStaticTrackers>
    Recording_Start();
 8003024:	f7ff f8a2 	bl	800216c <Recording_Start>
    lastUltrasonicSampleTime = HAL_GetTick(); 
 8003028:	f000 fe16 	bl	8003c58 <HAL_GetTick>
 800302c:	4603      	mov	r3, r0
 800302e:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <Signals_StartRecording+0x24>)
 8003030:	6013      	str	r3, [r2, #0]
    LED_SetMode(LED_OFF);
 8003032:	2000      	movs	r0, #0
 8003034:	f7fe f8ba 	bl	80011ac <LED_SetMode>
    
    // Write the CSV header for live data logging via UART
    Report_WriteLiveDataHeader();
 8003038:	f7ff fa9e 	bl	8002578 <Report_WriteLiveDataHeader>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200005bc 	.word	0x200005bc

08003044 <Signals_StopRecording>:

// Stop recording on both sensors
void Signals_StopRecording(void) {
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
    Recording_Stop();
 8003048:	f7ff f89e 	bl	8002188 <Recording_Stop>
    LED_SetMode(LED_OFF);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe f8ad 	bl	80011ac <LED_SetMode>
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}

08003056 <Signals_IsRecording>:

// Check if recording
uint8_t Signals_IsRecording(void) {
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
    PotRecordingData* potData = Recording_GetPotData();
 800305c:	f7ff f9a0 	bl	80023a0 <Recording_GetPotData>
 8003060:	6078      	str	r0, [r7, #4]
    return potData->isRecording;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7d1b      	ldrb	r3, [r3, #20]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <Signals_DisplayPotView>:

// Display potentiometer view on LCD
void Signals_DisplayPotView(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
    static uint32_t lastDisplayTime = 0;
    uint32_t currentTime = HAL_GetTick();
 8003076:	f000 fdef 	bl	8003c58 <HAL_GetTick>
 800307a:	6078      	str	r0, [r7, #4]
    
    // Update display at most every 200ms to avoid flickering
    if (currentTime - lastDisplayTime < 200) {
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <Signals_DisplayPotView+0x3c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2bc7      	cmp	r3, #199	@ 0xc7
 8003086:	d90a      	bls.n	800309e <Signals_DisplayPotView+0x2e>
        return;
    }
    lastDisplayTime = currentTime;
 8003088:	4a08      	ldr	r2, [pc, #32]	@ (80030ac <Signals_DisplayPotView+0x3c>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
    
    // If showing detailed stats, don't override it
    if (Recording_IsShowingDetailedStats()) {
 800308e:	f7ff f977 	bl	8002380 <Recording_IsShowingDetailedStats>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <Signals_DisplayPotView+0x32>
        return;
    }
    
    // Update the display with current information
    Recording_UpdateDisplay();
 8003098:	f7ff f92c 	bl	80022f4 <Recording_UpdateDisplay>
 800309c:	e002      	b.n	80030a4 <Signals_DisplayPotView+0x34>
        return;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <Signals_DisplayPotView+0x34>
        return;
 80030a2:	bf00      	nop
}
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200005d0 	.word	0x200005d0

080030b0 <Signals_DisplayUltraView>:

// Display ultrasonic view on LCD
void Signals_DisplayUltraView(void) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
    static uint32_t lastDisplayTime = 0;
    uint32_t currentTime = HAL_GetTick();
 80030b6:	f000 fdcf 	bl	8003c58 <HAL_GetTick>
 80030ba:	6078      	str	r0, [r7, #4]
    
    // Update display at most every 200ms to avoid flickering
    if (currentTime - lastDisplayTime < 200) {
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <Signals_DisplayUltraView+0x3c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80030c6:	d90a      	bls.n	80030de <Signals_DisplayUltraView+0x2e>
        return;
    }
    lastDisplayTime = currentTime;
 80030c8:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <Signals_DisplayUltraView+0x3c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
    
    // If showing detailed stats, don't override it
    if (Recording_IsShowingDetailedStats()) {
 80030ce:	f7ff f957 	bl	8002380 <Recording_IsShowingDetailedStats>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <Signals_DisplayUltraView+0x32>
        return;
    }
    
    // Update the display with current information
    Recording_UpdateDisplay();
 80030d8:	f7ff f90c 	bl	80022f4 <Recording_UpdateDisplay>
 80030dc:	e002      	b.n	80030e4 <Signals_DisplayUltraView+0x34>
        return;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <Signals_DisplayUltraView+0x34>
        return;
 80030e2:	bf00      	nop
}
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200005d4 	.word	0x200005d4

080030f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_MspInit+0x4c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_MspInit+0x4c>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <HAL_MspInit+0x4c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_MspInit+0x4c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	4a08      	ldr	r2, [pc, #32]	@ (800313c <HAL_MspInit+0x4c>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	@ 0x40
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_MspInit+0x4c>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800312e:	2007      	movs	r0, #7
 8003130:	f001 fa90 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800

08003140 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <HAL_ADC_MspInit+0x7c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d127      	bne.n	80031b2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <HAL_ADC_MspInit+0x80>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	4a15      	ldr	r2, [pc, #84]	@ (80031c0 <HAL_ADC_MspInit+0x80>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003170:	6453      	str	r3, [r2, #68]	@ 0x44
 8003172:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <HAL_ADC_MspInit+0x80>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <HAL_ADC_MspInit+0x80>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a0e      	ldr	r2, [pc, #56]	@ (80031c0 <HAL_ADC_MspInit+0x80>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <HAL_ADC_MspInit+0x80>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 800319a:	2301      	movs	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800319e:	2303      	movs	r3, #3
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	@ (80031c4 <HAL_ADC_MspInit+0x84>)
 80031ae:	f001 fa93 	bl	80046d8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031b2:	bf00      	nop
 80031b4:	3728      	adds	r7, #40	@ 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40012000 	.word	0x40012000
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020000 	.word	0x40020000

080031c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <HAL_I2C_MspInit+0x84>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d12b      	bne.n	8003242 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <HAL_I2C_MspInit+0x88>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <HAL_I2C_MspInit+0x88>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <HAL_I2C_MspInit+0x88>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003206:	23c0      	movs	r3, #192	@ 0xc0
 8003208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800320a:	2312      	movs	r3, #18
 800320c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003212:	2303      	movs	r3, #3
 8003214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003216:	2304      	movs	r3, #4
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	4619      	mov	r1, r3
 8003220:	480c      	ldr	r0, [pc, #48]	@ (8003254 <HAL_I2C_MspInit+0x8c>)
 8003222:	f001 fa59 	bl	80046d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_I2C_MspInit+0x88>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	4a08      	ldr	r2, [pc, #32]	@ (8003250 <HAL_I2C_MspInit+0x88>)
 8003230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003234:	6413      	str	r3, [r2, #64]	@ 0x40
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_I2C_MspInit+0x88>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003242:	bf00      	nop
 8003244:	3728      	adds	r7, #40	@ 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40005400 	.word	0x40005400
 8003250:	40023800 	.word	0x40023800
 8003254:	40020400 	.word	0x40020400

08003258 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a18      	ldr	r2, [pc, #96]	@ (80032c8 <HAL_TIM_Base_MspInit+0x70>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <HAL_TIM_Base_MspInit+0x74>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <HAL_TIM_Base_MspInit+0x74>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6453      	str	r3, [r2, #68]	@ 0x44
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_TIM_Base_MspInit+0x74>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003286:	e01a      	b.n	80032be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d115      	bne.n	80032be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <HAL_TIM_Base_MspInit+0x74>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4a0c      	ldr	r2, [pc, #48]	@ (80032cc <HAL_TIM_Base_MspInit+0x74>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_TIM_Base_MspInit+0x74>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	201c      	movs	r0, #28
 80032b4:	f001 f9d9 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032b8:	201c      	movs	r0, #28
 80032ba:	f001 f9f2 	bl	80046a2 <HAL_NVIC_EnableIRQ>
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <HAL_UART_MspInit+0x84>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d12b      	bne.n	800334a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <HAL_UART_MspInit+0x88>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <HAL_UART_MspInit+0x88>)
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <HAL_UART_MspInit+0x88>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <HAL_UART_MspInit+0x88>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <HAL_UART_MspInit+0x88>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <HAL_UART_MspInit+0x88>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800332a:	230c      	movs	r3, #12
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800333a:	2307      	movs	r3, #7
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4805      	ldr	r0, [pc, #20]	@ (800335c <HAL_UART_MspInit+0x8c>)
 8003346:	f001 f9c7 	bl	80046d8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800334a:	bf00      	nop
 800334c:	3728      	adds	r7, #40	@ 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40004400 	.word	0x40004400
 8003358:	40023800 	.word	0x40023800
 800335c:	40020000 	.word	0x40020000

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <NMI_Handler+0x4>

08003368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <HardFault_Handler+0x4>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <MemManage_Handler+0x4>

08003378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <BusFault_Handler+0x4>

08003380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <UsageFault_Handler+0x4>

08003388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b6:	f000 fc3b 	bl	8003c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <TIM2_IRQHandler+0x10>)
 80033c6:	f002 fd7f 	bl	8005ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200002ec 	.word	0x200002ec

080033d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return 1;
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_kill>:

int _kill(int pid, int sig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033ee:	f004 fac9 	bl	8007984 <__errno>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2216      	movs	r2, #22
 80033f6:	601a      	str	r2, [r3, #0]
  return -1;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_exit>:

void _exit (int status)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffe7 	bl	80033e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003416:	bf00      	nop
 8003418:	e7fd      	b.n	8003416 <_exit+0x12>

0800341a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e00a      	b.n	8003442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800342c:	f3af 8000 	nop.w
 8003430:	4601      	mov	r1, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	60ba      	str	r2, [r7, #8]
 8003438:	b2ca      	uxtb	r2, r1
 800343a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3301      	adds	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	dbf0      	blt.n	800342c <_read+0x12>
  }

  return len;
 800344a:	687b      	ldr	r3, [r7, #4]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e009      	b.n	800347a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	60ba      	str	r2, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	dbf1      	blt.n	8003466 <_write+0x12>
  }
  return len;
 8003482:	687b      	ldr	r3, [r7, #4]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_close>:

int _close(int file)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b4:	605a      	str	r2, [r3, #4]
  return 0;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <_isatty>:

int _isatty(int file)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034cc:	2301      	movs	r3, #1
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <_sbrk+0x5c>)
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <_sbrk+0x60>)
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003508:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <_sbrk+0x64>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <_sbrk+0x64>)
 8003512:	4a12      	ldr	r2, [pc, #72]	@ (800355c <_sbrk+0x68>)
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d207      	bcs.n	8003534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003524:	f004 fa2e 	bl	8007984 <__errno>
 8003528:	4603      	mov	r3, r0
 800352a:	220c      	movs	r2, #12
 800352c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e009      	b.n	8003548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <_sbrk+0x64>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <_sbrk+0x64>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <_sbrk+0x64>)
 8003544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20020000 	.word	0x20020000
 8003554:	00000400 	.word	0x00000400
 8003558:	200005d8 	.word	0x200005d8
 800355c:	20000738 	.word	0x20000738

08003560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003564:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <SystemInit+0x20>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <SystemInit+0x20>)
 800356c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <Ultrasonic_Init>:

/* Global variable to store timer handle */
TIM_HandleTypeDef *ultrasonicTimer;
extern UART_HandleTypeDef huart2; // For debugging via UART

void Ultrasonic_Init(TIM_HandleTypeDef *htim) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    /* Store timer handle for later use */
    ultrasonicTimer = htim;
 800358c:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <Ultrasonic_Init+0x34>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]

    /* Start the timer */
    HAL_TIM_Base_Start(ultrasonicTimer);
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <Ultrasonic_Init+0x34>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f002 fbda 	bl	8005d50 <HAL_TIM_Base_Start>

    /* Initialize TRIG pin to low */
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035a2:	4806      	ldr	r0, [pc, #24]	@ (80035bc <Ultrasonic_Init+0x38>)
 80035a4:	f001 fa34 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_Delay(50);  /* Allow sensor to settle */
 80035a8:	2032      	movs	r0, #50	@ 0x32
 80035aa:	f000 fb61 	bl	8003c70 <HAL_Delay>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200005dc 	.word	0x200005dc
 80035bc:	40020000 	.word	0x40020000

080035c0 <Ultrasonic_Read>:

float Ultrasonic_Read(void) {
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
    uint32_t val1 = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
    uint32_t val2 = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
    uint32_t pMillis = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
    float distance = 0;
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	60bb      	str	r3, [r7, #8]

    /* 1. Send 10us pulse on TRIG pin */
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80035d8:	2201      	movs	r2, #1
 80035da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035de:	4842      	ldr	r0, [pc, #264]	@ (80036e8 <Ultrasonic_Read+0x128>)
 80035e0:	f001 fa16 	bl	8004a10 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(ultrasonicTimer, 0);
 80035e4:	4b41      	ldr	r3, [pc, #260]	@ (80036ec <Ultrasonic_Read+0x12c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(ultrasonicTimer) < 10); /* Wait for 10 us */
 80035ee:	bf00      	nop
 80035f0:	4b3e      	ldr	r3, [pc, #248]	@ (80036ec <Ultrasonic_Read+0x12c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d9f9      	bls.n	80035f0 <Ultrasonic_Read+0x30>
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003602:	4839      	ldr	r0, [pc, #228]	@ (80036e8 <Ultrasonic_Read+0x128>)
 8003604:	f001 fa04 	bl	8004a10 <HAL_GPIO_WritePin>

    /* 2. Wait for ECHO pin to go HIGH (start of echo pulse) */
    pMillis = HAL_GetTick();
 8003608:	f000 fb26 	bl	8003c58 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]
    while (!(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 > HAL_GetTick()) {
 800360e:	e008      	b.n	8003622 <Ultrasonic_Read+0x62>
        /* If ECHO never goes high within timeout, return error */
        if (HAL_GetTick() > pMillis + 10) {
 8003610:	f000 fb22 	bl	8003c58 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	330a      	adds	r3, #10
 800361a:	429a      	cmp	r2, r3
 800361c:	d901      	bls.n	8003622 <Ultrasonic_Read+0x62>
            return -1;  /* Error: Echo pin never went high */
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <Ultrasonic_Read+0x130>)
 8003620:	e054      	b.n	80036cc <Ultrasonic_Read+0x10c>
    while (!(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 > HAL_GetTick()) {
 8003622:	2110      	movs	r1, #16
 8003624:	4830      	ldr	r0, [pc, #192]	@ (80036e8 <Ultrasonic_Read+0x128>)
 8003626:	f001 f9db 	bl	80049e0 <HAL_GPIO_ReadPin>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <Ultrasonic_Read+0x80>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f103 040a 	add.w	r4, r3, #10
 8003636:	f000 fb0f 	bl	8003c58 <HAL_GetTick>
 800363a:	4603      	mov	r3, r0
 800363c:	429c      	cmp	r4, r3
 800363e:	d8e7      	bhi.n	8003610 <Ultrasonic_Read+0x50>
        }
    }

    /* 3. Measure the time for which ECHO stays HIGH */
    val1 = __HAL_TIM_GET_COUNTER(ultrasonicTimer);  /* Capture start time */
 8003640:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <Ultrasonic_Read+0x12c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	617b      	str	r3, [r7, #20]

    pMillis = HAL_GetTick();
 800364a:	f000 fb05 	bl	8003c58 <HAL_GetTick>
 800364e:	60f8      	str	r0, [r7, #12]
    while ((HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick()) {
 8003650:	e009      	b.n	8003666 <Ultrasonic_Read+0xa6>
        /* If ECHO stays high too long, return error */
        if (HAL_GetTick() > pMillis + 50) {
 8003652:	f000 fb01 	bl	8003c58 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3332      	adds	r3, #50	@ 0x32
 800365c:	429a      	cmp	r2, r3
 800365e:	d902      	bls.n	8003666 <Ultrasonic_Read+0xa6>
            return -2;  /* Error: Echo pulse too long */
 8003660:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003664:	e032      	b.n	80036cc <Ultrasonic_Read+0x10c>
    while ((HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick()) {
 8003666:	2110      	movs	r1, #16
 8003668:	481f      	ldr	r0, [pc, #124]	@ (80036e8 <Ultrasonic_Read+0x128>)
 800366a:	f001 f9b9 	bl	80049e0 <HAL_GPIO_ReadPin>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <Ultrasonic_Read+0xc4>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 800367a:	f000 faed 	bl	8003c58 <HAL_GetTick>
 800367e:	4603      	mov	r3, r0
 8003680:	429c      	cmp	r4, r3
 8003682:	d8e6      	bhi.n	8003652 <Ultrasonic_Read+0x92>
        }
    }

    val2 = __HAL_TIM_GET_COUNTER(ultrasonicTimer);  /* Capture end time */
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <Ultrasonic_Read+0x12c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	613b      	str	r3, [r7, #16]
    uint32_t pulse_width = val2 - val1;
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	607b      	str	r3, [r7, #4]

    /* 4. Calculate distance based on time difference */
    distance = pulse_width * 0.034/2;
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fc ff3c 	bl	8000514 <__aeabi_ui2d>
 800369c:	a310      	add	r3, pc, #64	@ (adr r3, 80036e0 <Ultrasonic_Read+0x120>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f7fc ffb1 	bl	8000608 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036b6:	f7fd f8d1 	bl	800085c <__aeabi_ddiv>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f7fd fa79 	bl	8000bb8 <__aeabi_d2f>
 80036c6:	4603      	mov	r3, r0
 80036c8:	60bb      	str	r3, [r7, #8]

    return distance;
 80036ca:	68bb      	ldr	r3, [r7, #8]
}
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb0 0a67 	vmov.f32	s0, s15
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	bf00      	nop
 80036dc:	f3af 8000 	nop.w
 80036e0:	b020c49c 	.word	0xb020c49c
 80036e4:	3fa16872 	.word	0x3fa16872
 80036e8:	40020000 	.word	0x40020000
 80036ec:	200005dc 	.word	0x200005dc
 80036f0:	bf800000 	.word	0xbf800000

080036f4 <Ultrasonic_GetDistance>:

float Ultrasonic_GetDistance(void) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
    static float filtered_cm = 0;
    float alpha = 0.3;  // Filter strength (0-1), lower = more filtering
 80036fa:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <Ultrasonic_GetDistance+0x8c>)
 80036fc:	60fb      	str	r3, [r7, #12]

    // Get new sample in cm
    float distance_cm = Ultrasonic_Read();
 80036fe:	f7ff ff5f 	bl	80035c0 <Ultrasonic_Read>
 8003702:	ed87 0a02 	vstr	s0, [r7, #8]

    // Return error codes immediately
    if (distance_cm < 0) {
 8003706:	edd7 7a02 	vldr	s15, [r7, #8]
 800370a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d501      	bpl.n	8003718 <Ultrasonic_GetDistance+0x24>
        return distance_cm;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	e02b      	b.n	8003770 <Ultrasonic_GetDistance+0x7c>
    }

    // Apply low-pass filter
    if (filtered_cm == 0) {
 8003718:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <Ultrasonic_GetDistance+0x90>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d103      	bne.n	8003730 <Ultrasonic_GetDistance+0x3c>
        filtered_cm = distance_cm;  // Initialize on first reading
 8003728:	4a16      	ldr	r2, [pc, #88]	@ (8003784 <Ultrasonic_GetDistance+0x90>)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e015      	b.n	800375c <Ultrasonic_GetDistance+0x68>
    } else {
        filtered_cm = alpha * distance_cm + (1 - alpha) * filtered_cm;
 8003730:	ed97 7a03 	vldr	s14, [r7, #12]
 8003734:	edd7 7a02 	vldr	s15, [r7, #8]
 8003738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003740:	edd7 7a03 	vldr	s15, [r7, #12]
 8003744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003748:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <Ultrasonic_GetDistance+0x90>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003756:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <Ultrasonic_GetDistance+0x90>)
 8003758:	edc3 7a00 	vstr	s15, [r3]
    }
    
    // Convert to mm for the final value
    float filtered_mm = filtered_cm * 10.0f;
 800375c:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <Ultrasonic_GetDistance+0x90>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376a:	edc7 7a01 	vstr	s15, [r7, #4]
    
    // Return filtered distance in mm
    return filtered_mm;
 800376e:	687b      	ldr	r3, [r7, #4]
}
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eeb0 0a67 	vmov.f32	s0, s15
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	3e99999a 	.word	0x3e99999a
 8003784:	200005e0 	.word	0x200005e0

08003788 <UltraRecording_Init>:

/**
 * Initialize ultrasonic recording data structure
 * Sets all values to their initial state for a new recording session
 */
void UltraRecording_Init(UltraRecordingData *data) {
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    data->startTime = 0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    data->elapsedTime = 0;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	605a      	str	r2, [r3, #4]
    data->minDistance = 5000.0f;  // Initialize to a high value so first reading becomes minimum
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <UltraRecording_Init+0x5c>)
 80037a0:	609a      	str	r2, [r3, #8]
    data->maxDistance = 0.0f;     // Initialize to a low value so first reading becomes maximum
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
    data->dirChangeCount = 0;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
    data->isRecording = 0;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	751a      	strb	r2, [r3, #20]
    data->lastDistance = 0.0f;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
    data->lastDirection = 0;      // 0 = no direction, 1 = increasing distance, -1 = decreasing distance
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    data->totalDistanceSum = 0.0f;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	621a      	str	r2, [r3, #32]
    data->validDistanceCount = 0;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24
    data->dirChangeWhenHighSignalCount = 0;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	459c4000 	.word	0x459c4000

080037e8 <UltraRecording_Start>:

/**
 * Start recording ultrasonic data
 * Resets all statistics and begins a new recording session
 */
void UltraRecording_Start(UltraRecordingData *data) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
    data->startTime = HAL_GetTick();
 80037f0:	f000 fa32 	bl	8003c58 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
    data->isRecording = 1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	751a      	strb	r2, [r3, #20]
    data->dirChangeCount = 0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
    data->minDistance = 5000.0f;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <UltraRecording_Start+0x58>)
 800380a:	609a      	str	r2, [r3, #8]
    data->maxDistance = 0.0f;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	60da      	str	r2, [r3, #12]
    data->lastDistance = 0.0f;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	619a      	str	r2, [r3, #24]
    data->lastDirection = 0;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	771a      	strb	r2, [r3, #28]
    data->totalDistanceSum = 0.0f;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
    data->validDistanceCount = 0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24
    data->dirChangeWhenHighSignalCount = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	459c4000 	.word	0x459c4000

08003844 <UltraRecording_Stop>:

/**
 * Stop recording ultrasonic data
 * Marks the recording as stopped but preserves all collected statistics
 */
void UltraRecording_Stop(UltraRecordingData *data) {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    data->isRecording = 0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	751a      	strb	r2, [r3, #20]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <UltraRecording_Process>:
 * Updates statistics, detects direction changes, and manages LED based on proximity
 * 
 * @param data Pointer to the ultrasonic recording data structure
 * @param distance Current distance reading in millimeters
 */
void UltraRecording_Process(UltraRecordingData *data, float distance) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	ed87 0a00 	vstr	s0, [r7]
    // Skip processing if recording is inactive or distance reading is invalid
    if (!data->isRecording || distance < 0) return;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7d1b      	ldrb	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80b8 	beq.w	80039e6 <UltraRecording_Process+0x186>
 8003876:	edd7 7a00 	vldr	s15, [r7]
 800387a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	f100 80b0 	bmi.w	80039e6 <UltraRecording_Process+0x186>
    
    // Update elapsed time
    data->elapsedTime = HAL_GetTick() - data->startTime;
 8003886:	f000 f9e7 	bl	8003c58 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1ad2      	subs	r2, r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	605a      	str	r2, [r3, #4]

    // Skip the first reading as we need at least two readings to detect direction changes
    if (data->lastDistance == 0.0f) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	edd3 7a06 	vldr	s15, [r3, #24]
 800389c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a4:	d103      	bne.n	80038ae <UltraRecording_Process+0x4e>
        data->lastDistance = distance;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	619a      	str	r2, [r3, #24]
        return;
 80038ac:	e09c      	b.n	80039e8 <UltraRecording_Process+0x188>
    }

    // Update statistics for valid distance readings only
    if (distance >= ULTRASONIC_MIN_RANGE_MM && distance <= ULTRASONIC_MAX_RANGE_MM) {
 80038ae:	edd7 7a00 	vldr	s15, [r7]
 80038b2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80038b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038be:	db31      	blt.n	8003924 <UltraRecording_Process+0xc4>
 80038c0:	edd7 7a00 	vldr	s15, [r7]
 80038c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80039f0 <UltraRecording_Process+0x190>
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d828      	bhi.n	8003924 <UltraRecording_Process+0xc4>
        data->totalDistanceSum += distance;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80038d8:	edd7 7a00 	vldr	s15, [r7]
 80038dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	edc3 7a08 	vstr	s15, [r3, #32]
        data->validDistanceCount++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	@ 0x24
        
        // Update min/max distance
        if (distance < data->minDistance) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80038f6:	ed97 7a00 	vldr	s14, [r7]
 80038fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	d502      	bpl.n	800390a <UltraRecording_Process+0xaa>
            data->minDistance = distance;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	609a      	str	r2, [r3, #8]
        }
        if (distance > data->maxDistance) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003910:	ed97 7a00 	vldr	s14, [r7]
 8003914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	dd02      	ble.n	8003924 <UltraRecording_Process+0xc4>
            data->maxDistance = distance;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	60da      	str	r2, [r3, #12]
        }
    }

    // Direction change detection logic
    int8_t currentDirection = 0;  // 0 = no significant change, 1 = increasing, -1 = decreasing
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
    float deadband = 10.0f;       // Deadband of 10mm to filter out noise and minor fluctuations
 8003928:	4b32      	ldr	r3, [pc, #200]	@ (80039f4 <UltraRecording_Process+0x194>)
 800392a:	60bb      	str	r3, [r7, #8]
    
    // Determine current direction of movement based on change since last reading
    if (distance > data->lastDistance + deadband) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003932:	edd7 7a02 	vldr	s15, [r7, #8]
 8003936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393a:	ed97 7a00 	vldr	s14, [r7]
 800393e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	dd02      	ble.n	800394e <UltraRecording_Process+0xee>
        // Object is moving away (distance increasing beyond deadband)
        currentDirection = 1;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e00f      	b.n	800396e <UltraRecording_Process+0x10e>
    } else if (distance < data->lastDistance - deadband) {
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	ed93 7a06 	vldr	s14, [r3, #24]
 8003954:	edd7 7a02 	vldr	s15, [r7, #8]
 8003958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395c:	ed97 7a00 	vldr	s14, [r7]
 8003960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	d501      	bpl.n	800396e <UltraRecording_Process+0x10e>
        // Object is moving closer (distance decreasing beyond deadband)
        currentDirection = -1;
 800396a:	23ff      	movs	r3, #255	@ 0xff
 800396c:	73fb      	strb	r3, [r7, #15]
    
    // Detect a direction change when:
    // 1. We have a previous direction (lastDirection != 0)
    // 2. Current reading shows significant movement (currentDirection != 0)
    // 3. Direction is different from last time (currentDirection != lastDirection)
    if (data->lastDirection != 0 && currentDirection != 0 && currentDirection != data->lastDirection) {
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00f      	beq.n	8003998 <UltraRecording_Process+0x138>
 8003978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <UltraRecording_Process+0x138>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8003986:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800398a:	429a      	cmp	r2, r3
 800398c:	d004      	beq.n	8003998 <UltraRecording_Process+0x138>
        data->dirChangeCount++;  // Increment direction change counter
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	611a      	str	r2, [r3, #16]
    }

    // Update last distance for next comparison
    data->lastDistance = distance;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	619a      	str	r2, [r3, #24]
    
    // Update lastDirection only if we have a significant movement
    // This prevents noise from affecting direction change detection
    if (currentDirection != 0) {
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <UltraRecording_Process+0x14c>
        data->lastDirection = currentDirection;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	771a      	strb	r2, [r3, #28]
    }

    // LED control based on proximity
    if (distance < LED_GetProximityThreshold()) {
 80039ac:	f7fd fcf6 	bl	800139c <LED_GetProximityThreshold>
 80039b0:	eeb0 7a40 	vmov.f32	s14, s0
 80039b4:	edd7 7a00 	vldr	s15, [r7]
 80039b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	d508      	bpl.n	80039d4 <UltraRecording_Process+0x174>
        // Object is within proximity threshold - blink LED if not already flashing for a peak
        if (LED_GetMode() != LED_PEAK_FLASH) {
 80039c2:	f7fd fcf9 	bl	80013b8 <LED_GetMode>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d00d      	beq.n	80039e8 <UltraRecording_Process+0x188>
            LED_SetMode(LED_PROXIMITY_BLINK);
 80039cc:	2003      	movs	r0, #3
 80039ce:	f7fd fbed 	bl	80011ac <LED_SetMode>
 80039d2:	e009      	b.n	80039e8 <UltraRecording_Process+0x188>
        }
    } else if (LED_GetMode() == LED_PROXIMITY_BLINK) {
 80039d4:	f7fd fcf0 	bl	80013b8 <LED_GetMode>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d104      	bne.n	80039e8 <UltraRecording_Process+0x188>
        // Object is outside proximity threshold - turn off LED if it was blinking for proximity
        LED_SetMode(LED_OFF);
 80039de:	2000      	movs	r0, #0
 80039e0:	f7fd fbe4 	bl	80011ac <LED_SetMode>
 80039e4:	e000      	b.n	80039e8 <UltraRecording_Process+0x188>
    if (!data->isRecording || distance < 0) return;
 80039e6:	bf00      	nop
    }
}
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	44fa0000 	.word	0x44fa0000
 80039f4:	41200000 	.word	0x41200000

080039f8 <UltraRecording_DisplayStats>:

/**
 * Display basic ultrasonic statistics on LCD
 * Shows recording time, direction changes count, and min/max distance
 */
void UltraRecording_DisplayStats(UltraRecordingData *data) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    char buffer[20];

    // Clear LCD
    lcd_clear();
 8003a00:	f7fd fb30 	bl	8001064 <lcd_clear>

    if (!data->isRecording) {
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7d1b      	ldrb	r3, [r3, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <UltraRecording_DisplayStats+0x2a>
        lcd_send_string("Press B1");
 8003a0c:	483e      	ldr	r0, [pc, #248]	@ (8003b08 <UltraRecording_DisplayStats+0x110>)
 8003a0e:	f7fd fb9f 	bl	8001150 <lcd_send_string>
        lcd_send_cmd(LCD_LINE2, 4);
 8003a12:	2104      	movs	r1, #4
 8003a14:	20c0      	movs	r0, #192	@ 0xc0
 8003a16:	f7fd fab5 	bl	8000f84 <lcd_send_cmd>
        lcd_send_string("to start");
 8003a1a:	483c      	ldr	r0, [pc, #240]	@ (8003b0c <UltraRecording_DisplayStats+0x114>)
 8003a1c:	f7fd fb98 	bl	8001150 <lcd_send_string>
 8003a20:	e06e      	b.n	8003b00 <UltraRecording_DisplayStats+0x108>
        return;
    }

    // First line: Time & Direction Changes
    lcd_send_cmd(LCD_LINE1, 4);  // Return to beginning of first line
 8003a22:	2104      	movs	r1, #4
 8003a24:	2080      	movs	r0, #128	@ 0x80
 8003a26:	f7fd faad 	bl	8000f84 <lcd_send_cmd>
    lcd_send_string("T:");
 8003a2a:	4839      	ldr	r0, [pc, #228]	@ (8003b10 <UltraRecording_DisplayStats+0x118>)
 8003a2c:	f7fd fb90 	bl	8001150 <lcd_send_string>
    sprintf(buffer, "%lu.%lus", data->elapsedTime / 1000, (data->elapsedTime % 1000) / 100);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a37      	ldr	r2, [pc, #220]	@ (8003b14 <UltraRecording_DisplayStats+0x11c>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0999      	lsrs	r1, r3, #6
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <UltraRecording_DisplayStats+0x11c>)
 8003a42:	fba3 0302 	umull	r0, r3, r3, r2
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a4c:	fb00 f303 	mul.w	r3, r0, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	4a31      	ldr	r2, [pc, #196]	@ (8003b18 <UltraRecording_DisplayStats+0x120>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	f107 000c 	add.w	r0, r7, #12
 8003a5e:	460a      	mov	r2, r1
 8003a60:	492e      	ldr	r1, [pc, #184]	@ (8003b1c <UltraRecording_DisplayStats+0x124>)
 8003a62:	f003 fed7 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fb70 	bl	8001150 <lcd_send_string>

    lcd_send_string(" C:");
 8003a70:	482b      	ldr	r0, [pc, #172]	@ (8003b20 <UltraRecording_DisplayStats+0x128>)
 8003a72:	f7fd fb6d 	bl	8001150 <lcd_send_string>
    sprintf(buffer, "%lu", data->dirChangeCount);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	4929      	ldr	r1, [pc, #164]	@ (8003b24 <UltraRecording_DisplayStats+0x12c>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fec7 	bl	8007814 <siprintf>
    lcd_send_string(buffer);
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd fb60 	bl	8001150 <lcd_send_string>

    // Second line: Min/Max distance in mm
    lcd_send_cmd(LCD_LINE2, 4);
 8003a90:	2104      	movs	r1, #4
 8003a92:	20c0      	movs	r0, #192	@ 0xc0
 8003a94:	f7fd fa76 	bl	8000f84 <lcd_send_cmd>

    // Check if we have valid data
    if (data->minDistance > data->maxDistance) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aac:	dd03      	ble.n	8003ab6 <UltraRecording_DisplayStats+0xbe>
        lcd_send_string("No valid data");
 8003aae:	481e      	ldr	r0, [pc, #120]	@ (8003b28 <UltraRecording_DisplayStats+0x130>)
 8003ab0:	f7fd fb4e 	bl	8001150 <lcd_send_string>
 8003ab4:	e024      	b.n	8003b00 <UltraRecording_DisplayStats+0x108>
    } else {
        sprintf(buffer, "%.0f", data->minDistance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fd4c 	bl	8000558 <__aeabi_f2d>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	f107 000c 	add.w	r0, r7, #12
 8003ac8:	4918      	ldr	r1, [pc, #96]	@ (8003b2c <UltraRecording_DisplayStats+0x134>)
 8003aca:	f003 fea3 	bl	8007814 <siprintf>
        lcd_send_string(buffer);
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fb3c 	bl	8001150 <lcd_send_string>
        lcd_send_string("-");
 8003ad8:	4815      	ldr	r0, [pc, #84]	@ (8003b30 <UltraRecording_DisplayStats+0x138>)
 8003ada:	f7fd fb39 	bl	8001150 <lcd_send_string>
        sprintf(buffer, "%.0fmm", data->maxDistance);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fd38 	bl	8000558 <__aeabi_f2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	f107 000c 	add.w	r0, r7, #12
 8003af0:	4910      	ldr	r1, [pc, #64]	@ (8003b34 <UltraRecording_DisplayStats+0x13c>)
 8003af2:	f003 fe8f 	bl	8007814 <siprintf>
        lcd_send_string(buffer);
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fb28 	bl	8001150 <lcd_send_string>
    }
}
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08009f78 	.word	0x08009f78
 8003b0c:	08009f84 	.word	0x08009f84
 8003b10:	08009f90 	.word	0x08009f90
 8003b14:	10624dd3 	.word	0x10624dd3
 8003b18:	51eb851f 	.word	0x51eb851f
 8003b1c:	08009f94 	.word	0x08009f94
 8003b20:	08009fa0 	.word	0x08009fa0
 8003b24:	08009fa4 	.word	0x08009fa4
 8003b28:	08009fa8 	.word	0x08009fa8
 8003b2c:	08009fb8 	.word	0x08009fb8
 8003b30:	08009fc0 	.word	0x08009fc0
 8003b34:	08009fc4 	.word	0x08009fc4

08003b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b3c:	f7ff fd10 	bl	8003560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b40:	480c      	ldr	r0, [pc, #48]	@ (8003b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b42:	490d      	ldr	r1, [pc, #52]	@ (8003b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b44:	4a0d      	ldr	r2, [pc, #52]	@ (8003b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b48:	e002      	b.n	8003b50 <LoopCopyDataInit>

08003b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4e:	3304      	adds	r3, #4

08003b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b54:	d3f9      	bcc.n	8003b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b56:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b58:	4c0a      	ldr	r4, [pc, #40]	@ (8003b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b5c:	e001      	b.n	8003b62 <LoopFillZerobss>

08003b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b60:	3204      	adds	r2, #4

08003b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b64:	d3fb      	bcc.n	8003b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b66:	f003 ff13 	bl	8007990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b6a:	f7fd fc89 	bl	8001480 <main>
  bx  lr    
 8003b6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b78:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003b7c:	0800a36c 	.word	0x0800a36c
  ldr r2, =_sbss
 8003b80:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003b84:	20000734 	.word	0x20000734

08003b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b88:	e7fe      	b.n	8003b88 <ADC_IRQHandler>
	...

08003b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b90:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <HAL_Init+0x40>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0d      	ldr	r2, [pc, #52]	@ (8003bcc <HAL_Init+0x40>)
 8003b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_Init+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bcc <HAL_Init+0x40>)
 8003ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <HAL_Init+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_Init+0x40>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f000 fd4d 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f000 f808 	bl	8003bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc0:	f7ff fa96 	bl	80030f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023c00 	.word	0x40023c00

08003bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_InitTick+0x54>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_InitTick+0x58>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fd65 	bl	80046be <HAL_SYSTICK_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00e      	b.n	8003c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b0f      	cmp	r3, #15
 8003c02:	d80a      	bhi.n	8003c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c04:	2200      	movs	r2, #0
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	f000 fd2d 	bl	800466a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c10:	4a06      	ldr	r2, [pc, #24]	@ (8003c2c <HAL_InitTick+0x5c>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000008 	.word	0x20000008
 8003c28:	20000010 	.word	0x20000010
 8003c2c:	2000000c 	.word	0x2000000c

08003c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_IncTick+0x20>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_IncTick+0x24>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a04      	ldr	r2, [pc, #16]	@ (8003c54 <HAL_IncTick+0x24>)
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000010 	.word	0x20000010
 8003c54:	200005e4 	.word	0x200005e4

08003c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	@ (8003c6c <HAL_GetTick+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	200005e4 	.word	0x200005e4

08003c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff ffee 	bl	8003c58 <HAL_GetTick>
 8003c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d005      	beq.n	8003c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_Delay+0x44>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c96:	bf00      	nop
 8003c98:	f7ff ffde 	bl	8003c58 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d8f7      	bhi.n	8003c98 <HAL_Delay+0x28>
  {
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000010 	.word	0x20000010

08003cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e033      	b.n	8003d36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fa32 	bl	8003140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003cfe:	f023 0302 	bic.w	r3, r3, #2
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fad6 	bl	80042bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d26:	e001      	b.n	8003d2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Start+0x1a>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e097      	b.n	8003e8a <HAL_ADC_Start+0x14a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d018      	beq.n	8003da2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d80:	4b45      	ldr	r3, [pc, #276]	@ (8003e98 <HAL_ADC_Start+0x158>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a45      	ldr	r2, [pc, #276]	@ (8003e9c <HAL_ADC_Start+0x15c>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9a      	lsrs	r2, r3, #18
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d94:	e002      	b.n	8003d9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f9      	bne.n	8003d96 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d15f      	bne.n	8003e70 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dee:	d106      	bne.n	8003dfe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	f023 0206 	bic.w	r2, r3, #6
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	@ 0x44
 8003dfc:	e002      	b.n	8003e04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ea0 <HAL_ADC_Start+0x160>)
 8003e0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e18:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d129      	bne.n	8003e88 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	e020      	b.n	8003e88 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <HAL_ADC_Start+0x164>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d11b      	bne.n	8003e88 <HAL_ADC_Start+0x148>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d114      	bne.n	8003e88 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	e00b      	b.n	8003e88 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000008 	.word	0x20000008
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	40012300 	.word	0x40012300
 8003ea4:	40012000 	.word	0x40012000

08003ea8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Stop+0x16>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e021      	b.n	8003f02 <HAL_ADC_Stop+0x5a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2a:	d113      	bne.n	8003f54 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f3a:	d10b      	bne.n	8003f54 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e063      	b.n	800401c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f54:	f7ff fe80 	bl	8003c58 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f5a:	e021      	b.n	8003fa0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d01d      	beq.n	8003fa0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_ADC_PollForConversion+0x6c>
 8003f6a:	f7ff fe75 	bl	8003c58 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d212      	bcs.n	8003fa0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d00b      	beq.n	8003fa0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	f043 0204 	orr.w	r2, r3, #4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e03d      	b.n	800401c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d1d6      	bne.n	8003f5c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f06f 0212 	mvn.w	r2, #18
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d123      	bne.n	800401a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11f      	bne.n	800401a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d111      	bne.n	800401a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1c>
 8004058:	2302      	movs	r3, #2
 800405a:	e113      	b.n	8004284 <HAL_ADC_ConfigChannel+0x244>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b09      	cmp	r3, #9
 800406a:	d925      	bls.n	80040b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68d9      	ldr	r1, [r3, #12]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	3b1e      	subs	r3, #30
 8004082:	2207      	movs	r2, #7
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43da      	mvns	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	400a      	ands	r2, r1
 8004090:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68d9      	ldr	r1, [r3, #12]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	4618      	mov	r0, r3
 80040a4:	4603      	mov	r3, r0
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4403      	add	r3, r0
 80040aa:	3b1e      	subs	r3, #30
 80040ac:	409a      	lsls	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e022      	b.n	80040fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6919      	ldr	r1, [r3, #16]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	2207      	movs	r2, #7
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43da      	mvns	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	400a      	ands	r2, r1
 80040da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6919      	ldr	r1, [r3, #16]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	4618      	mov	r0, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4403      	add	r3, r0
 80040f4:	409a      	lsls	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d824      	bhi.n	8004150 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	3b05      	subs	r3, #5
 8004118:	221f      	movs	r2, #31
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43da      	mvns	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	400a      	ands	r2, r1
 8004126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	4618      	mov	r0, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	3b05      	subs	r3, #5
 8004142:	fa00 f203 	lsl.w	r2, r0, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34
 800414e:	e04c      	b.n	80041ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d824      	bhi.n	80041a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	3b23      	subs	r3, #35	@ 0x23
 800416a:	221f      	movs	r2, #31
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43da      	mvns	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	400a      	ands	r2, r1
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	4618      	mov	r0, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	3b23      	subs	r3, #35	@ 0x23
 8004194:	fa00 f203 	lsl.w	r2, r0, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
 80041a0:	e023      	b.n	80041ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	3b41      	subs	r3, #65	@ 0x41
 80041b4:	221f      	movs	r2, #31
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43da      	mvns	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	400a      	ands	r2, r1
 80041c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4618      	mov	r0, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	3b41      	subs	r3, #65	@ 0x41
 80041de:	fa00 f203 	lsl.w	r2, r0, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ea:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <HAL_ADC_ConfigChannel+0x250>)
 80041ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a28      	ldr	r2, [pc, #160]	@ (8004294 <HAL_ADC_ConfigChannel+0x254>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d10f      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1d8>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b12      	cmp	r3, #18
 80041fe:	d10b      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <HAL_ADC_ConfigChannel+0x254>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d12b      	bne.n	800427a <HAL_ADC_ConfigChannel+0x23a>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <HAL_ADC_ConfigChannel+0x258>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <HAL_ADC_ConfigChannel+0x1f4>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b11      	cmp	r3, #17
 8004232:	d122      	bne.n	800427a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a11      	ldr	r2, [pc, #68]	@ (8004298 <HAL_ADC_ConfigChannel+0x258>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004256:	4b11      	ldr	r3, [pc, #68]	@ (800429c <HAL_ADC_ConfigChannel+0x25c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <HAL_ADC_ConfigChannel+0x260>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	0c9a      	lsrs	r2, r3, #18
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800426c:	e002      	b.n	8004274 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3b01      	subs	r3, #1
 8004272:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f9      	bne.n	800426e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40012300 	.word	0x40012300
 8004294:	40012000 	.word	0x40012000
 8004298:	10000012 	.word	0x10000012
 800429c:	20000008 	.word	0x20000008
 80042a0:	431bde83 	.word	0x431bde83

080042a4 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042c4:	4b79      	ldr	r3, [pc, #484]	@ (80044ac <ADC_Init+0x1f0>)
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	4a58      	ldr	r2, [pc, #352]	@ (80044b0 <ADC_Init+0x1f4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004362:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	e00f      	b.n	80043ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0202 	bic.w	r2, r2, #2
 80043c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6899      	ldr	r1, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7e1b      	ldrb	r3, [r3, #24]
 80043d4:	005a      	lsls	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01b      	beq.n	8004420 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004406:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	3b01      	subs	r3, #1
 8004414:	035a      	lsls	r2, r3, #13
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e007      	b.n	8004430 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800443e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	3b01      	subs	r3, #1
 800444c:	051a      	lsls	r2, r3, #20
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6899      	ldr	r1, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004472:	025a      	lsls	r2, r3, #9
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6899      	ldr	r1, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	029a      	lsls	r2, r3, #10
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40012300 	.word	0x40012300
 80044b0:	0f000001 	.word	0x0f000001

080044b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044d0:	4013      	ands	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e6:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	60d3      	str	r3, [r2, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004500:	4b04      	ldr	r3, [pc, #16]	@ (8004514 <__NVIC_GetPriorityGrouping+0x18>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 0307 	and.w	r3, r3, #7
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db0b      	blt.n	8004542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4907      	ldr	r1, [pc, #28]	@ (8004550 <__NVIC_EnableIRQ+0x38>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2001      	movs	r0, #1
 800453a:	fa00 f202 	lsl.w	r2, r0, r2
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e100 	.word	0xe000e100

08004554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db0a      	blt.n	800457e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	490c      	ldr	r1, [pc, #48]	@ (80045a0 <__NVIC_SetPriority+0x4c>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	440b      	add	r3, r1
 8004578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800457c:	e00a      	b.n	8004594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4908      	ldr	r1, [pc, #32]	@ (80045a4 <__NVIC_SetPriority+0x50>)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	3b04      	subs	r3, #4
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	440b      	add	r3, r1
 8004592:	761a      	strb	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000e100 	.word	0xe000e100
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	@ 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	bf28      	it	cs
 80045c6:	2304      	movcs	r3, #4
 80045c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d902      	bls.n	80045d8 <NVIC_EncodePriority+0x30>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3b03      	subs	r3, #3
 80045d6:	e000      	b.n	80045da <NVIC_EncodePriority+0x32>
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	401a      	ands	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f0:	f04f 31ff 	mov.w	r1, #4294967295
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43d9      	mvns	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	4313      	orrs	r3, r2
         );
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	@ 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004620:	d301      	bcc.n	8004626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004622:	2301      	movs	r3, #1
 8004624:	e00f      	b.n	8004646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <SysTick_Config+0x40>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800462e:	210f      	movs	r1, #15
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	f7ff ff8e 	bl	8004554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <SysTick_Config+0x40>)
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <SysTick_Config+0x40>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010

08004654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff29 	bl	80044b4 <__NVIC_SetPriorityGrouping>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800467c:	f7ff ff3e 	bl	80044fc <__NVIC_GetPriorityGrouping>
 8004680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	6978      	ldr	r0, [r7, #20]
 8004688:	f7ff ff8e 	bl	80045a8 <NVIC_EncodePriority>
 800468c:	4602      	mov	r2, r0
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff5d 	bl	8004554 <__NVIC_SetPriority>
}
 800469a:	bf00      	nop
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	4603      	mov	r3, r0
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff31 	bl	8004518 <__NVIC_EnableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ffa2 	bl	8004610 <SysTick_Config>
 80046cc:	4603      	mov	r3, r0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	@ 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e159      	b.n	80049a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	f040 8148 	bne.w	80049a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d005      	beq.n	800472a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004726:	2b02      	cmp	r3, #2
 8004728:	d130      	bne.n	800478c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0201 	and.w	r2, r3, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d017      	beq.n	80047c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d123      	bne.n	800481c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a2 	beq.w	80049a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b57      	ldr	r3, [pc, #348]	@ (80049c0 <HAL_GPIO_Init+0x2e8>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	4a56      	ldr	r2, [pc, #344]	@ (80049c0 <HAL_GPIO_Init+0x2e8>)
 8004868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800486c:	6453      	str	r3, [r2, #68]	@ 0x44
 800486e:	4b54      	ldr	r3, [pc, #336]	@ (80049c0 <HAL_GPIO_Init+0x2e8>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800487a:	4a52      	ldr	r2, [pc, #328]	@ (80049c4 <HAL_GPIO_Init+0x2ec>)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a49      	ldr	r2, [pc, #292]	@ (80049c8 <HAL_GPIO_Init+0x2f0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0x202>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a48      	ldr	r2, [pc, #288]	@ (80049cc <HAL_GPIO_Init+0x2f4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_GPIO_Init+0x1fe>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a47      	ldr	r2, [pc, #284]	@ (80049d0 <HAL_GPIO_Init+0x2f8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <HAL_GPIO_Init+0x1fa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a46      	ldr	r2, [pc, #280]	@ (80049d4 <HAL_GPIO_Init+0x2fc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x1f6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a45      	ldr	r2, [pc, #276]	@ (80049d8 <HAL_GPIO_Init+0x300>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_GPIO_Init+0x1f2>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e008      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048ca:	2307      	movs	r3, #7
 80048cc:	e006      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048ce:	2303      	movs	r3, #3
 80048d0:	e004      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e002      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048da:	2300      	movs	r3, #0
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	f002 0203 	and.w	r2, r2, #3
 80048e2:	0092      	lsls	r2, r2, #2
 80048e4:	4093      	lsls	r3, r2
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048ec:	4935      	ldr	r1, [pc, #212]	@ (80049c4 <HAL_GPIO_Init+0x2ec>)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	3302      	adds	r3, #2
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048fa:	4b38      	ldr	r3, [pc, #224]	@ (80049dc <HAL_GPIO_Init+0x304>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800491e:	4a2f      	ldr	r2, [pc, #188]	@ (80049dc <HAL_GPIO_Init+0x304>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004924:	4b2d      	ldr	r3, [pc, #180]	@ (80049dc <HAL_GPIO_Init+0x304>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004948:	4a24      	ldr	r2, [pc, #144]	@ (80049dc <HAL_GPIO_Init+0x304>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800494e:	4b23      	ldr	r3, [pc, #140]	@ (80049dc <HAL_GPIO_Init+0x304>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004972:	4a1a      	ldr	r2, [pc, #104]	@ (80049dc <HAL_GPIO_Init+0x304>)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004978:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <HAL_GPIO_Init+0x304>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800499c:	4a0f      	ldr	r2, [pc, #60]	@ (80049dc <HAL_GPIO_Init+0x304>)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	f67f aea2 	bls.w	80046f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3724      	adds	r7, #36	@ 0x24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	40020400 	.word	0x40020400
 80049d0:	40020800 	.word	0x40020800
 80049d4:	40020c00 	.word	0x40020c00
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e001      	b.n	8004a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a20:	787b      	ldrb	r3, [r7, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a2c:	e003      	b.n	8004a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	041a      	lsls	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	619a      	str	r2, [r3, #24]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e12b      	b.n	8004cae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fe fbac 	bl	80031c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	@ 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f001 f8da 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 8004aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4a81      	ldr	r2, [pc, #516]	@ (8004cb8 <HAL_I2C_Init+0x274>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d807      	bhi.n	8004ac8 <HAL_I2C_Init+0x84>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a80      	ldr	r2, [pc, #512]	@ (8004cbc <HAL_I2C_Init+0x278>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e006      	b.n	8004ad6 <HAL_I2C_Init+0x92>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc0 <HAL_I2C_Init+0x27c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bf94      	ite	ls
 8004ad0:	2301      	movls	r3, #1
 8004ad2:	2300      	movhi	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0e7      	b.n	8004cae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a78      	ldr	r2, [pc, #480]	@ (8004cc4 <HAL_I2C_Init+0x280>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb8 <HAL_I2C_Init+0x274>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d802      	bhi.n	8004b18 <HAL_I2C_Init+0xd4>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3301      	adds	r3, #1
 8004b16:	e009      	b.n	8004b2c <HAL_I2C_Init+0xe8>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	4a69      	ldr	r2, [pc, #420]	@ (8004cc8 <HAL_I2C_Init+0x284>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	495c      	ldr	r1, [pc, #368]	@ (8004cb8 <HAL_I2C_Init+0x274>)
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	d819      	bhi.n	8004b80 <HAL_I2C_Init+0x13c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1e59      	subs	r1, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b60:	400b      	ands	r3, r1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_I2C_Init+0x138>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1e59      	subs	r1, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7a:	e051      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	e04f      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d111      	bne.n	8004bac <HAL_I2C_Init+0x168>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1e58      	subs	r0, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	440b      	add	r3, r1
 8004b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e012      	b.n	8004bd2 <HAL_I2C_Init+0x18e>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e58      	subs	r0, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Init+0x196>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e022      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10e      	bne.n	8004c00 <HAL_I2C_Init+0x1bc>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1e58      	subs	r0, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	440b      	add	r3, r1
 8004bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfe:	e00f      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1e58      	subs	r0, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	0099      	lsls	r1, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c16:	3301      	adds	r3, #1
 8004c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	6809      	ldr	r1, [r1, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6911      	ldr	r1, [r2, #16]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68d2      	ldr	r2, [r2, #12]
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	000186a0 	.word	0x000186a0
 8004cbc:	001e847f 	.word	0x001e847f
 8004cc0:	003d08ff 	.word	0x003d08ff
 8004cc4:	431bde83 	.word	0x431bde83
 8004cc8:	10624dd3 	.word	0x10624dd3

08004ccc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	460b      	mov	r3, r1
 8004cda:	817b      	strh	r3, [r7, #10]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ce0:	f7fe ffba 	bl	8003c58 <HAL_GetTick>
 8004ce4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	f040 80e0 	bne.w	8004eb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2319      	movs	r3, #25
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4970      	ldr	r1, [pc, #448]	@ (8004ec0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f964 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0d3      	b.n	8004eb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_I2C_Master_Transmit+0x50>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0cc      	b.n	8004eb6 <HAL_I2C_Master_Transmit+0x1ea>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d007      	beq.n	8004d42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2221      	movs	r2, #33	@ 0x21
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	893a      	ldrh	r2, [r7, #8]
 8004d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a50      	ldr	r2, [pc, #320]	@ (8004ec4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d84:	8979      	ldrh	r1, [r7, #10]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f89c 	bl	8004ec8 <I2C_MasterRequestWrite>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e08d      	b.n	8004eb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004db0:	e066      	b.n	8004e80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa22 	bl	8005200 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d107      	bne.n	8004dda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06b      	b.n	8004eb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	781a      	ldrb	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d11b      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x188>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d017      	beq.n	8004e54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	6a39      	ldr	r1, [r7, #32]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fa19 	bl	8005290 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d107      	bne.n	8004e7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e01a      	b.n	8004eb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d194      	bne.n	8004db2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	00100002 	.word	0x00100002
 8004ec4:	ffff0000 	.word	0xffff0000

08004ec8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d006      	beq.n	8004ef2 <I2C_MasterRequestWrite+0x2a>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d003      	beq.n	8004ef2 <I2C_MasterRequestWrite+0x2a>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ef0:	d108      	bne.n	8004f04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e00b      	b.n	8004f1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	2b12      	cmp	r3, #18
 8004f0a:	d107      	bne.n	8004f1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f84f 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f42:	d103      	bne.n	8004f4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e035      	b.n	8004fbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f58:	d108      	bne.n	8004f6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f5a:	897b      	ldrh	r3, [r7, #10]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f68:	611a      	str	r2, [r3, #16]
 8004f6a:	e01b      	b.n	8004fa4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f6c:	897b      	ldrh	r3, [r7, #10]
 8004f6e:	11db      	asrs	r3, r3, #7
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f063 030f 	orn	r3, r3, #15
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	490e      	ldr	r1, [pc, #56]	@ (8004fc4 <I2C_MasterRequestWrite+0xfc>)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f898 	bl	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e010      	b.n	8004fbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4907      	ldr	r1, [pc, #28]	@ (8004fc8 <I2C_MasterRequestWrite+0x100>)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f888 	bl	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	00010008 	.word	0x00010008
 8004fc8:	00010002 	.word	0x00010002

08004fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fdc:	e048      	b.n	8005070 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d044      	beq.n	8005070 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	f7fe fe37 	bl	8003c58 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d139      	bne.n	8005070 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10d      	bne.n	8005022 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	43da      	mvns	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	e00c      	b.n	800503c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	43da      	mvns	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	429a      	cmp	r2, r3
 8005040:	d116      	bne.n	8005070 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e023      	b.n	80050b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10d      	bne.n	8005096 <I2C_WaitOnFlagUntilTimeout+0xca>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	43da      	mvns	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4013      	ands	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	e00c      	b.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	43da      	mvns	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4013      	ands	r3, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d093      	beq.n	8004fde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ce:	e071      	b.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050de:	d123      	bne.n	8005128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e067      	b.n	80051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d041      	beq.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005130:	f7fe fd92 	bl	8003c58 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d302      	bcc.n	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d136      	bne.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10c      	bne.n	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	e00b      	b.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	43da      	mvns	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e021      	b.n	80051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10c      	bne.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	43da      	mvns	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4013      	ands	r3, r2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e00b      	b.n	80051f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f47f af6d 	bne.w	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800520c:	e034      	b.n	8005278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f886 	bl	8005320 <I2C_IsAcknowledgeFailed>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e034      	b.n	8005288 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d028      	beq.n	8005278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fe fd17 	bl	8003c58 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d11d      	bne.n	8005278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005246:	2b80      	cmp	r3, #128	@ 0x80
 8005248:	d016      	beq.n	8005278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e007      	b.n	8005288 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005282:	2b80      	cmp	r3, #128	@ 0x80
 8005284:	d1c3      	bne.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800529c:	e034      	b.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f83e 	bl	8005320 <I2C_IsAcknowledgeFailed>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e034      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d028      	beq.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7fe fccf 	bl	8003c58 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11d      	bne.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d016      	beq.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e007      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d1c3      	bne.n	800529e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005336:	d11b      	bne.n	8005370 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005340:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	f043 0204 	orr.w	r2, r3, #4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e267      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d075      	beq.n	800548a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800539e:	4b88      	ldr	r3, [pc, #544]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d00c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053aa:	4b85      	ldr	r3, [pc, #532]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d112      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4b82      	ldr	r3, [pc, #520]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c2:	d10b      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	4b7e      	ldr	r3, [pc, #504]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05b      	beq.n	8005488 <HAL_RCC_OscConfig+0x108>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d157      	bne.n	8005488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e242      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e4:	d106      	bne.n	80053f4 <HAL_RCC_OscConfig+0x74>
 80053e6:	4b76      	ldr	r3, [pc, #472]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a75      	ldr	r2, [pc, #468]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e01d      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0x98>
 80053fe:	4b70      	ldr	r3, [pc, #448]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6f      	ldr	r2, [pc, #444]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6c      	ldr	r2, [pc, #432]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00b      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 8005418:	4b69      	ldr	r3, [pc, #420]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a68      	ldr	r2, [pc, #416]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b66      	ldr	r3, [pc, #408]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a65      	ldr	r2, [pc, #404]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800542a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800542e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fe fc0e 	bl	8003c58 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fe fc0a 	bl	8003c58 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	@ 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e207      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b5b      	ldr	r3, [pc, #364]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xc0>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe fbfa 	bl	8003c58 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005468:	f7fe fbf6 	bl	8003c58 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	@ 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1f3      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	4b51      	ldr	r3, [pc, #324]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0xe8>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005496:	4b4a      	ldr	r3, [pc, #296]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a2:	4b47      	ldr	r3, [pc, #284]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d11c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b44      	ldr	r3, [pc, #272]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d116      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	4b41      	ldr	r3, [pc, #260]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e1c7      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	4b3b      	ldr	r3, [pc, #236]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4937      	ldr	r1, [pc, #220]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	e03a      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f0:	4b34      	ldr	r3, [pc, #208]	@ (80055c4 <HAL_RCC_OscConfig+0x244>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fe fbaf 	bl	8003c58 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fe:	f7fe fbab 	bl	8003c58 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e1a8      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	4b2b      	ldr	r3, [pc, #172]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4925      	ldr	r1, [pc, #148]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b24      	ldr	r3, [pc, #144]	@ (80055c4 <HAL_RCC_OscConfig+0x244>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fe fb8e 	bl	8003c58 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005540:	f7fe fb8a 	bl	8003c58 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e187      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	4b1b      	ldr	r3, [pc, #108]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d016      	beq.n	80055a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005572:	4b15      	ldr	r3, [pc, #84]	@ (80055c8 <HAL_RCC_OscConfig+0x248>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005578:	f7fe fb6e 	bl	8003c58 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005580:	f7fe fb6a 	bl	8003c58 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e167      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x200>
 800559e:	e01b      	b.n	80055d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a0:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_RCC_OscConfig+0x248>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a6:	f7fe fb57 	bl	8003c58 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ac:	e00e      	b.n	80055cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ae:	f7fe fb53 	bl	8003c58 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d907      	bls.n	80055cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e150      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80055c0:	40023800 	.word	0x40023800
 80055c4:	42470000 	.word	0x42470000
 80055c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b88      	ldr	r3, [pc, #544]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ea      	bne.n	80055ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8097 	beq.w	8005714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b81      	ldr	r3, [pc, #516]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b7d      	ldr	r3, [pc, #500]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	4a7c      	ldr	r2, [pc, #496]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	@ 0x40
 8005606:	4b7a      	ldr	r3, [pc, #488]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b77      	ldr	r3, [pc, #476]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d118      	bne.n	8005654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b74      	ldr	r3, [pc, #464]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fe fb13 	bl	8003c58 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fe fb0f 	bl	8003c58 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e10c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	4b6a      	ldr	r3, [pc, #424]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x2ea>
 800565c:	4b64      	ldr	r3, [pc, #400]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005660:	4a63      	ldr	r2, [pc, #396]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	@ 0x70
 8005668:	e01c      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b05      	cmp	r3, #5
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x30c>
 8005672:	4b5f      	ldr	r3, [pc, #380]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	4a5e      	ldr	r2, [pc, #376]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	6713      	str	r3, [r2, #112]	@ 0x70
 800567e:	4b5c      	ldr	r3, [pc, #368]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005682:	4a5b      	ldr	r2, [pc, #364]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6713      	str	r3, [r2, #112]	@ 0x70
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800568c:	4b58      	ldr	r3, [pc, #352]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005690:	4a57      	ldr	r2, [pc, #348]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	6713      	str	r3, [r2, #112]	@ 0x70
 8005698:	4b55      	ldr	r3, [pc, #340]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	4a54      	ldr	r2, [pc, #336]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569e:	f023 0304 	bic.w	r3, r3, #4
 80056a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fe fad4 	bl	8003c58 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fe fad0 	bl	8003c58 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0cb      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	4b49      	ldr	r3, [pc, #292]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ee      	beq.n	80056b4 <HAL_RCC_OscConfig+0x334>
 80056d6:	e014      	b.n	8005702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fe fabe 	bl	8003c58 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fe faba 	bl	8003c58 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0b5      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ee      	bne.n	80056e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005708:	4b39      	ldr	r3, [pc, #228]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	4a38      	ldr	r2, [pc, #224]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005712:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a1 	beq.w	8005860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800571e:	4b34      	ldr	r3, [pc, #208]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b08      	cmp	r3, #8
 8005728:	d05c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d141      	bne.n	80057b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <HAL_RCC_OscConfig+0x478>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fe fa8e 	bl	8003c58 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005740:	f7fe fa8a 	bl	8003c58 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e087      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	491b      	ldr	r1, [pc, #108]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b1b      	ldr	r3, [pc, #108]	@ (80057f8 <HAL_RCC_OscConfig+0x478>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fe fa63 	bl	8003c58 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fe fa5f 	bl	8003c58 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e05c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x416>
 80057b4:	e054      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_RCC_OscConfig+0x478>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fe fa4c 	bl	8003c58 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fe fa48 	bl	8003c58 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e045      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x444>
 80057e2:	e03d      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e038      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <HAL_RCC_OscConfig+0x4ec>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d028      	beq.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d121      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11a      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0cc      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b68      	ldr	r3, [pc, #416]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90c      	bls.n	80058ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b65      	ldr	r3, [pc, #404]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b63      	ldr	r3, [pc, #396]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0b8      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b59      	ldr	r3, [pc, #356]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a58      	ldr	r2, [pc, #352]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058dc:	4b53      	ldr	r3, [pc, #332]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a52      	ldr	r2, [pc, #328]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b50      	ldr	r3, [pc, #320]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	494d      	ldr	r1, [pc, #308]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d044      	beq.n	8005990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d119      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e07f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d003      	beq.n	800592e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e06f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e067      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b37      	ldr	r3, [pc, #220]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4934      	ldr	r1, [pc, #208]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005960:	f7fe f97a 	bl	8003c58 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	e00a      	b.n	800597e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005968:	f7fe f976 	bl	8003c58 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e04f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	4b2b      	ldr	r3, [pc, #172]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 020c 	and.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d1eb      	bne.n	8005968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b25      	ldr	r3, [pc, #148]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20c      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b22      	ldr	r3, [pc, #136]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e032      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4916      	ldr	r1, [pc, #88]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490e      	ldr	r1, [pc, #56]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059f6:	f000 f821 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490a      	ldr	r1, [pc, #40]	@ (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a12:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe f8da 	bl	8003bd0 <HAL_InitTick>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40023c00 	.word	0x40023c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	08009fcc 	.word	0x08009fcc
 8005a34:	20000008 	.word	0x20000008
 8005a38:	2000000c 	.word	0x2000000c

08005a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b094      	sub	sp, #80	@ 0x50
 8005a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a54:	4b79      	ldr	r3, [pc, #484]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d00d      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x40>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f200 80e1 	bhi.w	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x34>
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6e:	e0db      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b73      	ldr	r3, [pc, #460]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a74:	e0db      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a76:	4b73      	ldr	r3, [pc, #460]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a7a:	e0d8      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a86:	4b6d      	ldr	r3, [pc, #436]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d063      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a92:	4b6a      	ldr	r3, [pc, #424]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f04f 0100 	mov.w	r1, #0
 8005aba:	0159      	lsls	r1, r3, #5
 8005abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac0:	0150      	lsls	r0, r2, #5
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	1a51      	subs	r1, r2, r1
 8005aca:	6139      	str	r1, [r7, #16]
 8005acc:	4629      	mov	r1, r5
 8005ace:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	018b      	lsls	r3, r1, #6
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aea:	4651      	mov	r1, sl
 8005aec:	018a      	lsls	r2, r1, #6
 8005aee:	4651      	mov	r1, sl
 8005af0:	ebb2 0801 	subs.w	r8, r2, r1
 8005af4:	4659      	mov	r1, fp
 8005af6:	eb63 0901 	sbc.w	r9, r3, r1
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b0e:	4690      	mov	r8, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	eb18 0303 	adds.w	r3, r8, r3
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	eb49 0303 	adc.w	r3, r9, r3
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b2e:	4629      	mov	r1, r5
 8005b30:	024b      	lsls	r3, r1, #9
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b38:	4621      	mov	r1, r4
 8005b3a:	024a      	lsls	r2, r1, #9
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b42:	2200      	movs	r2, #0
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b4c:	f7fb f884 	bl	8000c58 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b58:	e058      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5a:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	4611      	mov	r1, r2
 8005b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	f04f 0000 	mov.w	r0, #0
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b86:	0150      	lsls	r0, r2, #5
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b92:	4649      	mov	r1, r9
 8005b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bac:	ebb2 040a 	subs.w	r4, r2, sl
 8005bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	00eb      	lsls	r3, r5, #3
 8005bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc2:	00e2      	lsls	r2, r4, #3
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	4643      	mov	r3, r8
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb45 0303 	adc.w	r3, r5, r3
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	61fa      	str	r2, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	f7fb f82a 	bl	8000c58 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4613      	mov	r3, r2
 8005c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3750      	adds	r7, #80	@ 0x50
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	007a1200 	.word	0x007a1200

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	@ (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000008 	.word	0x20000008

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	@ (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	08009fdc 	.word	0x08009fdc

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c8c:	f7ff ffdc 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	@ (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	08009fdc 	.word	0x08009fdc

08005cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e041      	b.n	8005d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fd fabe 	bl	8003258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 faca 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d001      	beq.n	8005d68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e03c      	b.n	8005de2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1e      	ldr	r2, [pc, #120]	@ (8005df0 <HAL_TIM_Base_Start+0xa0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_TIM_Base_Start+0x5c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d82:	d013      	beq.n	8005dac <HAL_TIM_Base_Start+0x5c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <HAL_TIM_Base_Start+0xa4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_TIM_Base_Start+0x5c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <HAL_TIM_Base_Start+0xa8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_TIM_Base_Start+0x5c>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a17      	ldr	r2, [pc, #92]	@ (8005dfc <HAL_TIM_Base_Start+0xac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIM_Base_Start+0x5c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <HAL_TIM_Base_Start+0xb0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d111      	bne.n	8005dd0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d010      	beq.n	8005de0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	e007      	b.n	8005de0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40014000 	.word	0x40014000

08005e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d001      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e044      	b.n	8005ea6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e46:	d013      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x6c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a19      	ldr	r2, [pc, #100]	@ (8005ebc <HAL_TIM_Base_Start_IT+0xb8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x6c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x6c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d111      	bne.n	8005e94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d010      	beq.n	8005ea4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	e007      	b.n	8005ea4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40010000 	.word	0x40010000
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	40000800 	.word	0x40000800
 8005ec0:	40000c00 	.word	0x40000c00
 8005ec4:	40014000 	.word	0x40014000

08005ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0202 	mvn.w	r2, #2
 8005efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f999 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f98b 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f99c 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d020      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0204 	mvn.w	r2, #4
 8005f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f973 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f965 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f976 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d020      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0208 	mvn.w	r2, #8
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f94d 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f93f 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f950 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d020      	beq.n	8006010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0210 	mvn.w	r2, #16
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f927 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f919 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f92a 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0201 	mvn.w	r2, #1
 800602c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fb f9ce 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fab0 	bl	80065b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00c      	beq.n	800607c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8fb 	bl	8006272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0220 	mvn.w	r2, #32
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa82 	bl	80065a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e0b4      	b.n	800622e <HAL_TIM_ConfigClockSource+0x186>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fc:	d03e      	beq.n	800617c <HAL_TIM_ConfigClockSource+0xd4>
 80060fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006102:	f200 8087 	bhi.w	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	f000 8086 	beq.w	800621a <HAL_TIM_ConfigClockSource+0x172>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006112:	d87f      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b70      	cmp	r3, #112	@ 0x70
 8006116:	d01a      	beq.n	800614e <HAL_TIM_ConfigClockSource+0xa6>
 8006118:	2b70      	cmp	r3, #112	@ 0x70
 800611a:	d87b      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b60      	cmp	r3, #96	@ 0x60
 800611e:	d050      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006120:	2b60      	cmp	r3, #96	@ 0x60
 8006122:	d877      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b50      	cmp	r3, #80	@ 0x50
 8006126:	d03c      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006128:	2b50      	cmp	r3, #80	@ 0x50
 800612a:	d873      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b40      	cmp	r3, #64	@ 0x40
 800612e:	d058      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006130:	2b40      	cmp	r3, #64	@ 0x40
 8006132:	d86f      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b30      	cmp	r3, #48	@ 0x30
 8006136:	d064      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006138:	2b30      	cmp	r3, #48	@ 0x30
 800613a:	d86b      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d060      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	2b20      	cmp	r3, #32
 8006142:	d867      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05c      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b10      	cmp	r3, #16
 800614a:	d05a      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 800614c:	e062      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800615e:	f000 f993 	bl	8006488 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	609a      	str	r2, [r3, #8]
      break;
 800617a:	e04f      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800618c:	f000 f97c 	bl	8006488 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800619e:	609a      	str	r2, [r3, #8]
      break;
 80061a0:	e03c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 f8f0 	bl	8006394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2150      	movs	r1, #80	@ 0x50
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f949 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 80061c0:	e02c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 f90f 	bl	80063f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2160      	movs	r1, #96	@ 0x60
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f939 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 80061e0:	e01c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	461a      	mov	r2, r3
 80061f0:	f000 f8d0 	bl	8006394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2140      	movs	r1, #64	@ 0x40
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f929 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8006200:	e00c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f000 f920 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8006212:	e003      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e000      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800621a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a37      	ldr	r2, [pc, #220]	@ (8006378 <TIM_Base_SetConfig+0xf0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00f      	beq.n	80062c0 <TIM_Base_SetConfig+0x38>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a6:	d00b      	beq.n	80062c0 <TIM_Base_SetConfig+0x38>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a34      	ldr	r2, [pc, #208]	@ (800637c <TIM_Base_SetConfig+0xf4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <TIM_Base_SetConfig+0x38>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a33      	ldr	r2, [pc, #204]	@ (8006380 <TIM_Base_SetConfig+0xf8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0x38>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a32      	ldr	r2, [pc, #200]	@ (8006384 <TIM_Base_SetConfig+0xfc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d108      	bne.n	80062d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a28      	ldr	r2, [pc, #160]	@ (8006378 <TIM_Base_SetConfig+0xf0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01b      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e0:	d017      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a25      	ldr	r2, [pc, #148]	@ (800637c <TIM_Base_SetConfig+0xf4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <TIM_Base_SetConfig+0xf8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00f      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a23      	ldr	r2, [pc, #140]	@ (8006384 <TIM_Base_SetConfig+0xfc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00b      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a22      	ldr	r2, [pc, #136]	@ (8006388 <TIM_Base_SetConfig+0x100>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a21      	ldr	r2, [pc, #132]	@ (800638c <TIM_Base_SetConfig+0x104>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_Base_SetConfig+0x8a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <TIM_Base_SetConfig+0x108>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d108      	bne.n	8006324 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a0c      	ldr	r2, [pc, #48]	@ (8006378 <TIM_Base_SetConfig+0xf0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d103      	bne.n	8006352 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691a      	ldr	r2, [r3, #16]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f043 0204 	orr.w	r2, r3, #4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40010000 	.word	0x40010000
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40014000 	.word	0x40014000
 800638c:	40014400 	.word	0x40014400
 8006390:	40014800 	.word	0x40014800

08006394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0201 	bic.w	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 030a 	bic.w	r3, r3, #10
 80063d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b087      	sub	sp, #28
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	f023 0210 	bic.w	r2, r3, #16
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800641c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800642e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	f043 0307 	orr.w	r3, r3, #7
 8006474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	609a      	str	r2, [r3, #8]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064dc:	2302      	movs	r3, #2
 80064de:	e050      	b.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1c      	ldr	r2, [pc, #112]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652c:	d013      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a16      	ldr	r2, [pc, #88]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a15      	ldr	r2, [pc, #84]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d10c      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4313      	orrs	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40010000 	.word	0x40010000
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800
 800659c:	40000c00 	.word	0x40000c00
 80065a0:	40014000 	.word	0x40014000

080065a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e042      	b.n	8006664 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc fe6c 	bl	80032d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2224      	movs	r2, #36	@ 0x24
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800660e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f973 	bl	80068fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	@ 0x28
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b20      	cmp	r3, #32
 800668a:	d175      	bne.n	8006778 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_UART_Transmit+0x2c>
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e06e      	b.n	800677a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2221      	movs	r2, #33	@ 0x21
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066aa:	f7fd fad5 	bl	8003c58 <HAL_GetTick>
 80066ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c4:	d108      	bne.n	80066d8 <HAL_UART_Transmit+0x6c>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d104      	bne.n	80066d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	e003      	b.n	80066e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066e0:	e02e      	b.n	8006740 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	2180      	movs	r1, #128	@ 0x80
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f848 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e03a      	b.n	800677a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	3302      	adds	r3, #2
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e007      	b.n	8006732 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	781a      	ldrb	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1cb      	bne.n	80066e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2200      	movs	r2, #0
 8006752:	2140      	movs	r1, #64	@ 0x40
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f814 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e006      	b.n	800677a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	e000      	b.n	800677a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006778:	2302      	movs	r3, #2
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006792:	e03b      	b.n	800680c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d037      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679c:	f7fd fa5c 	bl	8003c58 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	6a3a      	ldr	r2, [r7, #32]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e03a      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d023      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x8a>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b80      	cmp	r3, #128	@ 0x80
 80067c8:	d020      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x8a>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b40      	cmp	r3, #64	@ 0x40
 80067ce:	d01d      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d116      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f81d 	bl	8006834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2208      	movs	r2, #8
 80067fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e00f      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	429a      	cmp	r2, r3
 8006828:	d0b4      	beq.n	8006794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b095      	sub	sp, #84	@ 0x54
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800685c:	643a      	str	r2, [r7, #64]	@ 0x40
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e5      	bne.n	800683c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d119      	bne.n	80068e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068cc:	61ba      	str	r2, [r7, #24]
 80068ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6979      	ldr	r1, [r7, #20]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e5      	bne.n	80068ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068ee:	bf00      	nop
 80068f0:	3754      	adds	r7, #84	@ 0x54
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006900:	b0c0      	sub	sp, #256	@ 0x100
 8006902:	af00      	add	r7, sp, #0
 8006904:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006918:	68d9      	ldr	r1, [r3, #12]
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	ea40 0301 	orr.w	r3, r0, r1
 8006924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	431a      	orrs	r2, r3
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	431a      	orrs	r2, r3
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006954:	f021 010c 	bic.w	r1, r1, #12
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006962:	430b      	orrs	r3, r1
 8006964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006976:	6999      	ldr	r1, [r3, #24]
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	ea40 0301 	orr.w	r3, r0, r1
 8006982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b8f      	ldr	r3, [pc, #572]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d005      	beq.n	800699c <UART_SetConfig+0xa0>
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b8d      	ldr	r3, [pc, #564]	@ (8006bcc <UART_SetConfig+0x2d0>)
 8006998:	429a      	cmp	r2, r3
 800699a:	d104      	bne.n	80069a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800699c:	f7ff f974 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 80069a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069a4:	e003      	b.n	80069ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069a6:	f7ff f95b 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 80069aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b8:	f040 810c 	bne.w	8006bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80069ce:	4622      	mov	r2, r4
 80069d0:	462b      	mov	r3, r5
 80069d2:	1891      	adds	r1, r2, r2
 80069d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069d6:	415b      	adcs	r3, r3
 80069d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069de:	4621      	mov	r1, r4
 80069e0:	eb12 0801 	adds.w	r8, r2, r1
 80069e4:	4629      	mov	r1, r5
 80069e6:	eb43 0901 	adc.w	r9, r3, r1
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069fe:	4690      	mov	r8, r2
 8006a00:	4699      	mov	r9, r3
 8006a02:	4623      	mov	r3, r4
 8006a04:	eb18 0303 	adds.w	r3, r8, r3
 8006a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	eb49 0303 	adc.w	r3, r9, r3
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	18db      	adds	r3, r3, r3
 8006a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a30:	4613      	mov	r3, r2
 8006a32:	eb42 0303 	adc.w	r3, r2, r3
 8006a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a40:	f7fa f90a 	bl	8000c58 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4b61      	ldr	r3, [pc, #388]	@ (8006bd0 <UART_SetConfig+0x2d4>)
 8006a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	011c      	lsls	r4, r3, #4
 8006a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	1891      	adds	r1, r2, r2
 8006a6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a6c:	415b      	adcs	r3, r3
 8006a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a74:	4641      	mov	r1, r8
 8006a76:	eb12 0a01 	adds.w	sl, r2, r1
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a94:	4692      	mov	sl, r2
 8006a96:	469b      	mov	fp, r3
 8006a98:	4643      	mov	r3, r8
 8006a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8006aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	18db      	adds	r3, r3, r3
 8006ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	eb42 0303 	adc.w	r3, r2, r3
 8006acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ad6:	f7fa f8bf 	bl	8000c58 <__aeabi_uldivmod>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd0 <UART_SetConfig+0x2d4>)
 8006ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2264      	movs	r2, #100	@ 0x64
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	1acb      	subs	r3, r1, r3
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006af6:	4b36      	ldr	r3, [pc, #216]	@ (8006bd0 <UART_SetConfig+0x2d4>)
 8006af8:	fba3 2302 	umull	r2, r3, r3, r2
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b04:	441c      	add	r4, r3
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b20:	415b      	adcs	r3, r3
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b28:	4641      	mov	r1, r8
 8006b2a:	1851      	adds	r1, r2, r1
 8006b2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b2e:	4649      	mov	r1, r9
 8006b30:	414b      	adcs	r3, r1
 8006b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b40:	4659      	mov	r1, fp
 8006b42:	00cb      	lsls	r3, r1, #3
 8006b44:	4651      	mov	r1, sl
 8006b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	00ca      	lsls	r2, r1, #3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	4642      	mov	r2, r8
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	460a      	mov	r2, r1
 8006b60:	eb42 0303 	adc.w	r3, r2, r3
 8006b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	18db      	adds	r3, r3, r3
 8006b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b82:	4613      	mov	r3, r2
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b92:	f7fa f861 	bl	8000c58 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <UART_SetConfig+0x2d4>)
 8006b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	2164      	movs	r1, #100	@ 0x64
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	3332      	adds	r3, #50	@ 0x32
 8006bae:	4a08      	ldr	r2, [pc, #32]	@ (8006bd0 <UART_SetConfig+0x2d4>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	f003 0207 	and.w	r2, r3, #7
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4422      	add	r2, r4
 8006bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bc4:	e106      	b.n	8006dd4 <UART_SetConfig+0x4d8>
 8006bc6:	bf00      	nop
 8006bc8:	40011000 	.word	0x40011000
 8006bcc:	40011400 	.word	0x40011400
 8006bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006be6:	4642      	mov	r2, r8
 8006be8:	464b      	mov	r3, r9
 8006bea:	1891      	adds	r1, r2, r2
 8006bec:	6239      	str	r1, [r7, #32]
 8006bee:	415b      	adcs	r3, r3
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	1854      	adds	r4, r2, r1
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	eb43 0501 	adc.w	r5, r3, r1
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	00eb      	lsls	r3, r5, #3
 8006c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c0e:	00e2      	lsls	r2, r4, #3
 8006c10:	4614      	mov	r4, r2
 8006c12:	461d      	mov	r5, r3
 8006c14:	4643      	mov	r3, r8
 8006c16:	18e3      	adds	r3, r4, r3
 8006c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	eb45 0303 	adc.w	r3, r5, r3
 8006c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c42:	4629      	mov	r1, r5
 8006c44:	008b      	lsls	r3, r1, #2
 8006c46:	4621      	mov	r1, r4
 8006c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	008a      	lsls	r2, r1, #2
 8006c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c54:	f7fa f800 	bl	8000c58 <__aeabi_uldivmod>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4b60      	ldr	r3, [pc, #384]	@ (8006de0 <UART_SetConfig+0x4e4>)
 8006c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	011c      	lsls	r4, r3, #4
 8006c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c78:	4642      	mov	r2, r8
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	1891      	adds	r1, r2, r2
 8006c7e:	61b9      	str	r1, [r7, #24]
 8006c80:	415b      	adcs	r3, r3
 8006c82:	61fb      	str	r3, [r7, #28]
 8006c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c88:	4641      	mov	r1, r8
 8006c8a:	1851      	adds	r1, r2, r1
 8006c8c:	6139      	str	r1, [r7, #16]
 8006c8e:	4649      	mov	r1, r9
 8006c90:	414b      	adcs	r3, r1
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca0:	4659      	mov	r1, fp
 8006ca2:	00cb      	lsls	r3, r1, #3
 8006ca4:	4651      	mov	r1, sl
 8006ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006caa:	4651      	mov	r1, sl
 8006cac:	00ca      	lsls	r2, r1, #3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	189b      	adds	r3, r3, r2
 8006cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	460a      	mov	r2, r1
 8006cc0:	eb42 0303 	adc.w	r3, r2, r3
 8006cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	008b      	lsls	r3, r1, #2
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cea:	4641      	mov	r1, r8
 8006cec:	008a      	lsls	r2, r1, #2
 8006cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006cf2:	f7f9 ffb1 	bl	8000c58 <__aeabi_uldivmod>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4b38      	ldr	r3, [pc, #224]	@ (8006de0 <UART_SetConfig+0x4e4>)
 8006cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	2264      	movs	r2, #100	@ 0x64
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	1acb      	subs	r3, r1, r3
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	3332      	adds	r3, #50	@ 0x32
 8006d10:	4a33      	ldr	r2, [pc, #204]	@ (8006de0 <UART_SetConfig+0x4e4>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d1c:	441c      	add	r4, r3
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d26:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	1891      	adds	r1, r2, r2
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	415b      	adcs	r3, r3
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	1851      	adds	r1, r2, r1
 8006d40:	6039      	str	r1, [r7, #0]
 8006d42:	4649      	mov	r1, r9
 8006d44:	414b      	adcs	r3, r1
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d54:	4659      	mov	r1, fp
 8006d56:	00cb      	lsls	r3, r1, #3
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5e:	4651      	mov	r1, sl
 8006d60:	00ca      	lsls	r2, r1, #3
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d6e:	464b      	mov	r3, r9
 8006d70:	460a      	mov	r2, r1
 8006d72:	eb42 0303 	adc.w	r3, r2, r3
 8006d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d82:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d90:	4649      	mov	r1, r9
 8006d92:	008b      	lsls	r3, r1, #2
 8006d94:	4641      	mov	r1, r8
 8006d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	008a      	lsls	r2, r1, #2
 8006d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006da2:	f7f9 ff59 	bl	8000c58 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <UART_SetConfig+0x4e4>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	@ 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	3332      	adds	r3, #50	@ 0x32
 8006dbe:	4a08      	ldr	r2, [pc, #32]	@ (8006de0 <UART_SetConfig+0x4e4>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 020f 	and.w	r2, r3, #15
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4422      	add	r2, r4
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de0:	51eb851f 	.word	0x51eb851f

08006de4 <__cvt>:
 8006de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	ec57 6b10 	vmov	r6, r7, d0
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	460c      	mov	r4, r1
 8006df0:	4619      	mov	r1, r3
 8006df2:	463b      	mov	r3, r7
 8006df4:	bfbb      	ittet	lt
 8006df6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006dfa:	461f      	movlt	r7, r3
 8006dfc:	2300      	movge	r3, #0
 8006dfe:	232d      	movlt	r3, #45	@ 0x2d
 8006e00:	700b      	strb	r3, [r1, #0]
 8006e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e08:	4691      	mov	r9, r2
 8006e0a:	f023 0820 	bic.w	r8, r3, #32
 8006e0e:	bfbc      	itt	lt
 8006e10:	4632      	movlt	r2, r6
 8006e12:	4616      	movlt	r6, r2
 8006e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e18:	d005      	beq.n	8006e26 <__cvt+0x42>
 8006e1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e1e:	d100      	bne.n	8006e22 <__cvt+0x3e>
 8006e20:	3401      	adds	r4, #1
 8006e22:	2102      	movs	r1, #2
 8006e24:	e000      	b.n	8006e28 <__cvt+0x44>
 8006e26:	2103      	movs	r1, #3
 8006e28:	ab03      	add	r3, sp, #12
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	ab02      	add	r3, sp, #8
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	ec47 6b10 	vmov	d0, r6, r7
 8006e34:	4653      	mov	r3, sl
 8006e36:	4622      	mov	r2, r4
 8006e38:	f000 fe5a 	bl	8007af0 <_dtoa_r>
 8006e3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e40:	4605      	mov	r5, r0
 8006e42:	d119      	bne.n	8006e78 <__cvt+0x94>
 8006e44:	f019 0f01 	tst.w	r9, #1
 8006e48:	d00e      	beq.n	8006e68 <__cvt+0x84>
 8006e4a:	eb00 0904 	add.w	r9, r0, r4
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2300      	movs	r3, #0
 8006e52:	4630      	mov	r0, r6
 8006e54:	4639      	mov	r1, r7
 8006e56:	f7f9 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e5a:	b108      	cbz	r0, 8006e60 <__cvt+0x7c>
 8006e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e60:	2230      	movs	r2, #48	@ 0x30
 8006e62:	9b03      	ldr	r3, [sp, #12]
 8006e64:	454b      	cmp	r3, r9
 8006e66:	d31e      	bcc.n	8006ea6 <__cvt+0xc2>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e6c:	1b5b      	subs	r3, r3, r5
 8006e6e:	4628      	mov	r0, r5
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	b004      	add	sp, #16
 8006e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e7c:	eb00 0904 	add.w	r9, r0, r4
 8006e80:	d1e5      	bne.n	8006e4e <__cvt+0x6a>
 8006e82:	7803      	ldrb	r3, [r0, #0]
 8006e84:	2b30      	cmp	r3, #48	@ 0x30
 8006e86:	d10a      	bne.n	8006e9e <__cvt+0xba>
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7f9 fe22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e94:	b918      	cbnz	r0, 8006e9e <__cvt+0xba>
 8006e96:	f1c4 0401 	rsb	r4, r4, #1
 8006e9a:	f8ca 4000 	str.w	r4, [sl]
 8006e9e:	f8da 3000 	ldr.w	r3, [sl]
 8006ea2:	4499      	add	r9, r3
 8006ea4:	e7d3      	b.n	8006e4e <__cvt+0x6a>
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	9103      	str	r1, [sp, #12]
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e7d9      	b.n	8006e62 <__cvt+0x7e>

08006eae <__exponent>:
 8006eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	bfba      	itte	lt
 8006eb4:	4249      	neglt	r1, r1
 8006eb6:	232d      	movlt	r3, #45	@ 0x2d
 8006eb8:	232b      	movge	r3, #43	@ 0x2b
 8006eba:	2909      	cmp	r1, #9
 8006ebc:	7002      	strb	r2, [r0, #0]
 8006ebe:	7043      	strb	r3, [r0, #1]
 8006ec0:	dd29      	ble.n	8006f16 <__exponent+0x68>
 8006ec2:	f10d 0307 	add.w	r3, sp, #7
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	270a      	movs	r7, #10
 8006eca:	461a      	mov	r2, r3
 8006ecc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ed0:	fb07 1416 	mls	r4, r7, r6, r1
 8006ed4:	3430      	adds	r4, #48	@ 0x30
 8006ed6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006eda:	460c      	mov	r4, r1
 8006edc:	2c63      	cmp	r4, #99	@ 0x63
 8006ede:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	dcf1      	bgt.n	8006eca <__exponent+0x1c>
 8006ee6:	3130      	adds	r1, #48	@ 0x30
 8006ee8:	1e94      	subs	r4, r2, #2
 8006eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eee:	1c41      	adds	r1, r0, #1
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	42ab      	cmp	r3, r5
 8006ef4:	d30a      	bcc.n	8006f0c <__exponent+0x5e>
 8006ef6:	f10d 0309 	add.w	r3, sp, #9
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ac      	cmp	r4, r5
 8006efe:	bf88      	it	hi
 8006f00:	2300      	movhi	r3, #0
 8006f02:	3302      	adds	r3, #2
 8006f04:	4403      	add	r3, r0
 8006f06:	1a18      	subs	r0, r3, r0
 8006f08:	b003      	add	sp, #12
 8006f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f14:	e7ed      	b.n	8006ef2 <__exponent+0x44>
 8006f16:	2330      	movs	r3, #48	@ 0x30
 8006f18:	3130      	adds	r1, #48	@ 0x30
 8006f1a:	7083      	strb	r3, [r0, #2]
 8006f1c:	70c1      	strb	r1, [r0, #3]
 8006f1e:	1d03      	adds	r3, r0, #4
 8006f20:	e7f1      	b.n	8006f06 <__exponent+0x58>
	...

08006f24 <_printf_float>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	b08d      	sub	sp, #52	@ 0x34
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f30:	4616      	mov	r6, r2
 8006f32:	461f      	mov	r7, r3
 8006f34:	4605      	mov	r5, r0
 8006f36:	f000 fcdb 	bl	80078f0 <_localeconv_r>
 8006f3a:	6803      	ldr	r3, [r0, #0]
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7f9 f99e 	bl	8000280 <strlen>
 8006f44:	2300      	movs	r3, #0
 8006f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f48:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4c:	9005      	str	r0, [sp, #20]
 8006f4e:	3307      	adds	r3, #7
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	f103 0208 	add.w	r2, r3, #8
 8006f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8006f60:	f8c8 2000 	str.w	r2, [r8]
 8006f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f6c:	9307      	str	r3, [sp, #28]
 8006f6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80071ec <_printf_float+0x2c8>)
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f80:	f7f9 fddc 	bl	8000b3c <__aeabi_dcmpun>
 8006f84:	bb70      	cbnz	r0, 8006fe4 <_printf_float+0xc0>
 8006f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f8a:	4b98      	ldr	r3, [pc, #608]	@ (80071ec <_printf_float+0x2c8>)
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	f7f9 fdb6 	bl	8000b00 <__aeabi_dcmple>
 8006f94:	bb30      	cbnz	r0, 8006fe4 <_printf_float+0xc0>
 8006f96:	2200      	movs	r2, #0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	f7f9 fda5 	bl	8000aec <__aeabi_dcmplt>
 8006fa2:	b110      	cbz	r0, 8006faa <_printf_float+0x86>
 8006fa4:	232d      	movs	r3, #45	@ 0x2d
 8006fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006faa:	4a91      	ldr	r2, [pc, #580]	@ (80071f0 <_printf_float+0x2cc>)
 8006fac:	4b91      	ldr	r3, [pc, #580]	@ (80071f4 <_printf_float+0x2d0>)
 8006fae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fb2:	bf8c      	ite	hi
 8006fb4:	4690      	movhi	r8, r2
 8006fb6:	4698      	movls	r8, r3
 8006fb8:	2303      	movs	r3, #3
 8006fba:	6123      	str	r3, [r4, #16]
 8006fbc:	f02b 0304 	bic.w	r3, fp, #4
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	f04f 0900 	mov.w	r9, #0
 8006fc6:	9700      	str	r7, [sp, #0]
 8006fc8:	4633      	mov	r3, r6
 8006fca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 f9d2 	bl	8007378 <_printf_common>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f040 808d 	bne.w	80070f4 <_printf_float+0x1d0>
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295
 8006fde:	b00d      	add	sp, #52	@ 0x34
 8006fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 fda6 	bl	8000b3c <__aeabi_dcmpun>
 8006ff0:	b140      	cbz	r0, 8007004 <_printf_float+0xe0>
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bfbc      	itt	lt
 8006ff8:	232d      	movlt	r3, #45	@ 0x2d
 8006ffa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80071f8 <_printf_float+0x2d4>)
 8007000:	4b7e      	ldr	r3, [pc, #504]	@ (80071fc <_printf_float+0x2d8>)
 8007002:	e7d4      	b.n	8006fae <_printf_float+0x8a>
 8007004:	6863      	ldr	r3, [r4, #4]
 8007006:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800700a:	9206      	str	r2, [sp, #24]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	d13b      	bne.n	8007088 <_printf_float+0x164>
 8007010:	2306      	movs	r3, #6
 8007012:	6063      	str	r3, [r4, #4]
 8007014:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007018:	2300      	movs	r3, #0
 800701a:	6022      	str	r2, [r4, #0]
 800701c:	9303      	str	r3, [sp, #12]
 800701e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007020:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007024:	ab09      	add	r3, sp, #36	@ 0x24
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	6861      	ldr	r1, [r4, #4]
 800702a:	ec49 8b10 	vmov	d0, r8, r9
 800702e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007032:	4628      	mov	r0, r5
 8007034:	f7ff fed6 	bl	8006de4 <__cvt>
 8007038:	9b06      	ldr	r3, [sp, #24]
 800703a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800703c:	2b47      	cmp	r3, #71	@ 0x47
 800703e:	4680      	mov	r8, r0
 8007040:	d129      	bne.n	8007096 <_printf_float+0x172>
 8007042:	1cc8      	adds	r0, r1, #3
 8007044:	db02      	blt.n	800704c <_printf_float+0x128>
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	4299      	cmp	r1, r3
 800704a:	dd41      	ble.n	80070d0 <_printf_float+0x1ac>
 800704c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007050:	fa5f fa8a 	uxtb.w	sl, sl
 8007054:	3901      	subs	r1, #1
 8007056:	4652      	mov	r2, sl
 8007058:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800705c:	9109      	str	r1, [sp, #36]	@ 0x24
 800705e:	f7ff ff26 	bl	8006eae <__exponent>
 8007062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007064:	1813      	adds	r3, r2, r0
 8007066:	2a01      	cmp	r2, #1
 8007068:	4681      	mov	r9, r0
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	dc02      	bgt.n	8007074 <_printf_float+0x150>
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	07d2      	lsls	r2, r2, #31
 8007072:	d501      	bpl.n	8007078 <_printf_float+0x154>
 8007074:	3301      	adds	r3, #1
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0a2      	beq.n	8006fc6 <_printf_float+0xa2>
 8007080:	232d      	movs	r3, #45	@ 0x2d
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007086:	e79e      	b.n	8006fc6 <_printf_float+0xa2>
 8007088:	9a06      	ldr	r2, [sp, #24]
 800708a:	2a47      	cmp	r2, #71	@ 0x47
 800708c:	d1c2      	bne.n	8007014 <_printf_float+0xf0>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1c0      	bne.n	8007014 <_printf_float+0xf0>
 8007092:	2301      	movs	r3, #1
 8007094:	e7bd      	b.n	8007012 <_printf_float+0xee>
 8007096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800709a:	d9db      	bls.n	8007054 <_printf_float+0x130>
 800709c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070a0:	d118      	bne.n	80070d4 <_printf_float+0x1b0>
 80070a2:	2900      	cmp	r1, #0
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	dd0b      	ble.n	80070c0 <_printf_float+0x19c>
 80070a8:	6121      	str	r1, [r4, #16]
 80070aa:	b913      	cbnz	r3, 80070b2 <_printf_float+0x18e>
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	07d0      	lsls	r0, r2, #31
 80070b0:	d502      	bpl.n	80070b8 <_printf_float+0x194>
 80070b2:	3301      	adds	r3, #1
 80070b4:	440b      	add	r3, r1
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070ba:	f04f 0900 	mov.w	r9, #0
 80070be:	e7db      	b.n	8007078 <_printf_float+0x154>
 80070c0:	b913      	cbnz	r3, 80070c8 <_printf_float+0x1a4>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	07d2      	lsls	r2, r2, #31
 80070c6:	d501      	bpl.n	80070cc <_printf_float+0x1a8>
 80070c8:	3302      	adds	r3, #2
 80070ca:	e7f4      	b.n	80070b6 <_printf_float+0x192>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e7f2      	b.n	80070b6 <_printf_float+0x192>
 80070d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070d6:	4299      	cmp	r1, r3
 80070d8:	db05      	blt.n	80070e6 <_printf_float+0x1c2>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	6121      	str	r1, [r4, #16]
 80070de:	07d8      	lsls	r0, r3, #31
 80070e0:	d5ea      	bpl.n	80070b8 <_printf_float+0x194>
 80070e2:	1c4b      	adds	r3, r1, #1
 80070e4:	e7e7      	b.n	80070b6 <_printf_float+0x192>
 80070e6:	2900      	cmp	r1, #0
 80070e8:	bfd4      	ite	le
 80070ea:	f1c1 0202 	rsble	r2, r1, #2
 80070ee:	2201      	movgt	r2, #1
 80070f0:	4413      	add	r3, r2
 80070f2:	e7e0      	b.n	80070b6 <_printf_float+0x192>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	055a      	lsls	r2, r3, #21
 80070f8:	d407      	bmi.n	800710a <_printf_float+0x1e6>
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	4642      	mov	r2, r8
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	d12b      	bne.n	8007160 <_printf_float+0x23c>
 8007108:	e767      	b.n	8006fda <_printf_float+0xb6>
 800710a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800710e:	f240 80dd 	bls.w	80072cc <_printf_float+0x3a8>
 8007112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	f7f9 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800711e:	2800      	cmp	r0, #0
 8007120:	d033      	beq.n	800718a <_printf_float+0x266>
 8007122:	4a37      	ldr	r2, [pc, #220]	@ (8007200 <_printf_float+0x2dc>)
 8007124:	2301      	movs	r3, #1
 8007126:	4631      	mov	r1, r6
 8007128:	4628      	mov	r0, r5
 800712a:	47b8      	blx	r7
 800712c:	3001      	adds	r0, #1
 800712e:	f43f af54 	beq.w	8006fda <_printf_float+0xb6>
 8007132:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007136:	4543      	cmp	r3, r8
 8007138:	db02      	blt.n	8007140 <_printf_float+0x21c>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	07d8      	lsls	r0, r3, #31
 800713e:	d50f      	bpl.n	8007160 <_printf_float+0x23c>
 8007140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f af45 	beq.w	8006fda <_printf_float+0xb6>
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	f108 38ff 	add.w	r8, r8, #4294967295
 8007158:	f104 0a1a 	add.w	sl, r4, #26
 800715c:	45c8      	cmp	r8, r9
 800715e:	dc09      	bgt.n	8007174 <_printf_float+0x250>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	079b      	lsls	r3, r3, #30
 8007164:	f100 8103 	bmi.w	800736e <_printf_float+0x44a>
 8007168:	68e0      	ldr	r0, [r4, #12]
 800716a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800716c:	4298      	cmp	r0, r3
 800716e:	bfb8      	it	lt
 8007170:	4618      	movlt	r0, r3
 8007172:	e734      	b.n	8006fde <_printf_float+0xba>
 8007174:	2301      	movs	r3, #1
 8007176:	4652      	mov	r2, sl
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f af2b 	beq.w	8006fda <_printf_float+0xb6>
 8007184:	f109 0901 	add.w	r9, r9, #1
 8007188:	e7e8      	b.n	800715c <_printf_float+0x238>
 800718a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	dc39      	bgt.n	8007204 <_printf_float+0x2e0>
 8007190:	4a1b      	ldr	r2, [pc, #108]	@ (8007200 <_printf_float+0x2dc>)
 8007192:	2301      	movs	r3, #1
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f af1d 	beq.w	8006fda <_printf_float+0xb6>
 80071a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071a4:	ea59 0303 	orrs.w	r3, r9, r3
 80071a8:	d102      	bne.n	80071b0 <_printf_float+0x28c>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	07d9      	lsls	r1, r3, #31
 80071ae:	d5d7      	bpl.n	8007160 <_printf_float+0x23c>
 80071b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b4:	4631      	mov	r1, r6
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	f43f af0d 	beq.w	8006fda <_printf_float+0xb6>
 80071c0:	f04f 0a00 	mov.w	sl, #0
 80071c4:	f104 0b1a 	add.w	fp, r4, #26
 80071c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ca:	425b      	negs	r3, r3
 80071cc:	4553      	cmp	r3, sl
 80071ce:	dc01      	bgt.n	80071d4 <_printf_float+0x2b0>
 80071d0:	464b      	mov	r3, r9
 80071d2:	e793      	b.n	80070fc <_printf_float+0x1d8>
 80071d4:	2301      	movs	r3, #1
 80071d6:	465a      	mov	r2, fp
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f aefb 	beq.w	8006fda <_printf_float+0xb6>
 80071e4:	f10a 0a01 	add.w	sl, sl, #1
 80071e8:	e7ee      	b.n	80071c8 <_printf_float+0x2a4>
 80071ea:	bf00      	nop
 80071ec:	7fefffff 	.word	0x7fefffff
 80071f0:	08009fe8 	.word	0x08009fe8
 80071f4:	08009fe4 	.word	0x08009fe4
 80071f8:	08009ff0 	.word	0x08009ff0
 80071fc:	08009fec 	.word	0x08009fec
 8007200:	08009ff4 	.word	0x08009ff4
 8007204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007206:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800720a:	4553      	cmp	r3, sl
 800720c:	bfa8      	it	ge
 800720e:	4653      	movge	r3, sl
 8007210:	2b00      	cmp	r3, #0
 8007212:	4699      	mov	r9, r3
 8007214:	dc36      	bgt.n	8007284 <_printf_float+0x360>
 8007216:	f04f 0b00 	mov.w	fp, #0
 800721a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800721e:	f104 021a 	add.w	r2, r4, #26
 8007222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007224:	9306      	str	r3, [sp, #24]
 8007226:	eba3 0309 	sub.w	r3, r3, r9
 800722a:	455b      	cmp	r3, fp
 800722c:	dc31      	bgt.n	8007292 <_printf_float+0x36e>
 800722e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007230:	459a      	cmp	sl, r3
 8007232:	dc3a      	bgt.n	80072aa <_printf_float+0x386>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	07da      	lsls	r2, r3, #31
 8007238:	d437      	bmi.n	80072aa <_printf_float+0x386>
 800723a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723c:	ebaa 0903 	sub.w	r9, sl, r3
 8007240:	9b06      	ldr	r3, [sp, #24]
 8007242:	ebaa 0303 	sub.w	r3, sl, r3
 8007246:	4599      	cmp	r9, r3
 8007248:	bfa8      	it	ge
 800724a:	4699      	movge	r9, r3
 800724c:	f1b9 0f00 	cmp.w	r9, #0
 8007250:	dc33      	bgt.n	80072ba <_printf_float+0x396>
 8007252:	f04f 0800 	mov.w	r8, #0
 8007256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800725a:	f104 0b1a 	add.w	fp, r4, #26
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	ebaa 0303 	sub.w	r3, sl, r3
 8007264:	eba3 0309 	sub.w	r3, r3, r9
 8007268:	4543      	cmp	r3, r8
 800726a:	f77f af79 	ble.w	8007160 <_printf_float+0x23c>
 800726e:	2301      	movs	r3, #1
 8007270:	465a      	mov	r2, fp
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f aeae 	beq.w	8006fda <_printf_float+0xb6>
 800727e:	f108 0801 	add.w	r8, r8, #1
 8007282:	e7ec      	b.n	800725e <_printf_float+0x33a>
 8007284:	4642      	mov	r2, r8
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	d1c2      	bne.n	8007216 <_printf_float+0x2f2>
 8007290:	e6a3      	b.n	8006fda <_printf_float+0xb6>
 8007292:	2301      	movs	r3, #1
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	9206      	str	r2, [sp, #24]
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f ae9c 	beq.w	8006fda <_printf_float+0xb6>
 80072a2:	9a06      	ldr	r2, [sp, #24]
 80072a4:	f10b 0b01 	add.w	fp, fp, #1
 80072a8:	e7bb      	b.n	8007222 <_printf_float+0x2fe>
 80072aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	d1c0      	bne.n	800723a <_printf_float+0x316>
 80072b8:	e68f      	b.n	8006fda <_printf_float+0xb6>
 80072ba:	9a06      	ldr	r2, [sp, #24]
 80072bc:	464b      	mov	r3, r9
 80072be:	4442      	add	r2, r8
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	d1c3      	bne.n	8007252 <_printf_float+0x32e>
 80072ca:	e686      	b.n	8006fda <_printf_float+0xb6>
 80072cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072d0:	f1ba 0f01 	cmp.w	sl, #1
 80072d4:	dc01      	bgt.n	80072da <_printf_float+0x3b6>
 80072d6:	07db      	lsls	r3, r3, #31
 80072d8:	d536      	bpl.n	8007348 <_printf_float+0x424>
 80072da:	2301      	movs	r3, #1
 80072dc:	4642      	mov	r2, r8
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae78 	beq.w	8006fda <_printf_float+0xb6>
 80072ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f ae70 	beq.w	8006fda <_printf_float+0xb6>
 80072fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007306:	f7f9 fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800730a:	b9c0      	cbnz	r0, 800733e <_printf_float+0x41a>
 800730c:	4653      	mov	r3, sl
 800730e:	f108 0201 	add.w	r2, r8, #1
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	d10c      	bne.n	8007336 <_printf_float+0x412>
 800731c:	e65d      	b.n	8006fda <_printf_float+0xb6>
 800731e:	2301      	movs	r3, #1
 8007320:	465a      	mov	r2, fp
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae56 	beq.w	8006fda <_printf_float+0xb6>
 800732e:	f108 0801 	add.w	r8, r8, #1
 8007332:	45d0      	cmp	r8, sl
 8007334:	dbf3      	blt.n	800731e <_printf_float+0x3fa>
 8007336:	464b      	mov	r3, r9
 8007338:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800733c:	e6df      	b.n	80070fe <_printf_float+0x1da>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	f104 0b1a 	add.w	fp, r4, #26
 8007346:	e7f4      	b.n	8007332 <_printf_float+0x40e>
 8007348:	2301      	movs	r3, #1
 800734a:	4642      	mov	r2, r8
 800734c:	e7e1      	b.n	8007312 <_printf_float+0x3ee>
 800734e:	2301      	movs	r3, #1
 8007350:	464a      	mov	r2, r9
 8007352:	4631      	mov	r1, r6
 8007354:	4628      	mov	r0, r5
 8007356:	47b8      	blx	r7
 8007358:	3001      	adds	r0, #1
 800735a:	f43f ae3e 	beq.w	8006fda <_printf_float+0xb6>
 800735e:	f108 0801 	add.w	r8, r8, #1
 8007362:	68e3      	ldr	r3, [r4, #12]
 8007364:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007366:	1a5b      	subs	r3, r3, r1
 8007368:	4543      	cmp	r3, r8
 800736a:	dcf0      	bgt.n	800734e <_printf_float+0x42a>
 800736c:	e6fc      	b.n	8007168 <_printf_float+0x244>
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	f104 0919 	add.w	r9, r4, #25
 8007376:	e7f4      	b.n	8007362 <_printf_float+0x43e>

08007378 <_printf_common>:
 8007378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	4616      	mov	r6, r2
 800737e:	4698      	mov	r8, r3
 8007380:	688a      	ldr	r2, [r1, #8]
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007388:	4293      	cmp	r3, r2
 800738a:	bfb8      	it	lt
 800738c:	4613      	movlt	r3, r2
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007394:	4607      	mov	r7, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b10a      	cbz	r2, 800739e <_printf_common+0x26>
 800739a:	3301      	adds	r3, #1
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	0699      	lsls	r1, r3, #26
 80073a2:	bf42      	ittt	mi
 80073a4:	6833      	ldrmi	r3, [r6, #0]
 80073a6:	3302      	addmi	r3, #2
 80073a8:	6033      	strmi	r3, [r6, #0]
 80073aa:	6825      	ldr	r5, [r4, #0]
 80073ac:	f015 0506 	ands.w	r5, r5, #6
 80073b0:	d106      	bne.n	80073c0 <_printf_common+0x48>
 80073b2:	f104 0a19 	add.w	sl, r4, #25
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	6832      	ldr	r2, [r6, #0]
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	42ab      	cmp	r3, r5
 80073be:	dc26      	bgt.n	800740e <_printf_common+0x96>
 80073c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	3b00      	subs	r3, #0
 80073c8:	bf18      	it	ne
 80073ca:	2301      	movne	r3, #1
 80073cc:	0692      	lsls	r2, r2, #26
 80073ce:	d42b      	bmi.n	8007428 <_printf_common+0xb0>
 80073d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073d4:	4641      	mov	r1, r8
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c8      	blx	r9
 80073da:	3001      	adds	r0, #1
 80073dc:	d01e      	beq.n	800741c <_printf_common+0xa4>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	6922      	ldr	r2, [r4, #16]
 80073e2:	f003 0306 	and.w	r3, r3, #6
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	bf02      	ittt	eq
 80073ea:	68e5      	ldreq	r5, [r4, #12]
 80073ec:	6833      	ldreq	r3, [r6, #0]
 80073ee:	1aed      	subeq	r5, r5, r3
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	bf0c      	ite	eq
 80073f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f8:	2500      	movne	r5, #0
 80073fa:	4293      	cmp	r3, r2
 80073fc:	bfc4      	itt	gt
 80073fe:	1a9b      	subgt	r3, r3, r2
 8007400:	18ed      	addgt	r5, r5, r3
 8007402:	2600      	movs	r6, #0
 8007404:	341a      	adds	r4, #26
 8007406:	42b5      	cmp	r5, r6
 8007408:	d11a      	bne.n	8007440 <_printf_common+0xc8>
 800740a:	2000      	movs	r0, #0
 800740c:	e008      	b.n	8007420 <_printf_common+0xa8>
 800740e:	2301      	movs	r3, #1
 8007410:	4652      	mov	r2, sl
 8007412:	4641      	mov	r1, r8
 8007414:	4638      	mov	r0, r7
 8007416:	47c8      	blx	r9
 8007418:	3001      	adds	r0, #1
 800741a:	d103      	bne.n	8007424 <_printf_common+0xac>
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007424:	3501      	adds	r5, #1
 8007426:	e7c6      	b.n	80073b6 <_printf_common+0x3e>
 8007428:	18e1      	adds	r1, r4, r3
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	2030      	movs	r0, #48	@ 0x30
 800742e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007432:	4422      	add	r2, r4
 8007434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800743c:	3302      	adds	r3, #2
 800743e:	e7c7      	b.n	80073d0 <_printf_common+0x58>
 8007440:	2301      	movs	r3, #1
 8007442:	4622      	mov	r2, r4
 8007444:	4641      	mov	r1, r8
 8007446:	4638      	mov	r0, r7
 8007448:	47c8      	blx	r9
 800744a:	3001      	adds	r0, #1
 800744c:	d0e6      	beq.n	800741c <_printf_common+0xa4>
 800744e:	3601      	adds	r6, #1
 8007450:	e7d9      	b.n	8007406 <_printf_common+0x8e>
	...

08007454 <_printf_i>:
 8007454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	7e0f      	ldrb	r7, [r1, #24]
 800745a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800745c:	2f78      	cmp	r7, #120	@ 0x78
 800745e:	4691      	mov	r9, r2
 8007460:	4680      	mov	r8, r0
 8007462:	460c      	mov	r4, r1
 8007464:	469a      	mov	sl, r3
 8007466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800746a:	d807      	bhi.n	800747c <_printf_i+0x28>
 800746c:	2f62      	cmp	r7, #98	@ 0x62
 800746e:	d80a      	bhi.n	8007486 <_printf_i+0x32>
 8007470:	2f00      	cmp	r7, #0
 8007472:	f000 80d1 	beq.w	8007618 <_printf_i+0x1c4>
 8007476:	2f58      	cmp	r7, #88	@ 0x58
 8007478:	f000 80b8 	beq.w	80075ec <_printf_i+0x198>
 800747c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007484:	e03a      	b.n	80074fc <_printf_i+0xa8>
 8007486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800748a:	2b15      	cmp	r3, #21
 800748c:	d8f6      	bhi.n	800747c <_printf_i+0x28>
 800748e:	a101      	add	r1, pc, #4	@ (adr r1, 8007494 <_printf_i+0x40>)
 8007490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007494:	080074ed 	.word	0x080074ed
 8007498:	08007501 	.word	0x08007501
 800749c:	0800747d 	.word	0x0800747d
 80074a0:	0800747d 	.word	0x0800747d
 80074a4:	0800747d 	.word	0x0800747d
 80074a8:	0800747d 	.word	0x0800747d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800747d 	.word	0x0800747d
 80074b4:	0800747d 	.word	0x0800747d
 80074b8:	0800747d 	.word	0x0800747d
 80074bc:	0800747d 	.word	0x0800747d
 80074c0:	080075ff 	.word	0x080075ff
 80074c4:	0800752b 	.word	0x0800752b
 80074c8:	080075b9 	.word	0x080075b9
 80074cc:	0800747d 	.word	0x0800747d
 80074d0:	0800747d 	.word	0x0800747d
 80074d4:	08007621 	.word	0x08007621
 80074d8:	0800747d 	.word	0x0800747d
 80074dc:	0800752b 	.word	0x0800752b
 80074e0:	0800747d 	.word	0x0800747d
 80074e4:	0800747d 	.word	0x0800747d
 80074e8:	080075c1 	.word	0x080075c1
 80074ec:	6833      	ldr	r3, [r6, #0]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6032      	str	r2, [r6, #0]
 80074f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074fc:	2301      	movs	r3, #1
 80074fe:	e09c      	b.n	800763a <_printf_i+0x1e6>
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	6031      	str	r1, [r6, #0]
 8007508:	0606      	lsls	r6, r0, #24
 800750a:	d501      	bpl.n	8007510 <_printf_i+0xbc>
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	e003      	b.n	8007518 <_printf_i+0xc4>
 8007510:	0645      	lsls	r5, r0, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0xb8>
 8007514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007518:	2d00      	cmp	r5, #0
 800751a:	da03      	bge.n	8007524 <_printf_i+0xd0>
 800751c:	232d      	movs	r3, #45	@ 0x2d
 800751e:	426d      	negs	r5, r5
 8007520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007524:	4858      	ldr	r0, [pc, #352]	@ (8007688 <_printf_i+0x234>)
 8007526:	230a      	movs	r3, #10
 8007528:	e011      	b.n	800754e <_printf_i+0xfa>
 800752a:	6821      	ldr	r1, [r4, #0]
 800752c:	6833      	ldr	r3, [r6, #0]
 800752e:	0608      	lsls	r0, r1, #24
 8007530:	f853 5b04 	ldr.w	r5, [r3], #4
 8007534:	d402      	bmi.n	800753c <_printf_i+0xe8>
 8007536:	0649      	lsls	r1, r1, #25
 8007538:	bf48      	it	mi
 800753a:	b2ad      	uxthmi	r5, r5
 800753c:	2f6f      	cmp	r7, #111	@ 0x6f
 800753e:	4852      	ldr	r0, [pc, #328]	@ (8007688 <_printf_i+0x234>)
 8007540:	6033      	str	r3, [r6, #0]
 8007542:	bf14      	ite	ne
 8007544:	230a      	movne	r3, #10
 8007546:	2308      	moveq	r3, #8
 8007548:	2100      	movs	r1, #0
 800754a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800754e:	6866      	ldr	r6, [r4, #4]
 8007550:	60a6      	str	r6, [r4, #8]
 8007552:	2e00      	cmp	r6, #0
 8007554:	db05      	blt.n	8007562 <_printf_i+0x10e>
 8007556:	6821      	ldr	r1, [r4, #0]
 8007558:	432e      	orrs	r6, r5
 800755a:	f021 0104 	bic.w	r1, r1, #4
 800755e:	6021      	str	r1, [r4, #0]
 8007560:	d04b      	beq.n	80075fa <_printf_i+0x1a6>
 8007562:	4616      	mov	r6, r2
 8007564:	fbb5 f1f3 	udiv	r1, r5, r3
 8007568:	fb03 5711 	mls	r7, r3, r1, r5
 800756c:	5dc7      	ldrb	r7, [r0, r7]
 800756e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007572:	462f      	mov	r7, r5
 8007574:	42bb      	cmp	r3, r7
 8007576:	460d      	mov	r5, r1
 8007578:	d9f4      	bls.n	8007564 <_printf_i+0x110>
 800757a:	2b08      	cmp	r3, #8
 800757c:	d10b      	bne.n	8007596 <_printf_i+0x142>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	07df      	lsls	r7, r3, #31
 8007582:	d508      	bpl.n	8007596 <_printf_i+0x142>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	6861      	ldr	r1, [r4, #4]
 8007588:	4299      	cmp	r1, r3
 800758a:	bfde      	ittt	le
 800758c:	2330      	movle	r3, #48	@ 0x30
 800758e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007592:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007596:	1b92      	subs	r2, r2, r6
 8007598:	6122      	str	r2, [r4, #16]
 800759a:	f8cd a000 	str.w	sl, [sp]
 800759e:	464b      	mov	r3, r9
 80075a0:	aa03      	add	r2, sp, #12
 80075a2:	4621      	mov	r1, r4
 80075a4:	4640      	mov	r0, r8
 80075a6:	f7ff fee7 	bl	8007378 <_printf_common>
 80075aa:	3001      	adds	r0, #1
 80075ac:	d14a      	bne.n	8007644 <_printf_i+0x1f0>
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	b004      	add	sp, #16
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	f043 0320 	orr.w	r3, r3, #32
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	4832      	ldr	r0, [pc, #200]	@ (800768c <_printf_i+0x238>)
 80075c2:	2778      	movs	r7, #120	@ 0x78
 80075c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	6831      	ldr	r1, [r6, #0]
 80075cc:	061f      	lsls	r7, r3, #24
 80075ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80075d2:	d402      	bmi.n	80075da <_printf_i+0x186>
 80075d4:	065f      	lsls	r7, r3, #25
 80075d6:	bf48      	it	mi
 80075d8:	b2ad      	uxthmi	r5, r5
 80075da:	6031      	str	r1, [r6, #0]
 80075dc:	07d9      	lsls	r1, r3, #31
 80075de:	bf44      	itt	mi
 80075e0:	f043 0320 	orrmi.w	r3, r3, #32
 80075e4:	6023      	strmi	r3, [r4, #0]
 80075e6:	b11d      	cbz	r5, 80075f0 <_printf_i+0x19c>
 80075e8:	2310      	movs	r3, #16
 80075ea:	e7ad      	b.n	8007548 <_printf_i+0xf4>
 80075ec:	4826      	ldr	r0, [pc, #152]	@ (8007688 <_printf_i+0x234>)
 80075ee:	e7e9      	b.n	80075c4 <_printf_i+0x170>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	f023 0320 	bic.w	r3, r3, #32
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	e7f6      	b.n	80075e8 <_printf_i+0x194>
 80075fa:	4616      	mov	r6, r2
 80075fc:	e7bd      	b.n	800757a <_printf_i+0x126>
 80075fe:	6833      	ldr	r3, [r6, #0]
 8007600:	6825      	ldr	r5, [r4, #0]
 8007602:	6961      	ldr	r1, [r4, #20]
 8007604:	1d18      	adds	r0, r3, #4
 8007606:	6030      	str	r0, [r6, #0]
 8007608:	062e      	lsls	r6, r5, #24
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	d501      	bpl.n	8007612 <_printf_i+0x1be>
 800760e:	6019      	str	r1, [r3, #0]
 8007610:	e002      	b.n	8007618 <_printf_i+0x1c4>
 8007612:	0668      	lsls	r0, r5, #25
 8007614:	d5fb      	bpl.n	800760e <_printf_i+0x1ba>
 8007616:	8019      	strh	r1, [r3, #0]
 8007618:	2300      	movs	r3, #0
 800761a:	6123      	str	r3, [r4, #16]
 800761c:	4616      	mov	r6, r2
 800761e:	e7bc      	b.n	800759a <_printf_i+0x146>
 8007620:	6833      	ldr	r3, [r6, #0]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	6032      	str	r2, [r6, #0]
 8007626:	681e      	ldr	r6, [r3, #0]
 8007628:	6862      	ldr	r2, [r4, #4]
 800762a:	2100      	movs	r1, #0
 800762c:	4630      	mov	r0, r6
 800762e:	f7f8 fdd7 	bl	80001e0 <memchr>
 8007632:	b108      	cbz	r0, 8007638 <_printf_i+0x1e4>
 8007634:	1b80      	subs	r0, r0, r6
 8007636:	6060      	str	r0, [r4, #4]
 8007638:	6863      	ldr	r3, [r4, #4]
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	2300      	movs	r3, #0
 800763e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007642:	e7aa      	b.n	800759a <_printf_i+0x146>
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	4632      	mov	r2, r6
 8007648:	4649      	mov	r1, r9
 800764a:	4640      	mov	r0, r8
 800764c:	47d0      	blx	sl
 800764e:	3001      	adds	r0, #1
 8007650:	d0ad      	beq.n	80075ae <_printf_i+0x15a>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	079b      	lsls	r3, r3, #30
 8007656:	d413      	bmi.n	8007680 <_printf_i+0x22c>
 8007658:	68e0      	ldr	r0, [r4, #12]
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	4298      	cmp	r0, r3
 800765e:	bfb8      	it	lt
 8007660:	4618      	movlt	r0, r3
 8007662:	e7a6      	b.n	80075b2 <_printf_i+0x15e>
 8007664:	2301      	movs	r3, #1
 8007666:	4632      	mov	r2, r6
 8007668:	4649      	mov	r1, r9
 800766a:	4640      	mov	r0, r8
 800766c:	47d0      	blx	sl
 800766e:	3001      	adds	r0, #1
 8007670:	d09d      	beq.n	80075ae <_printf_i+0x15a>
 8007672:	3501      	adds	r5, #1
 8007674:	68e3      	ldr	r3, [r4, #12]
 8007676:	9903      	ldr	r1, [sp, #12]
 8007678:	1a5b      	subs	r3, r3, r1
 800767a:	42ab      	cmp	r3, r5
 800767c:	dcf2      	bgt.n	8007664 <_printf_i+0x210>
 800767e:	e7eb      	b.n	8007658 <_printf_i+0x204>
 8007680:	2500      	movs	r5, #0
 8007682:	f104 0619 	add.w	r6, r4, #25
 8007686:	e7f5      	b.n	8007674 <_printf_i+0x220>
 8007688:	08009ff6 	.word	0x08009ff6
 800768c:	0800a007 	.word	0x0800a007

08007690 <std>:
 8007690:	2300      	movs	r3, #0
 8007692:	b510      	push	{r4, lr}
 8007694:	4604      	mov	r4, r0
 8007696:	e9c0 3300 	strd	r3, r3, [r0]
 800769a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800769e:	6083      	str	r3, [r0, #8]
 80076a0:	8181      	strh	r1, [r0, #12]
 80076a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076a4:	81c2      	strh	r2, [r0, #14]
 80076a6:	6183      	str	r3, [r0, #24]
 80076a8:	4619      	mov	r1, r3
 80076aa:	2208      	movs	r2, #8
 80076ac:	305c      	adds	r0, #92	@ 0x5c
 80076ae:	f000 f916 	bl	80078de <memset>
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <std+0x58>)
 80076b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x5c>)
 80076b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x60>)
 80076bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x64>)
 80076c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x68>)
 80076c4:	6224      	str	r4, [r4, #32]
 80076c6:	429c      	cmp	r4, r3
 80076c8:	d006      	beq.n	80076d8 <std+0x48>
 80076ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076ce:	4294      	cmp	r4, r2
 80076d0:	d002      	beq.n	80076d8 <std+0x48>
 80076d2:	33d0      	adds	r3, #208	@ 0xd0
 80076d4:	429c      	cmp	r4, r3
 80076d6:	d105      	bne.n	80076e4 <std+0x54>
 80076d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e0:	f000 b97a 	b.w	80079d8 <__retarget_lock_init_recursive>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop
 80076e8:	08007859 	.word	0x08007859
 80076ec:	0800787b 	.word	0x0800787b
 80076f0:	080078b3 	.word	0x080078b3
 80076f4:	080078d7 	.word	0x080078d7
 80076f8:	200005e8 	.word	0x200005e8

080076fc <stdio_exit_handler>:
 80076fc:	4a02      	ldr	r2, [pc, #8]	@ (8007708 <stdio_exit_handler+0xc>)
 80076fe:	4903      	ldr	r1, [pc, #12]	@ (800770c <stdio_exit_handler+0x10>)
 8007700:	4803      	ldr	r0, [pc, #12]	@ (8007710 <stdio_exit_handler+0x14>)
 8007702:	f000 b869 	b.w	80077d8 <_fwalk_sglue>
 8007706:	bf00      	nop
 8007708:	20000014 	.word	0x20000014
 800770c:	0800933d 	.word	0x0800933d
 8007710:	20000024 	.word	0x20000024

08007714 <cleanup_stdio>:
 8007714:	6841      	ldr	r1, [r0, #4]
 8007716:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <cleanup_stdio+0x34>)
 8007718:	4299      	cmp	r1, r3
 800771a:	b510      	push	{r4, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	d001      	beq.n	8007724 <cleanup_stdio+0x10>
 8007720:	f001 fe0c 	bl	800933c <_fflush_r>
 8007724:	68a1      	ldr	r1, [r4, #8]
 8007726:	4b09      	ldr	r3, [pc, #36]	@ (800774c <cleanup_stdio+0x38>)
 8007728:	4299      	cmp	r1, r3
 800772a:	d002      	beq.n	8007732 <cleanup_stdio+0x1e>
 800772c:	4620      	mov	r0, r4
 800772e:	f001 fe05 	bl	800933c <_fflush_r>
 8007732:	68e1      	ldr	r1, [r4, #12]
 8007734:	4b06      	ldr	r3, [pc, #24]	@ (8007750 <cleanup_stdio+0x3c>)
 8007736:	4299      	cmp	r1, r3
 8007738:	d004      	beq.n	8007744 <cleanup_stdio+0x30>
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	f001 bdfc 	b.w	800933c <_fflush_r>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	200005e8 	.word	0x200005e8
 800774c:	20000650 	.word	0x20000650
 8007750:	200006b8 	.word	0x200006b8

08007754 <global_stdio_init.part.0>:
 8007754:	b510      	push	{r4, lr}
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <global_stdio_init.part.0+0x30>)
 8007758:	4c0b      	ldr	r4, [pc, #44]	@ (8007788 <global_stdio_init.part.0+0x34>)
 800775a:	4a0c      	ldr	r2, [pc, #48]	@ (800778c <global_stdio_init.part.0+0x38>)
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	4620      	mov	r0, r4
 8007760:	2200      	movs	r2, #0
 8007762:	2104      	movs	r1, #4
 8007764:	f7ff ff94 	bl	8007690 <std>
 8007768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800776c:	2201      	movs	r2, #1
 800776e:	2109      	movs	r1, #9
 8007770:	f7ff ff8e 	bl	8007690 <std>
 8007774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007778:	2202      	movs	r2, #2
 800777a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777e:	2112      	movs	r1, #18
 8007780:	f7ff bf86 	b.w	8007690 <std>
 8007784:	20000720 	.word	0x20000720
 8007788:	200005e8 	.word	0x200005e8
 800778c:	080076fd 	.word	0x080076fd

08007790 <__sfp_lock_acquire>:
 8007790:	4801      	ldr	r0, [pc, #4]	@ (8007798 <__sfp_lock_acquire+0x8>)
 8007792:	f000 b922 	b.w	80079da <__retarget_lock_acquire_recursive>
 8007796:	bf00      	nop
 8007798:	20000729 	.word	0x20000729

0800779c <__sfp_lock_release>:
 800779c:	4801      	ldr	r0, [pc, #4]	@ (80077a4 <__sfp_lock_release+0x8>)
 800779e:	f000 b91d 	b.w	80079dc <__retarget_lock_release_recursive>
 80077a2:	bf00      	nop
 80077a4:	20000729 	.word	0x20000729

080077a8 <__sinit>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	4604      	mov	r4, r0
 80077ac:	f7ff fff0 	bl	8007790 <__sfp_lock_acquire>
 80077b0:	6a23      	ldr	r3, [r4, #32]
 80077b2:	b11b      	cbz	r3, 80077bc <__sinit+0x14>
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f7ff bff0 	b.w	800779c <__sfp_lock_release>
 80077bc:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <__sinit+0x28>)
 80077be:	6223      	str	r3, [r4, #32]
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__sinit+0x2c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f5      	bne.n	80077b4 <__sinit+0xc>
 80077c8:	f7ff ffc4 	bl	8007754 <global_stdio_init.part.0>
 80077cc:	e7f2      	b.n	80077b4 <__sinit+0xc>
 80077ce:	bf00      	nop
 80077d0:	08007715 	.word	0x08007715
 80077d4:	20000720 	.word	0x20000720

080077d8 <_fwalk_sglue>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4607      	mov	r7, r0
 80077de:	4688      	mov	r8, r1
 80077e0:	4614      	mov	r4, r2
 80077e2:	2600      	movs	r6, #0
 80077e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e8:	f1b9 0901 	subs.w	r9, r9, #1
 80077ec:	d505      	bpl.n	80077fa <_fwalk_sglue+0x22>
 80077ee:	6824      	ldr	r4, [r4, #0]
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d1f7      	bne.n	80077e4 <_fwalk_sglue+0xc>
 80077f4:	4630      	mov	r0, r6
 80077f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fa:	89ab      	ldrh	r3, [r5, #12]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d907      	bls.n	8007810 <_fwalk_sglue+0x38>
 8007800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007804:	3301      	adds	r3, #1
 8007806:	d003      	beq.n	8007810 <_fwalk_sglue+0x38>
 8007808:	4629      	mov	r1, r5
 800780a:	4638      	mov	r0, r7
 800780c:	47c0      	blx	r8
 800780e:	4306      	orrs	r6, r0
 8007810:	3568      	adds	r5, #104	@ 0x68
 8007812:	e7e9      	b.n	80077e8 <_fwalk_sglue+0x10>

08007814 <siprintf>:
 8007814:	b40e      	push	{r1, r2, r3}
 8007816:	b510      	push	{r4, lr}
 8007818:	b09d      	sub	sp, #116	@ 0x74
 800781a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800781c:	9002      	str	r0, [sp, #8]
 800781e:	9006      	str	r0, [sp, #24]
 8007820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007824:	480a      	ldr	r0, [pc, #40]	@ (8007850 <siprintf+0x3c>)
 8007826:	9107      	str	r1, [sp, #28]
 8007828:	9104      	str	r1, [sp, #16]
 800782a:	490a      	ldr	r1, [pc, #40]	@ (8007854 <siprintf+0x40>)
 800782c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007830:	9105      	str	r1, [sp, #20]
 8007832:	2400      	movs	r4, #0
 8007834:	a902      	add	r1, sp, #8
 8007836:	6800      	ldr	r0, [r0, #0]
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800783c:	f001 fbfe 	bl	800903c <_svfiprintf_r>
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	701c      	strb	r4, [r3, #0]
 8007844:	b01d      	add	sp, #116	@ 0x74
 8007846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784a:	b003      	add	sp, #12
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000020 	.word	0x20000020
 8007854:	ffff0208 	.word	0xffff0208

08007858 <__sread>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	f000 f86c 	bl	800793c <_read_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	bfab      	itete	ge
 8007868:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800786a:	89a3      	ldrhlt	r3, [r4, #12]
 800786c:	181b      	addge	r3, r3, r0
 800786e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007872:	bfac      	ite	ge
 8007874:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007876:	81a3      	strhlt	r3, [r4, #12]
 8007878:	bd10      	pop	{r4, pc}

0800787a <__swrite>:
 800787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	05db      	lsls	r3, r3, #23
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	4616      	mov	r6, r2
 800788a:	d505      	bpl.n	8007898 <__swrite+0x1e>
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	2302      	movs	r3, #2
 8007892:	2200      	movs	r2, #0
 8007894:	f000 f840 	bl	8007918 <_lseek_r>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	f000 b857 	b.w	8007960 <_write_r>

080078b2 <__sseek>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 f82d 	bl	8007918 <_lseek_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	bf15      	itete	ne
 80078c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ce:	81a3      	strheq	r3, [r4, #12]
 80078d0:	bf18      	it	ne
 80078d2:	81a3      	strhne	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__sclose>:
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 b80d 	b.w	80078f8 <_close_r>

080078de <memset>:
 80078de:	4402      	add	r2, r0
 80078e0:	4603      	mov	r3, r0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d100      	bne.n	80078e8 <memset+0xa>
 80078e6:	4770      	bx	lr
 80078e8:	f803 1b01 	strb.w	r1, [r3], #1
 80078ec:	e7f9      	b.n	80078e2 <memset+0x4>
	...

080078f0 <_localeconv_r>:
 80078f0:	4800      	ldr	r0, [pc, #0]	@ (80078f4 <_localeconv_r+0x4>)
 80078f2:	4770      	bx	lr
 80078f4:	20000160 	.word	0x20000160

080078f8 <_close_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d06      	ldr	r5, [pc, #24]	@ (8007914 <_close_r+0x1c>)
 80078fc:	2300      	movs	r3, #0
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	f7fb fdc2 	bl	800348c <_close>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_close_r+0x1a>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_close_r+0x1a>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20000724 	.word	0x20000724

08007918 <_lseek_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	@ (8007938 <_lseek_r+0x20>)
 800791c:	4604      	mov	r4, r0
 800791e:	4608      	mov	r0, r1
 8007920:	4611      	mov	r1, r2
 8007922:	2200      	movs	r2, #0
 8007924:	602a      	str	r2, [r5, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f7fb fdd7 	bl	80034da <_lseek>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_lseek_r+0x1e>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_lseek_r+0x1e>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20000724 	.word	0x20000724

0800793c <_read_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	@ (800795c <_read_r+0x20>)
 8007940:	4604      	mov	r4, r0
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	2200      	movs	r2, #0
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	f7fb fd65 	bl	800341a <_read>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_read_r+0x1e>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_read_r+0x1e>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000724 	.word	0x20000724

08007960 <_write_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	@ (8007980 <_write_r+0x20>)
 8007964:	4604      	mov	r4, r0
 8007966:	4608      	mov	r0, r1
 8007968:	4611      	mov	r1, r2
 800796a:	2200      	movs	r2, #0
 800796c:	602a      	str	r2, [r5, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	f7fb fd70 	bl	8003454 <_write>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_write_r+0x1e>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_write_r+0x1e>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000724 	.word	0x20000724

08007984 <__errno>:
 8007984:	4b01      	ldr	r3, [pc, #4]	@ (800798c <__errno+0x8>)
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000020 	.word	0x20000020

08007990 <__libc_init_array>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	4d0d      	ldr	r5, [pc, #52]	@ (80079c8 <__libc_init_array+0x38>)
 8007994:	4c0d      	ldr	r4, [pc, #52]	@ (80079cc <__libc_init_array+0x3c>)
 8007996:	1b64      	subs	r4, r4, r5
 8007998:	10a4      	asrs	r4, r4, #2
 800799a:	2600      	movs	r6, #0
 800799c:	42a6      	cmp	r6, r4
 800799e:	d109      	bne.n	80079b4 <__libc_init_array+0x24>
 80079a0:	4d0b      	ldr	r5, [pc, #44]	@ (80079d0 <__libc_init_array+0x40>)
 80079a2:	4c0c      	ldr	r4, [pc, #48]	@ (80079d4 <__libc_init_array+0x44>)
 80079a4:	f002 f868 	bl	8009a78 <_init>
 80079a8:	1b64      	subs	r4, r4, r5
 80079aa:	10a4      	asrs	r4, r4, #2
 80079ac:	2600      	movs	r6, #0
 80079ae:	42a6      	cmp	r6, r4
 80079b0:	d105      	bne.n	80079be <__libc_init_array+0x2e>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b8:	4798      	blx	r3
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7ee      	b.n	800799c <__libc_init_array+0xc>
 80079be:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c2:	4798      	blx	r3
 80079c4:	3601      	adds	r6, #1
 80079c6:	e7f2      	b.n	80079ae <__libc_init_array+0x1e>
 80079c8:	0800a364 	.word	0x0800a364
 80079cc:	0800a364 	.word	0x0800a364
 80079d0:	0800a364 	.word	0x0800a364
 80079d4:	0800a368 	.word	0x0800a368

080079d8 <__retarget_lock_init_recursive>:
 80079d8:	4770      	bx	lr

080079da <__retarget_lock_acquire_recursive>:
 80079da:	4770      	bx	lr

080079dc <__retarget_lock_release_recursive>:
 80079dc:	4770      	bx	lr

080079de <quorem>:
 80079de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e2:	6903      	ldr	r3, [r0, #16]
 80079e4:	690c      	ldr	r4, [r1, #16]
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	4607      	mov	r7, r0
 80079ea:	db7e      	blt.n	8007aea <quorem+0x10c>
 80079ec:	3c01      	subs	r4, #1
 80079ee:	f101 0814 	add.w	r8, r1, #20
 80079f2:	00a3      	lsls	r3, r4, #2
 80079f4:	f100 0514 	add.w	r5, r0, #20
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a14:	d32e      	bcc.n	8007a74 <quorem+0x96>
 8007a16:	f04f 0a00 	mov.w	sl, #0
 8007a1a:	46c4      	mov	ip, r8
 8007a1c:	46ae      	mov	lr, r5
 8007a1e:	46d3      	mov	fp, sl
 8007a20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a24:	b298      	uxth	r0, r3
 8007a26:	fb06 a000 	mla	r0, r6, r0, sl
 8007a2a:	0c02      	lsrs	r2, r0, #16
 8007a2c:	0c1b      	lsrs	r3, r3, #16
 8007a2e:	fb06 2303 	mla	r3, r6, r3, r2
 8007a32:	f8de 2000 	ldr.w	r2, [lr]
 8007a36:	b280      	uxth	r0, r0
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	1a12      	subs	r2, r2, r0
 8007a3c:	445a      	add	r2, fp
 8007a3e:	f8de 0000 	ldr.w	r0, [lr]
 8007a42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a50:	b292      	uxth	r2, r2
 8007a52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a56:	45e1      	cmp	r9, ip
 8007a58:	f84e 2b04 	str.w	r2, [lr], #4
 8007a5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a60:	d2de      	bcs.n	8007a20 <quorem+0x42>
 8007a62:	9b00      	ldr	r3, [sp, #0]
 8007a64:	58eb      	ldr	r3, [r5, r3]
 8007a66:	b92b      	cbnz	r3, 8007a74 <quorem+0x96>
 8007a68:	9b01      	ldr	r3, [sp, #4]
 8007a6a:	3b04      	subs	r3, #4
 8007a6c:	429d      	cmp	r5, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	d32f      	bcc.n	8007ad2 <quorem+0xf4>
 8007a72:	613c      	str	r4, [r7, #16]
 8007a74:	4638      	mov	r0, r7
 8007a76:	f001 f97d 	bl	8008d74 <__mcmp>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	db25      	blt.n	8007aca <quorem+0xec>
 8007a7e:	4629      	mov	r1, r5
 8007a80:	2000      	movs	r0, #0
 8007a82:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a86:	f8d1 c000 	ldr.w	ip, [r1]
 8007a8a:	fa1f fe82 	uxth.w	lr, r2
 8007a8e:	fa1f f38c 	uxth.w	r3, ip
 8007a92:	eba3 030e 	sub.w	r3, r3, lr
 8007a96:	4403      	add	r3, r0
 8007a98:	0c12      	lsrs	r2, r2, #16
 8007a9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa8:	45c1      	cmp	r9, r8
 8007aaa:	f841 3b04 	str.w	r3, [r1], #4
 8007aae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ab2:	d2e6      	bcs.n	8007a82 <quorem+0xa4>
 8007ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007abc:	b922      	cbnz	r2, 8007ac8 <quorem+0xea>
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	429d      	cmp	r5, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	d30b      	bcc.n	8007ade <quorem+0x100>
 8007ac6:	613c      	str	r4, [r7, #16]
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4630      	mov	r0, r6
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	6812      	ldr	r2, [r2, #0]
 8007ad4:	3b04      	subs	r3, #4
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	d1cb      	bne.n	8007a72 <quorem+0x94>
 8007ada:	3c01      	subs	r4, #1
 8007adc:	e7c6      	b.n	8007a6c <quorem+0x8e>
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	3b04      	subs	r3, #4
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d1ef      	bne.n	8007ac6 <quorem+0xe8>
 8007ae6:	3c01      	subs	r4, #1
 8007ae8:	e7ea      	b.n	8007ac0 <quorem+0xe2>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7ee      	b.n	8007acc <quorem+0xee>
	...

08007af0 <_dtoa_r>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	69c7      	ldr	r7, [r0, #28]
 8007af6:	b097      	sub	sp, #92	@ 0x5c
 8007af8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007afc:	ec55 4b10 	vmov	r4, r5, d0
 8007b00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007b02:	9107      	str	r1, [sp, #28]
 8007b04:	4681      	mov	r9, r0
 8007b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b08:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b0a:	b97f      	cbnz	r7, 8007b2c <_dtoa_r+0x3c>
 8007b0c:	2010      	movs	r0, #16
 8007b0e:	f000 fe09 	bl	8008724 <malloc>
 8007b12:	4602      	mov	r2, r0
 8007b14:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b18:	b920      	cbnz	r0, 8007b24 <_dtoa_r+0x34>
 8007b1a:	4ba9      	ldr	r3, [pc, #676]	@ (8007dc0 <_dtoa_r+0x2d0>)
 8007b1c:	21ef      	movs	r1, #239	@ 0xef
 8007b1e:	48a9      	ldr	r0, [pc, #676]	@ (8007dc4 <_dtoa_r+0x2d4>)
 8007b20:	f001 fc6c 	bl	80093fc <__assert_func>
 8007b24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b28:	6007      	str	r7, [r0, #0]
 8007b2a:	60c7      	str	r7, [r0, #12]
 8007b2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	b159      	cbz	r1, 8007b4c <_dtoa_r+0x5c>
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	604a      	str	r2, [r1, #4]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4093      	lsls	r3, r2
 8007b3c:	608b      	str	r3, [r1, #8]
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f000 fee6 	bl	8008910 <_Bfree>
 8007b44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	1e2b      	subs	r3, r5, #0
 8007b4e:	bfb9      	ittee	lt
 8007b50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b54:	9305      	strlt	r3, [sp, #20]
 8007b56:	2300      	movge	r3, #0
 8007b58:	6033      	strge	r3, [r6, #0]
 8007b5a:	9f05      	ldr	r7, [sp, #20]
 8007b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8007dc8 <_dtoa_r+0x2d8>)
 8007b5e:	bfbc      	itt	lt
 8007b60:	2201      	movlt	r2, #1
 8007b62:	6032      	strlt	r2, [r6, #0]
 8007b64:	43bb      	bics	r3, r7
 8007b66:	d112      	bne.n	8007b8e <_dtoa_r+0x9e>
 8007b68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b74:	4323      	orrs	r3, r4
 8007b76:	f000 855a 	beq.w	800862e <_dtoa_r+0xb3e>
 8007b7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ddc <_dtoa_r+0x2ec>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 855c 	beq.w	800863e <_dtoa_r+0xb4e>
 8007b86:	f10a 0303 	add.w	r3, sl, #3
 8007b8a:	f000 bd56 	b.w	800863a <_dtoa_r+0xb4a>
 8007b8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007b92:	2200      	movs	r2, #0
 8007b94:	ec51 0b17 	vmov	r0, r1, d7
 8007b98:	2300      	movs	r3, #0
 8007b9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007b9e:	f7f8 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	b158      	cbz	r0, 8007bbe <_dtoa_r+0xce>
 8007ba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ba8:	2301      	movs	r3, #1
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bae:	b113      	cbz	r3, 8007bb6 <_dtoa_r+0xc6>
 8007bb0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007bb2:	4b86      	ldr	r3, [pc, #536]	@ (8007dcc <_dtoa_r+0x2dc>)
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007de0 <_dtoa_r+0x2f0>
 8007bba:	f000 bd40 	b.w	800863e <_dtoa_r+0xb4e>
 8007bbe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007bc2:	aa14      	add	r2, sp, #80	@ 0x50
 8007bc4:	a915      	add	r1, sp, #84	@ 0x54
 8007bc6:	4648      	mov	r0, r9
 8007bc8:	f001 f984 	bl	8008ed4 <__d2b>
 8007bcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007bd0:	9002      	str	r0, [sp, #8]
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	d078      	beq.n	8007cc8 <_dtoa_r+0x1d8>
 8007bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007be4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007be8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4b76      	ldr	r3, [pc, #472]	@ (8007dd0 <_dtoa_r+0x2e0>)
 8007bf6:	f7f8 fb4f 	bl	8000298 <__aeabi_dsub>
 8007bfa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007da8 <_dtoa_r+0x2b8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fd02 	bl	8000608 <__aeabi_dmul>
 8007c04:	a36a      	add	r3, pc, #424	@ (adr r3, 8007db0 <_dtoa_r+0x2c0>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb47 	bl	800029c <__adddf3>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4630      	mov	r0, r6
 8007c12:	460d      	mov	r5, r1
 8007c14:	f7f8 fc8e 	bl	8000534 <__aeabi_i2d>
 8007c18:	a367      	add	r3, pc, #412	@ (adr r3, 8007db8 <_dtoa_r+0x2c8>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fcf3 	bl	8000608 <__aeabi_dmul>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 fb37 	bl	800029c <__adddf3>
 8007c2e:	4604      	mov	r4, r0
 8007c30:	460d      	mov	r5, r1
 8007c32:	f7f8 ff99 	bl	8000b68 <__aeabi_d2iz>
 8007c36:	2200      	movs	r2, #0
 8007c38:	4607      	mov	r7, r0
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 ff54 	bl	8000aec <__aeabi_dcmplt>
 8007c44:	b140      	cbz	r0, 8007c58 <_dtoa_r+0x168>
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7f8 fc74 	bl	8000534 <__aeabi_i2d>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f7f8 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c54:	b900      	cbnz	r0, 8007c58 <_dtoa_r+0x168>
 8007c56:	3f01      	subs	r7, #1
 8007c58:	2f16      	cmp	r7, #22
 8007c5a:	d852      	bhi.n	8007d02 <_dtoa_r+0x212>
 8007c5c:	4b5d      	ldr	r3, [pc, #372]	@ (8007dd4 <_dtoa_r+0x2e4>)
 8007c5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c6a:	f7f8 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d049      	beq.n	8007d06 <_dtoa_r+0x216>
 8007c72:	3f01      	subs	r7, #1
 8007c74:	2300      	movs	r3, #0
 8007c76:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c7a:	1b9b      	subs	r3, r3, r6
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	bf45      	ittet	mi
 8007c80:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c84:	9300      	strmi	r3, [sp, #0]
 8007c86:	2300      	movpl	r3, #0
 8007c88:	2300      	movmi	r3, #0
 8007c8a:	9206      	str	r2, [sp, #24]
 8007c8c:	bf54      	ite	pl
 8007c8e:	9300      	strpl	r3, [sp, #0]
 8007c90:	9306      	strmi	r3, [sp, #24]
 8007c92:	2f00      	cmp	r7, #0
 8007c94:	db39      	blt.n	8007d0a <_dtoa_r+0x21a>
 8007c96:	9b06      	ldr	r3, [sp, #24]
 8007c98:	970d      	str	r7, [sp, #52]	@ 0x34
 8007c9a:	443b      	add	r3, r7
 8007c9c:	9306      	str	r3, [sp, #24]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d863      	bhi.n	8007d70 <_dtoa_r+0x280>
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	bfc4      	itt	gt
 8007cac:	3b04      	subgt	r3, #4
 8007cae:	9307      	strgt	r3, [sp, #28]
 8007cb0:	9b07      	ldr	r3, [sp, #28]
 8007cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8007cb6:	bfcc      	ite	gt
 8007cb8:	2400      	movgt	r4, #0
 8007cba:	2401      	movle	r4, #1
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d863      	bhi.n	8007d88 <_dtoa_r+0x298>
 8007cc0:	e8df f003 	tbb	[pc, r3]
 8007cc4:	2b375452 	.word	0x2b375452
 8007cc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ccc:	441e      	add	r6, r3
 8007cce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	bfc1      	itttt	gt
 8007cd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cda:	409f      	lslgt	r7, r3
 8007cdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ce0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ce4:	bfd6      	itet	le
 8007ce6:	f1c3 0320 	rsble	r3, r3, #32
 8007cea:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cee:	fa04 f003 	lslle.w	r0, r4, r3
 8007cf2:	f7f8 fc0f 	bl	8000514 <__aeabi_ui2d>
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cfc:	3e01      	subs	r6, #1
 8007cfe:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d00:	e776      	b.n	8007bf0 <_dtoa_r+0x100>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e7b7      	b.n	8007c76 <_dtoa_r+0x186>
 8007d06:	9010      	str	r0, [sp, #64]	@ 0x40
 8007d08:	e7b6      	b.n	8007c78 <_dtoa_r+0x188>
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	1bdb      	subs	r3, r3, r7
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	427b      	negs	r3, r7
 8007d12:	9308      	str	r3, [sp, #32]
 8007d14:	2300      	movs	r3, #0
 8007d16:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d18:	e7c3      	b.n	8007ca2 <_dtoa_r+0x1b2>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d20:	eb07 0b03 	add.w	fp, r7, r3
 8007d24:	f10b 0301 	add.w	r3, fp, #1
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	bfb8      	it	lt
 8007d2e:	2301      	movlt	r3, #1
 8007d30:	e006      	b.n	8007d40 <_dtoa_r+0x250>
 8007d32:	2301      	movs	r3, #1
 8007d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dd28      	ble.n	8007d8e <_dtoa_r+0x29e>
 8007d3c:	469b      	mov	fp, r3
 8007d3e:	9303      	str	r3, [sp, #12]
 8007d40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007d44:	2100      	movs	r1, #0
 8007d46:	2204      	movs	r2, #4
 8007d48:	f102 0514 	add.w	r5, r2, #20
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	d926      	bls.n	8007d9e <_dtoa_r+0x2ae>
 8007d50:	6041      	str	r1, [r0, #4]
 8007d52:	4648      	mov	r0, r9
 8007d54:	f000 fd9c 	bl	8008890 <_Balloc>
 8007d58:	4682      	mov	sl, r0
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d142      	bne.n	8007de4 <_dtoa_r+0x2f4>
 8007d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd8 <_dtoa_r+0x2e8>)
 8007d60:	4602      	mov	r2, r0
 8007d62:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d66:	e6da      	b.n	8007b1e <_dtoa_r+0x2e>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e7e3      	b.n	8007d34 <_dtoa_r+0x244>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e7d5      	b.n	8007d1c <_dtoa_r+0x22c>
 8007d70:	2401      	movs	r4, #1
 8007d72:	2300      	movs	r3, #0
 8007d74:	9307      	str	r3, [sp, #28]
 8007d76:	9409      	str	r4, [sp, #36]	@ 0x24
 8007d78:	f04f 3bff 	mov.w	fp, #4294967295
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d82:	2312      	movs	r3, #18
 8007d84:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d86:	e7db      	b.n	8007d40 <_dtoa_r+0x250>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d8c:	e7f4      	b.n	8007d78 <_dtoa_r+0x288>
 8007d8e:	f04f 0b01 	mov.w	fp, #1
 8007d92:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d96:	465b      	mov	r3, fp
 8007d98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007d9c:	e7d0      	b.n	8007d40 <_dtoa_r+0x250>
 8007d9e:	3101      	adds	r1, #1
 8007da0:	0052      	lsls	r2, r2, #1
 8007da2:	e7d1      	b.n	8007d48 <_dtoa_r+0x258>
 8007da4:	f3af 8000 	nop.w
 8007da8:	636f4361 	.word	0x636f4361
 8007dac:	3fd287a7 	.word	0x3fd287a7
 8007db0:	8b60c8b3 	.word	0x8b60c8b3
 8007db4:	3fc68a28 	.word	0x3fc68a28
 8007db8:	509f79fb 	.word	0x509f79fb
 8007dbc:	3fd34413 	.word	0x3fd34413
 8007dc0:	0800a025 	.word	0x0800a025
 8007dc4:	0800a03c 	.word	0x0800a03c
 8007dc8:	7ff00000 	.word	0x7ff00000
 8007dcc:	08009ff5 	.word	0x08009ff5
 8007dd0:	3ff80000 	.word	0x3ff80000
 8007dd4:	0800a190 	.word	0x0800a190
 8007dd8:	0800a094 	.word	0x0800a094
 8007ddc:	0800a021 	.word	0x0800a021
 8007de0:	08009ff4 	.word	0x08009ff4
 8007de4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007de8:	6018      	str	r0, [r3, #0]
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	2b0e      	cmp	r3, #14
 8007dee:	f200 80a1 	bhi.w	8007f34 <_dtoa_r+0x444>
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	f000 809e 	beq.w	8007f34 <_dtoa_r+0x444>
 8007df8:	2f00      	cmp	r7, #0
 8007dfa:	dd33      	ble.n	8007e64 <_dtoa_r+0x374>
 8007dfc:	4b9c      	ldr	r3, [pc, #624]	@ (8008070 <_dtoa_r+0x580>)
 8007dfe:	f007 020f 	and.w	r2, r7, #15
 8007e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e06:	ed93 7b00 	vldr	d7, [r3]
 8007e0a:	05f8      	lsls	r0, r7, #23
 8007e0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007e10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e14:	d516      	bpl.n	8007e44 <_dtoa_r+0x354>
 8007e16:	4b97      	ldr	r3, [pc, #604]	@ (8008074 <_dtoa_r+0x584>)
 8007e18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e20:	f7f8 fd1c 	bl	800085c <__aeabi_ddiv>
 8007e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e28:	f004 040f 	and.w	r4, r4, #15
 8007e2c:	2603      	movs	r6, #3
 8007e2e:	4d91      	ldr	r5, [pc, #580]	@ (8008074 <_dtoa_r+0x584>)
 8007e30:	b954      	cbnz	r4, 8007e48 <_dtoa_r+0x358>
 8007e32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e3a:	f7f8 fd0f 	bl	800085c <__aeabi_ddiv>
 8007e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e42:	e028      	b.n	8007e96 <_dtoa_r+0x3a6>
 8007e44:	2602      	movs	r6, #2
 8007e46:	e7f2      	b.n	8007e2e <_dtoa_r+0x33e>
 8007e48:	07e1      	lsls	r1, r4, #31
 8007e4a:	d508      	bpl.n	8007e5e <_dtoa_r+0x36e>
 8007e4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e54:	f7f8 fbd8 	bl	8000608 <__aeabi_dmul>
 8007e58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	1064      	asrs	r4, r4, #1
 8007e60:	3508      	adds	r5, #8
 8007e62:	e7e5      	b.n	8007e30 <_dtoa_r+0x340>
 8007e64:	f000 80af 	beq.w	8007fc6 <_dtoa_r+0x4d6>
 8007e68:	427c      	negs	r4, r7
 8007e6a:	4b81      	ldr	r3, [pc, #516]	@ (8008070 <_dtoa_r+0x580>)
 8007e6c:	4d81      	ldr	r5, [pc, #516]	@ (8008074 <_dtoa_r+0x584>)
 8007e6e:	f004 020f 	and.w	r2, r4, #15
 8007e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e86:	1124      	asrs	r4, r4, #4
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2602      	movs	r6, #2
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	f040 808f 	bne.w	8007fb0 <_dtoa_r+0x4c0>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d3      	bne.n	8007e3e <_dtoa_r+0x34e>
 8007e96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8094 	beq.w	8007fca <_dtoa_r+0x4da>
 8007ea2:	4b75      	ldr	r3, [pc, #468]	@ (8008078 <_dtoa_r+0x588>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fe1f 	bl	8000aec <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f000 808b 	beq.w	8007fca <_dtoa_r+0x4da>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8087 	beq.w	8007fca <_dtoa_r+0x4da>
 8007ebc:	f1bb 0f00 	cmp.w	fp, #0
 8007ec0:	dd34      	ble.n	8007f2c <_dtoa_r+0x43c>
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800807c <_dtoa_r+0x58c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ed2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	465c      	mov	r4, fp
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7f8 fb2a 	bl	8000534 <__aeabi_i2d>
 8007ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ee4:	f7f8 fb90 	bl	8000608 <__aeabi_dmul>
 8007ee8:	4b65      	ldr	r3, [pc, #404]	@ (8008080 <_dtoa_r+0x590>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	f7f8 f9d6 	bl	800029c <__adddf3>
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ef6:	2c00      	cmp	r4, #0
 8007ef8:	d16a      	bne.n	8007fd0 <_dtoa_r+0x4e0>
 8007efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007efe:	4b61      	ldr	r3, [pc, #388]	@ (8008084 <_dtoa_r+0x594>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	f7f8 f9c9 	bl	8000298 <__aeabi_dsub>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4633      	mov	r3, r6
 8007f12:	f7f8 fe09 	bl	8000b28 <__aeabi_dcmpgt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f040 8298 	bne.w	800844c <_dtoa_r+0x95c>
 8007f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f20:	462a      	mov	r2, r5
 8007f22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f26:	f7f8 fde1 	bl	8000aec <__aeabi_dcmplt>
 8007f2a:	bb38      	cbnz	r0, 8007f7c <_dtoa_r+0x48c>
 8007f2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007f30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f2c0 8157 	blt.w	80081ea <_dtoa_r+0x6fa>
 8007f3c:	2f0e      	cmp	r7, #14
 8007f3e:	f300 8154 	bgt.w	80081ea <_dtoa_r+0x6fa>
 8007f42:	4b4b      	ldr	r3, [pc, #300]	@ (8008070 <_dtoa_r+0x580>)
 8007f44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f48:	ed93 7b00 	vldr	d7, [r3]
 8007f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	ed8d 7b00 	vstr	d7, [sp]
 8007f54:	f280 80e5 	bge.w	8008122 <_dtoa_r+0x632>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f300 80e1 	bgt.w	8008122 <_dtoa_r+0x632>
 8007f60:	d10c      	bne.n	8007f7c <_dtoa_r+0x48c>
 8007f62:	4b48      	ldr	r3, [pc, #288]	@ (8008084 <_dtoa_r+0x594>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	ec51 0b17 	vmov	r0, r1, d7
 8007f6a:	f7f8 fb4d 	bl	8000608 <__aeabi_dmul>
 8007f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f72:	f7f8 fdcf 	bl	8000b14 <__aeabi_dcmpge>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f000 8266 	beq.w	8008448 <_dtoa_r+0x958>
 8007f7c:	2400      	movs	r4, #0
 8007f7e:	4625      	mov	r5, r4
 8007f80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f82:	4656      	mov	r6, sl
 8007f84:	ea6f 0803 	mvn.w	r8, r3
 8007f88:	2700      	movs	r7, #0
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fcbf 	bl	8008910 <_Bfree>
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	f000 80bd 	beq.w	8008112 <_dtoa_r+0x622>
 8007f98:	b12f      	cbz	r7, 8007fa6 <_dtoa_r+0x4b6>
 8007f9a:	42af      	cmp	r7, r5
 8007f9c:	d003      	beq.n	8007fa6 <_dtoa_r+0x4b6>
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	4648      	mov	r0, r9
 8007fa2:	f000 fcb5 	bl	8008910 <_Bfree>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4648      	mov	r0, r9
 8007faa:	f000 fcb1 	bl	8008910 <_Bfree>
 8007fae:	e0b0      	b.n	8008112 <_dtoa_r+0x622>
 8007fb0:	07e2      	lsls	r2, r4, #31
 8007fb2:	d505      	bpl.n	8007fc0 <_dtoa_r+0x4d0>
 8007fb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fb8:	f7f8 fb26 	bl	8000608 <__aeabi_dmul>
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	1064      	asrs	r4, r4, #1
 8007fc2:	3508      	adds	r5, #8
 8007fc4:	e762      	b.n	8007e8c <_dtoa_r+0x39c>
 8007fc6:	2602      	movs	r6, #2
 8007fc8:	e765      	b.n	8007e96 <_dtoa_r+0x3a6>
 8007fca:	9c03      	ldr	r4, [sp, #12]
 8007fcc:	46b8      	mov	r8, r7
 8007fce:	e784      	b.n	8007eda <_dtoa_r+0x3ea>
 8007fd0:	4b27      	ldr	r3, [pc, #156]	@ (8008070 <_dtoa_r+0x580>)
 8007fd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fdc:	4454      	add	r4, sl
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	d054      	beq.n	800808c <_dtoa_r+0x59c>
 8007fe2:	4929      	ldr	r1, [pc, #164]	@ (8008088 <_dtoa_r+0x598>)
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f7f8 fc39 	bl	800085c <__aeabi_ddiv>
 8007fea:	4633      	mov	r3, r6
 8007fec:	462a      	mov	r2, r5
 8007fee:	f7f8 f953 	bl	8000298 <__aeabi_dsub>
 8007ff2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ff6:	4656      	mov	r6, sl
 8007ff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ffc:	f7f8 fdb4 	bl	8000b68 <__aeabi_d2iz>
 8008000:	4605      	mov	r5, r0
 8008002:	f7f8 fa97 	bl	8000534 <__aeabi_i2d>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800800e:	f7f8 f943 	bl	8000298 <__aeabi_dsub>
 8008012:	3530      	adds	r5, #48	@ 0x30
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800801c:	f806 5b01 	strb.w	r5, [r6], #1
 8008020:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008024:	f7f8 fd62 	bl	8000aec <__aeabi_dcmplt>
 8008028:	2800      	cmp	r0, #0
 800802a:	d172      	bne.n	8008112 <_dtoa_r+0x622>
 800802c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008030:	4911      	ldr	r1, [pc, #68]	@ (8008078 <_dtoa_r+0x588>)
 8008032:	2000      	movs	r0, #0
 8008034:	f7f8 f930 	bl	8000298 <__aeabi_dsub>
 8008038:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800803c:	f7f8 fd56 	bl	8000aec <__aeabi_dcmplt>
 8008040:	2800      	cmp	r0, #0
 8008042:	f040 80b4 	bne.w	80081ae <_dtoa_r+0x6be>
 8008046:	42a6      	cmp	r6, r4
 8008048:	f43f af70 	beq.w	8007f2c <_dtoa_r+0x43c>
 800804c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008050:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <_dtoa_r+0x58c>)
 8008052:	2200      	movs	r2, #0
 8008054:	f7f8 fad8 	bl	8000608 <__aeabi_dmul>
 8008058:	4b08      	ldr	r3, [pc, #32]	@ (800807c <_dtoa_r+0x58c>)
 800805a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800805e:	2200      	movs	r2, #0
 8008060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008064:	f7f8 fad0 	bl	8000608 <__aeabi_dmul>
 8008068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800806c:	e7c4      	b.n	8007ff8 <_dtoa_r+0x508>
 800806e:	bf00      	nop
 8008070:	0800a190 	.word	0x0800a190
 8008074:	0800a168 	.word	0x0800a168
 8008078:	3ff00000 	.word	0x3ff00000
 800807c:	40240000 	.word	0x40240000
 8008080:	401c0000 	.word	0x401c0000
 8008084:	40140000 	.word	0x40140000
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	f7f8 faba 	bl	8000608 <__aeabi_dmul>
 8008094:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008098:	9413      	str	r4, [sp, #76]	@ 0x4c
 800809a:	4656      	mov	r6, sl
 800809c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a0:	f7f8 fd62 	bl	8000b68 <__aeabi_d2iz>
 80080a4:	4605      	mov	r5, r0
 80080a6:	f7f8 fa45 	bl	8000534 <__aeabi_i2d>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b2:	f7f8 f8f1 	bl	8000298 <__aeabi_dsub>
 80080b6:	3530      	adds	r5, #48	@ 0x30
 80080b8:	f806 5b01 	strb.w	r5, [r6], #1
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	d124      	bne.n	8008116 <_dtoa_r+0x626>
 80080cc:	4baf      	ldr	r3, [pc, #700]	@ (800838c <_dtoa_r+0x89c>)
 80080ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80080d2:	f7f8 f8e3 	bl	800029c <__adddf3>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080de:	f7f8 fd23 	bl	8000b28 <__aeabi_dcmpgt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d163      	bne.n	80081ae <_dtoa_r+0x6be>
 80080e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080ea:	49a8      	ldr	r1, [pc, #672]	@ (800838c <_dtoa_r+0x89c>)
 80080ec:	2000      	movs	r0, #0
 80080ee:	f7f8 f8d3 	bl	8000298 <__aeabi_dsub>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080fa:	f7f8 fcf7 	bl	8000aec <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f43f af14 	beq.w	8007f2c <_dtoa_r+0x43c>
 8008104:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008106:	1e73      	subs	r3, r6, #1
 8008108:	9313      	str	r3, [sp, #76]	@ 0x4c
 800810a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800810e:	2b30      	cmp	r3, #48	@ 0x30
 8008110:	d0f8      	beq.n	8008104 <_dtoa_r+0x614>
 8008112:	4647      	mov	r7, r8
 8008114:	e03b      	b.n	800818e <_dtoa_r+0x69e>
 8008116:	4b9e      	ldr	r3, [pc, #632]	@ (8008390 <_dtoa_r+0x8a0>)
 8008118:	f7f8 fa76 	bl	8000608 <__aeabi_dmul>
 800811c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008120:	e7bc      	b.n	800809c <_dtoa_r+0x5ac>
 8008122:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008126:	4656      	mov	r6, sl
 8008128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 fb94 	bl	800085c <__aeabi_ddiv>
 8008134:	f7f8 fd18 	bl	8000b68 <__aeabi_d2iz>
 8008138:	4680      	mov	r8, r0
 800813a:	f7f8 f9fb 	bl	8000534 <__aeabi_i2d>
 800813e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008142:	f7f8 fa61 	bl	8000608 <__aeabi_dmul>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008152:	f7f8 f8a1 	bl	8000298 <__aeabi_dsub>
 8008156:	f806 4b01 	strb.w	r4, [r6], #1
 800815a:	9d03      	ldr	r5, [sp, #12]
 800815c:	eba6 040a 	sub.w	r4, r6, sl
 8008160:	42a5      	cmp	r5, r4
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	d133      	bne.n	80081d0 <_dtoa_r+0x6e0>
 8008168:	f7f8 f898 	bl	800029c <__adddf3>
 800816c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008170:	4604      	mov	r4, r0
 8008172:	460d      	mov	r5, r1
 8008174:	f7f8 fcd8 	bl	8000b28 <__aeabi_dcmpgt>
 8008178:	b9c0      	cbnz	r0, 80081ac <_dtoa_r+0x6bc>
 800817a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008186:	b110      	cbz	r0, 800818e <_dtoa_r+0x69e>
 8008188:	f018 0f01 	tst.w	r8, #1
 800818c:	d10e      	bne.n	80081ac <_dtoa_r+0x6bc>
 800818e:	9902      	ldr	r1, [sp, #8]
 8008190:	4648      	mov	r0, r9
 8008192:	f000 fbbd 	bl	8008910 <_Bfree>
 8008196:	2300      	movs	r3, #0
 8008198:	7033      	strb	r3, [r6, #0]
 800819a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800819c:	3701      	adds	r7, #1
 800819e:	601f      	str	r7, [r3, #0]
 80081a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 824b 	beq.w	800863e <_dtoa_r+0xb4e>
 80081a8:	601e      	str	r6, [r3, #0]
 80081aa:	e248      	b.n	800863e <_dtoa_r+0xb4e>
 80081ac:	46b8      	mov	r8, r7
 80081ae:	4633      	mov	r3, r6
 80081b0:	461e      	mov	r6, r3
 80081b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081b6:	2a39      	cmp	r2, #57	@ 0x39
 80081b8:	d106      	bne.n	80081c8 <_dtoa_r+0x6d8>
 80081ba:	459a      	cmp	sl, r3
 80081bc:	d1f8      	bne.n	80081b0 <_dtoa_r+0x6c0>
 80081be:	2230      	movs	r2, #48	@ 0x30
 80081c0:	f108 0801 	add.w	r8, r8, #1
 80081c4:	f88a 2000 	strb.w	r2, [sl]
 80081c8:	781a      	ldrb	r2, [r3, #0]
 80081ca:	3201      	adds	r2, #1
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e7a0      	b.n	8008112 <_dtoa_r+0x622>
 80081d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008390 <_dtoa_r+0x8a0>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	f7f8 fa18 	bl	8000608 <__aeabi_dmul>
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	4604      	mov	r4, r0
 80081de:	460d      	mov	r5, r1
 80081e0:	f7f8 fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d09f      	beq.n	8008128 <_dtoa_r+0x638>
 80081e8:	e7d1      	b.n	800818e <_dtoa_r+0x69e>
 80081ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ec:	2a00      	cmp	r2, #0
 80081ee:	f000 80ea 	beq.w	80083c6 <_dtoa_r+0x8d6>
 80081f2:	9a07      	ldr	r2, [sp, #28]
 80081f4:	2a01      	cmp	r2, #1
 80081f6:	f300 80cd 	bgt.w	8008394 <_dtoa_r+0x8a4>
 80081fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	f000 80c1 	beq.w	8008384 <_dtoa_r+0x894>
 8008202:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008206:	9c08      	ldr	r4, [sp, #32]
 8008208:	9e00      	ldr	r6, [sp, #0]
 800820a:	9a00      	ldr	r2, [sp, #0]
 800820c:	441a      	add	r2, r3
 800820e:	9200      	str	r2, [sp, #0]
 8008210:	9a06      	ldr	r2, [sp, #24]
 8008212:	2101      	movs	r1, #1
 8008214:	441a      	add	r2, r3
 8008216:	4648      	mov	r0, r9
 8008218:	9206      	str	r2, [sp, #24]
 800821a:	f000 fc2d 	bl	8008a78 <__i2b>
 800821e:	4605      	mov	r5, r0
 8008220:	b166      	cbz	r6, 800823c <_dtoa_r+0x74c>
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dd09      	ble.n	800823c <_dtoa_r+0x74c>
 8008228:	42b3      	cmp	r3, r6
 800822a:	9a00      	ldr	r2, [sp, #0]
 800822c:	bfa8      	it	ge
 800822e:	4633      	movge	r3, r6
 8008230:	1ad2      	subs	r2, r2, r3
 8008232:	9200      	str	r2, [sp, #0]
 8008234:	9a06      	ldr	r2, [sp, #24]
 8008236:	1af6      	subs	r6, r6, r3
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	9b08      	ldr	r3, [sp, #32]
 800823e:	b30b      	cbz	r3, 8008284 <_dtoa_r+0x794>
 8008240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80c6 	beq.w	80083d4 <_dtoa_r+0x8e4>
 8008248:	2c00      	cmp	r4, #0
 800824a:	f000 80c0 	beq.w	80083ce <_dtoa_r+0x8de>
 800824e:	4629      	mov	r1, r5
 8008250:	4622      	mov	r2, r4
 8008252:	4648      	mov	r0, r9
 8008254:	f000 fcc8 	bl	8008be8 <__pow5mult>
 8008258:	9a02      	ldr	r2, [sp, #8]
 800825a:	4601      	mov	r1, r0
 800825c:	4605      	mov	r5, r0
 800825e:	4648      	mov	r0, r9
 8008260:	f000 fc20 	bl	8008aa4 <__multiply>
 8008264:	9902      	ldr	r1, [sp, #8]
 8008266:	4680      	mov	r8, r0
 8008268:	4648      	mov	r0, r9
 800826a:	f000 fb51 	bl	8008910 <_Bfree>
 800826e:	9b08      	ldr	r3, [sp, #32]
 8008270:	1b1b      	subs	r3, r3, r4
 8008272:	9308      	str	r3, [sp, #32]
 8008274:	f000 80b1 	beq.w	80083da <_dtoa_r+0x8ea>
 8008278:	9a08      	ldr	r2, [sp, #32]
 800827a:	4641      	mov	r1, r8
 800827c:	4648      	mov	r0, r9
 800827e:	f000 fcb3 	bl	8008be8 <__pow5mult>
 8008282:	9002      	str	r0, [sp, #8]
 8008284:	2101      	movs	r1, #1
 8008286:	4648      	mov	r0, r9
 8008288:	f000 fbf6 	bl	8008a78 <__i2b>
 800828c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800828e:	4604      	mov	r4, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 81d8 	beq.w	8008646 <_dtoa_r+0xb56>
 8008296:	461a      	mov	r2, r3
 8008298:	4601      	mov	r1, r0
 800829a:	4648      	mov	r0, r9
 800829c:	f000 fca4 	bl	8008be8 <__pow5mult>
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	4604      	mov	r4, r0
 80082a6:	f300 809f 	bgt.w	80083e8 <_dtoa_r+0x8f8>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 8097 	bne.w	80083e0 <_dtoa_r+0x8f0>
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f040 8093 	bne.w	80083e4 <_dtoa_r+0x8f4>
 80082be:	9b05      	ldr	r3, [sp, #20]
 80082c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082c4:	0d1b      	lsrs	r3, r3, #20
 80082c6:	051b      	lsls	r3, r3, #20
 80082c8:	b133      	cbz	r3, 80082d8 <_dtoa_r+0x7e8>
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	3301      	adds	r3, #1
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	9b06      	ldr	r3, [sp, #24]
 80082d2:	3301      	adds	r3, #1
 80082d4:	9306      	str	r3, [sp, #24]
 80082d6:	2301      	movs	r3, #1
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 81b8 	beq.w	8008652 <_dtoa_r+0xb62>
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f000 fb79 	bl	80089e0 <__hi0bits>
 80082ee:	f1c0 0020 	rsb	r0, r0, #32
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	4418      	add	r0, r3
 80082f6:	f010 001f 	ands.w	r0, r0, #31
 80082fa:	f000 8082 	beq.w	8008402 <_dtoa_r+0x912>
 80082fe:	f1c0 0320 	rsb	r3, r0, #32
 8008302:	2b04      	cmp	r3, #4
 8008304:	dd73      	ble.n	80083ee <_dtoa_r+0x8fe>
 8008306:	9b00      	ldr	r3, [sp, #0]
 8008308:	f1c0 001c 	rsb	r0, r0, #28
 800830c:	4403      	add	r3, r0
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	9b06      	ldr	r3, [sp, #24]
 8008312:	4403      	add	r3, r0
 8008314:	4406      	add	r6, r0
 8008316:	9306      	str	r3, [sp, #24]
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	dd05      	ble.n	800832a <_dtoa_r+0x83a>
 800831e:	9902      	ldr	r1, [sp, #8]
 8008320:	461a      	mov	r2, r3
 8008322:	4648      	mov	r0, r9
 8008324:	f000 fcba 	bl	8008c9c <__lshift>
 8008328:	9002      	str	r0, [sp, #8]
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd05      	ble.n	800833c <_dtoa_r+0x84c>
 8008330:	4621      	mov	r1, r4
 8008332:	461a      	mov	r2, r3
 8008334:	4648      	mov	r0, r9
 8008336:	f000 fcb1 	bl	8008c9c <__lshift>
 800833a:	4604      	mov	r4, r0
 800833c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d061      	beq.n	8008406 <_dtoa_r+0x916>
 8008342:	9802      	ldr	r0, [sp, #8]
 8008344:	4621      	mov	r1, r4
 8008346:	f000 fd15 	bl	8008d74 <__mcmp>
 800834a:	2800      	cmp	r0, #0
 800834c:	da5b      	bge.n	8008406 <_dtoa_r+0x916>
 800834e:	2300      	movs	r3, #0
 8008350:	9902      	ldr	r1, [sp, #8]
 8008352:	220a      	movs	r2, #10
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fafd 	bl	8008954 <__multadd>
 800835a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8177 	beq.w	8008656 <_dtoa_r+0xb66>
 8008368:	4629      	mov	r1, r5
 800836a:	2300      	movs	r3, #0
 800836c:	220a      	movs	r2, #10
 800836e:	4648      	mov	r0, r9
 8008370:	f000 faf0 	bl	8008954 <__multadd>
 8008374:	f1bb 0f00 	cmp.w	fp, #0
 8008378:	4605      	mov	r5, r0
 800837a:	dc6f      	bgt.n	800845c <_dtoa_r+0x96c>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	2b02      	cmp	r3, #2
 8008380:	dc49      	bgt.n	8008416 <_dtoa_r+0x926>
 8008382:	e06b      	b.n	800845c <_dtoa_r+0x96c>
 8008384:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008386:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800838a:	e73c      	b.n	8008206 <_dtoa_r+0x716>
 800838c:	3fe00000 	.word	0x3fe00000
 8008390:	40240000 	.word	0x40240000
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	1e5c      	subs	r4, r3, #1
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	42a3      	cmp	r3, r4
 800839c:	db09      	blt.n	80083b2 <_dtoa_r+0x8c2>
 800839e:	1b1c      	subs	r4, r3, r4
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f6bf af30 	bge.w	8008208 <_dtoa_r+0x718>
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	9a03      	ldr	r2, [sp, #12]
 80083ac:	1a9e      	subs	r6, r3, r2
 80083ae:	2300      	movs	r3, #0
 80083b0:	e72b      	b.n	800820a <_dtoa_r+0x71a>
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083b6:	9408      	str	r4, [sp, #32]
 80083b8:	1ae3      	subs	r3, r4, r3
 80083ba:	441a      	add	r2, r3
 80083bc:	9e00      	ldr	r6, [sp, #0]
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80083c2:	2400      	movs	r4, #0
 80083c4:	e721      	b.n	800820a <_dtoa_r+0x71a>
 80083c6:	9c08      	ldr	r4, [sp, #32]
 80083c8:	9e00      	ldr	r6, [sp, #0]
 80083ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80083cc:	e728      	b.n	8008220 <_dtoa_r+0x730>
 80083ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80083d2:	e751      	b.n	8008278 <_dtoa_r+0x788>
 80083d4:	9a08      	ldr	r2, [sp, #32]
 80083d6:	9902      	ldr	r1, [sp, #8]
 80083d8:	e750      	b.n	800827c <_dtoa_r+0x78c>
 80083da:	f8cd 8008 	str.w	r8, [sp, #8]
 80083de:	e751      	b.n	8008284 <_dtoa_r+0x794>
 80083e0:	2300      	movs	r3, #0
 80083e2:	e779      	b.n	80082d8 <_dtoa_r+0x7e8>
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	e777      	b.n	80082d8 <_dtoa_r+0x7e8>
 80083e8:	2300      	movs	r3, #0
 80083ea:	9308      	str	r3, [sp, #32]
 80083ec:	e779      	b.n	80082e2 <_dtoa_r+0x7f2>
 80083ee:	d093      	beq.n	8008318 <_dtoa_r+0x828>
 80083f0:	9a00      	ldr	r2, [sp, #0]
 80083f2:	331c      	adds	r3, #28
 80083f4:	441a      	add	r2, r3
 80083f6:	9200      	str	r2, [sp, #0]
 80083f8:	9a06      	ldr	r2, [sp, #24]
 80083fa:	441a      	add	r2, r3
 80083fc:	441e      	add	r6, r3
 80083fe:	9206      	str	r2, [sp, #24]
 8008400:	e78a      	b.n	8008318 <_dtoa_r+0x828>
 8008402:	4603      	mov	r3, r0
 8008404:	e7f4      	b.n	80083f0 <_dtoa_r+0x900>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	46b8      	mov	r8, r7
 800840c:	dc20      	bgt.n	8008450 <_dtoa_r+0x960>
 800840e:	469b      	mov	fp, r3
 8008410:	9b07      	ldr	r3, [sp, #28]
 8008412:	2b02      	cmp	r3, #2
 8008414:	dd1e      	ble.n	8008454 <_dtoa_r+0x964>
 8008416:	f1bb 0f00 	cmp.w	fp, #0
 800841a:	f47f adb1 	bne.w	8007f80 <_dtoa_r+0x490>
 800841e:	4621      	mov	r1, r4
 8008420:	465b      	mov	r3, fp
 8008422:	2205      	movs	r2, #5
 8008424:	4648      	mov	r0, r9
 8008426:	f000 fa95 	bl	8008954 <__multadd>
 800842a:	4601      	mov	r1, r0
 800842c:	4604      	mov	r4, r0
 800842e:	9802      	ldr	r0, [sp, #8]
 8008430:	f000 fca0 	bl	8008d74 <__mcmp>
 8008434:	2800      	cmp	r0, #0
 8008436:	f77f ada3 	ble.w	8007f80 <_dtoa_r+0x490>
 800843a:	4656      	mov	r6, sl
 800843c:	2331      	movs	r3, #49	@ 0x31
 800843e:	f806 3b01 	strb.w	r3, [r6], #1
 8008442:	f108 0801 	add.w	r8, r8, #1
 8008446:	e59f      	b.n	8007f88 <_dtoa_r+0x498>
 8008448:	9c03      	ldr	r4, [sp, #12]
 800844a:	46b8      	mov	r8, r7
 800844c:	4625      	mov	r5, r4
 800844e:	e7f4      	b.n	800843a <_dtoa_r+0x94a>
 8008450:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8101 	beq.w	800865e <_dtoa_r+0xb6e>
 800845c:	2e00      	cmp	r6, #0
 800845e:	dd05      	ble.n	800846c <_dtoa_r+0x97c>
 8008460:	4629      	mov	r1, r5
 8008462:	4632      	mov	r2, r6
 8008464:	4648      	mov	r0, r9
 8008466:	f000 fc19 	bl	8008c9c <__lshift>
 800846a:	4605      	mov	r5, r0
 800846c:	9b08      	ldr	r3, [sp, #32]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d05c      	beq.n	800852c <_dtoa_r+0xa3c>
 8008472:	6869      	ldr	r1, [r5, #4]
 8008474:	4648      	mov	r0, r9
 8008476:	f000 fa0b 	bl	8008890 <_Balloc>
 800847a:	4606      	mov	r6, r0
 800847c:	b928      	cbnz	r0, 800848a <_dtoa_r+0x99a>
 800847e:	4b82      	ldr	r3, [pc, #520]	@ (8008688 <_dtoa_r+0xb98>)
 8008480:	4602      	mov	r2, r0
 8008482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008486:	f7ff bb4a 	b.w	8007b1e <_dtoa_r+0x2e>
 800848a:	692a      	ldr	r2, [r5, #16]
 800848c:	3202      	adds	r2, #2
 800848e:	0092      	lsls	r2, r2, #2
 8008490:	f105 010c 	add.w	r1, r5, #12
 8008494:	300c      	adds	r0, #12
 8008496:	f000 ffa3 	bl	80093e0 <memcpy>
 800849a:	2201      	movs	r2, #1
 800849c:	4631      	mov	r1, r6
 800849e:	4648      	mov	r0, r9
 80084a0:	f000 fbfc 	bl	8008c9c <__lshift>
 80084a4:	f10a 0301 	add.w	r3, sl, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	eb0a 030b 	add.w	r3, sl, fp
 80084ae:	9308      	str	r3, [sp, #32]
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	462f      	mov	r7, r5
 80084b8:	9306      	str	r3, [sp, #24]
 80084ba:	4605      	mov	r5, r0
 80084bc:	9b00      	ldr	r3, [sp, #0]
 80084be:	9802      	ldr	r0, [sp, #8]
 80084c0:	4621      	mov	r1, r4
 80084c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80084c6:	f7ff fa8a 	bl	80079de <quorem>
 80084ca:	4603      	mov	r3, r0
 80084cc:	3330      	adds	r3, #48	@ 0x30
 80084ce:	9003      	str	r0, [sp, #12]
 80084d0:	4639      	mov	r1, r7
 80084d2:	9802      	ldr	r0, [sp, #8]
 80084d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084d6:	f000 fc4d 	bl	8008d74 <__mcmp>
 80084da:	462a      	mov	r2, r5
 80084dc:	9004      	str	r0, [sp, #16]
 80084de:	4621      	mov	r1, r4
 80084e0:	4648      	mov	r0, r9
 80084e2:	f000 fc63 	bl	8008dac <__mdiff>
 80084e6:	68c2      	ldr	r2, [r0, #12]
 80084e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ea:	4606      	mov	r6, r0
 80084ec:	bb02      	cbnz	r2, 8008530 <_dtoa_r+0xa40>
 80084ee:	4601      	mov	r1, r0
 80084f0:	9802      	ldr	r0, [sp, #8]
 80084f2:	f000 fc3f 	bl	8008d74 <__mcmp>
 80084f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f8:	4602      	mov	r2, r0
 80084fa:	4631      	mov	r1, r6
 80084fc:	4648      	mov	r0, r9
 80084fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008500:	9309      	str	r3, [sp, #36]	@ 0x24
 8008502:	f000 fa05 	bl	8008910 <_Bfree>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800850a:	9e00      	ldr	r6, [sp, #0]
 800850c:	ea42 0103 	orr.w	r1, r2, r3
 8008510:	9b06      	ldr	r3, [sp, #24]
 8008512:	4319      	orrs	r1, r3
 8008514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008516:	d10d      	bne.n	8008534 <_dtoa_r+0xa44>
 8008518:	2b39      	cmp	r3, #57	@ 0x39
 800851a:	d027      	beq.n	800856c <_dtoa_r+0xa7c>
 800851c:	9a04      	ldr	r2, [sp, #16]
 800851e:	2a00      	cmp	r2, #0
 8008520:	dd01      	ble.n	8008526 <_dtoa_r+0xa36>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	3331      	adds	r3, #49	@ 0x31
 8008526:	f88b 3000 	strb.w	r3, [fp]
 800852a:	e52e      	b.n	8007f8a <_dtoa_r+0x49a>
 800852c:	4628      	mov	r0, r5
 800852e:	e7b9      	b.n	80084a4 <_dtoa_r+0x9b4>
 8008530:	2201      	movs	r2, #1
 8008532:	e7e2      	b.n	80084fa <_dtoa_r+0xa0a>
 8008534:	9904      	ldr	r1, [sp, #16]
 8008536:	2900      	cmp	r1, #0
 8008538:	db04      	blt.n	8008544 <_dtoa_r+0xa54>
 800853a:	9807      	ldr	r0, [sp, #28]
 800853c:	4301      	orrs	r1, r0
 800853e:	9806      	ldr	r0, [sp, #24]
 8008540:	4301      	orrs	r1, r0
 8008542:	d120      	bne.n	8008586 <_dtoa_r+0xa96>
 8008544:	2a00      	cmp	r2, #0
 8008546:	ddee      	ble.n	8008526 <_dtoa_r+0xa36>
 8008548:	9902      	ldr	r1, [sp, #8]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	4648      	mov	r0, r9
 8008550:	f000 fba4 	bl	8008c9c <__lshift>
 8008554:	4621      	mov	r1, r4
 8008556:	9002      	str	r0, [sp, #8]
 8008558:	f000 fc0c 	bl	8008d74 <__mcmp>
 800855c:	2800      	cmp	r0, #0
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	dc02      	bgt.n	8008568 <_dtoa_r+0xa78>
 8008562:	d1e0      	bne.n	8008526 <_dtoa_r+0xa36>
 8008564:	07da      	lsls	r2, r3, #31
 8008566:	d5de      	bpl.n	8008526 <_dtoa_r+0xa36>
 8008568:	2b39      	cmp	r3, #57	@ 0x39
 800856a:	d1da      	bne.n	8008522 <_dtoa_r+0xa32>
 800856c:	2339      	movs	r3, #57	@ 0x39
 800856e:	f88b 3000 	strb.w	r3, [fp]
 8008572:	4633      	mov	r3, r6
 8008574:	461e      	mov	r6, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800857c:	2a39      	cmp	r2, #57	@ 0x39
 800857e:	d04e      	beq.n	800861e <_dtoa_r+0xb2e>
 8008580:	3201      	adds	r2, #1
 8008582:	701a      	strb	r2, [r3, #0]
 8008584:	e501      	b.n	8007f8a <_dtoa_r+0x49a>
 8008586:	2a00      	cmp	r2, #0
 8008588:	dd03      	ble.n	8008592 <_dtoa_r+0xaa2>
 800858a:	2b39      	cmp	r3, #57	@ 0x39
 800858c:	d0ee      	beq.n	800856c <_dtoa_r+0xa7c>
 800858e:	3301      	adds	r3, #1
 8008590:	e7c9      	b.n	8008526 <_dtoa_r+0xa36>
 8008592:	9a00      	ldr	r2, [sp, #0]
 8008594:	9908      	ldr	r1, [sp, #32]
 8008596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800859a:	428a      	cmp	r2, r1
 800859c:	d028      	beq.n	80085f0 <_dtoa_r+0xb00>
 800859e:	9902      	ldr	r1, [sp, #8]
 80085a0:	2300      	movs	r3, #0
 80085a2:	220a      	movs	r2, #10
 80085a4:	4648      	mov	r0, r9
 80085a6:	f000 f9d5 	bl	8008954 <__multadd>
 80085aa:	42af      	cmp	r7, r5
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	f04f 020a 	mov.w	r2, #10
 80085b6:	4639      	mov	r1, r7
 80085b8:	4648      	mov	r0, r9
 80085ba:	d107      	bne.n	80085cc <_dtoa_r+0xadc>
 80085bc:	f000 f9ca 	bl	8008954 <__multadd>
 80085c0:	4607      	mov	r7, r0
 80085c2:	4605      	mov	r5, r0
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	e777      	b.n	80084bc <_dtoa_r+0x9cc>
 80085cc:	f000 f9c2 	bl	8008954 <__multadd>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4607      	mov	r7, r0
 80085d4:	2300      	movs	r3, #0
 80085d6:	220a      	movs	r2, #10
 80085d8:	4648      	mov	r0, r9
 80085da:	f000 f9bb 	bl	8008954 <__multadd>
 80085de:	4605      	mov	r5, r0
 80085e0:	e7f0      	b.n	80085c4 <_dtoa_r+0xad4>
 80085e2:	f1bb 0f00 	cmp.w	fp, #0
 80085e6:	bfcc      	ite	gt
 80085e8:	465e      	movgt	r6, fp
 80085ea:	2601      	movle	r6, #1
 80085ec:	4456      	add	r6, sl
 80085ee:	2700      	movs	r7, #0
 80085f0:	9902      	ldr	r1, [sp, #8]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	4648      	mov	r0, r9
 80085f8:	f000 fb50 	bl	8008c9c <__lshift>
 80085fc:	4621      	mov	r1, r4
 80085fe:	9002      	str	r0, [sp, #8]
 8008600:	f000 fbb8 	bl	8008d74 <__mcmp>
 8008604:	2800      	cmp	r0, #0
 8008606:	dcb4      	bgt.n	8008572 <_dtoa_r+0xa82>
 8008608:	d102      	bne.n	8008610 <_dtoa_r+0xb20>
 800860a:	9b00      	ldr	r3, [sp, #0]
 800860c:	07db      	lsls	r3, r3, #31
 800860e:	d4b0      	bmi.n	8008572 <_dtoa_r+0xa82>
 8008610:	4633      	mov	r3, r6
 8008612:	461e      	mov	r6, r3
 8008614:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008618:	2a30      	cmp	r2, #48	@ 0x30
 800861a:	d0fa      	beq.n	8008612 <_dtoa_r+0xb22>
 800861c:	e4b5      	b.n	8007f8a <_dtoa_r+0x49a>
 800861e:	459a      	cmp	sl, r3
 8008620:	d1a8      	bne.n	8008574 <_dtoa_r+0xa84>
 8008622:	2331      	movs	r3, #49	@ 0x31
 8008624:	f108 0801 	add.w	r8, r8, #1
 8008628:	f88a 3000 	strb.w	r3, [sl]
 800862c:	e4ad      	b.n	8007f8a <_dtoa_r+0x49a>
 800862e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008630:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800868c <_dtoa_r+0xb9c>
 8008634:	b11b      	cbz	r3, 800863e <_dtoa_r+0xb4e>
 8008636:	f10a 0308 	add.w	r3, sl, #8
 800863a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	4650      	mov	r0, sl
 8008640:	b017      	add	sp, #92	@ 0x5c
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	2b01      	cmp	r3, #1
 800864a:	f77f ae2e 	ble.w	80082aa <_dtoa_r+0x7ba>
 800864e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008650:	9308      	str	r3, [sp, #32]
 8008652:	2001      	movs	r0, #1
 8008654:	e64d      	b.n	80082f2 <_dtoa_r+0x802>
 8008656:	f1bb 0f00 	cmp.w	fp, #0
 800865a:	f77f aed9 	ble.w	8008410 <_dtoa_r+0x920>
 800865e:	4656      	mov	r6, sl
 8008660:	9802      	ldr	r0, [sp, #8]
 8008662:	4621      	mov	r1, r4
 8008664:	f7ff f9bb 	bl	80079de <quorem>
 8008668:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800866c:	f806 3b01 	strb.w	r3, [r6], #1
 8008670:	eba6 020a 	sub.w	r2, r6, sl
 8008674:	4593      	cmp	fp, r2
 8008676:	ddb4      	ble.n	80085e2 <_dtoa_r+0xaf2>
 8008678:	9902      	ldr	r1, [sp, #8]
 800867a:	2300      	movs	r3, #0
 800867c:	220a      	movs	r2, #10
 800867e:	4648      	mov	r0, r9
 8008680:	f000 f968 	bl	8008954 <__multadd>
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	e7eb      	b.n	8008660 <_dtoa_r+0xb70>
 8008688:	0800a094 	.word	0x0800a094
 800868c:	0800a018 	.word	0x0800a018

08008690 <_free_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4605      	mov	r5, r0
 8008694:	2900      	cmp	r1, #0
 8008696:	d041      	beq.n	800871c <_free_r+0x8c>
 8008698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869c:	1f0c      	subs	r4, r1, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bfb8      	it	lt
 80086a2:	18e4      	addlt	r4, r4, r3
 80086a4:	f000 f8e8 	bl	8008878 <__malloc_lock>
 80086a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008720 <_free_r+0x90>)
 80086aa:	6813      	ldr	r3, [r2, #0]
 80086ac:	b933      	cbnz	r3, 80086bc <_free_r+0x2c>
 80086ae:	6063      	str	r3, [r4, #4]
 80086b0:	6014      	str	r4, [r2, #0]
 80086b2:	4628      	mov	r0, r5
 80086b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b8:	f000 b8e4 	b.w	8008884 <__malloc_unlock>
 80086bc:	42a3      	cmp	r3, r4
 80086be:	d908      	bls.n	80086d2 <_free_r+0x42>
 80086c0:	6820      	ldr	r0, [r4, #0]
 80086c2:	1821      	adds	r1, r4, r0
 80086c4:	428b      	cmp	r3, r1
 80086c6:	bf01      	itttt	eq
 80086c8:	6819      	ldreq	r1, [r3, #0]
 80086ca:	685b      	ldreq	r3, [r3, #4]
 80086cc:	1809      	addeq	r1, r1, r0
 80086ce:	6021      	streq	r1, [r4, #0]
 80086d0:	e7ed      	b.n	80086ae <_free_r+0x1e>
 80086d2:	461a      	mov	r2, r3
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	b10b      	cbz	r3, 80086dc <_free_r+0x4c>
 80086d8:	42a3      	cmp	r3, r4
 80086da:	d9fa      	bls.n	80086d2 <_free_r+0x42>
 80086dc:	6811      	ldr	r1, [r2, #0]
 80086de:	1850      	adds	r0, r2, r1
 80086e0:	42a0      	cmp	r0, r4
 80086e2:	d10b      	bne.n	80086fc <_free_r+0x6c>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	4401      	add	r1, r0
 80086e8:	1850      	adds	r0, r2, r1
 80086ea:	4283      	cmp	r3, r0
 80086ec:	6011      	str	r1, [r2, #0]
 80086ee:	d1e0      	bne.n	80086b2 <_free_r+0x22>
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	6053      	str	r3, [r2, #4]
 80086f6:	4408      	add	r0, r1
 80086f8:	6010      	str	r0, [r2, #0]
 80086fa:	e7da      	b.n	80086b2 <_free_r+0x22>
 80086fc:	d902      	bls.n	8008704 <_free_r+0x74>
 80086fe:	230c      	movs	r3, #12
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	e7d6      	b.n	80086b2 <_free_r+0x22>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	1821      	adds	r1, r4, r0
 8008708:	428b      	cmp	r3, r1
 800870a:	bf04      	itt	eq
 800870c:	6819      	ldreq	r1, [r3, #0]
 800870e:	685b      	ldreq	r3, [r3, #4]
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	bf04      	itt	eq
 8008714:	1809      	addeq	r1, r1, r0
 8008716:	6021      	streq	r1, [r4, #0]
 8008718:	6054      	str	r4, [r2, #4]
 800871a:	e7ca      	b.n	80086b2 <_free_r+0x22>
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	bf00      	nop
 8008720:	20000730 	.word	0x20000730

08008724 <malloc>:
 8008724:	4b02      	ldr	r3, [pc, #8]	@ (8008730 <malloc+0xc>)
 8008726:	4601      	mov	r1, r0
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	f000 b825 	b.w	8008778 <_malloc_r>
 800872e:	bf00      	nop
 8008730:	20000020 	.word	0x20000020

08008734 <sbrk_aligned>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	4e0f      	ldr	r6, [pc, #60]	@ (8008774 <sbrk_aligned+0x40>)
 8008738:	460c      	mov	r4, r1
 800873a:	6831      	ldr	r1, [r6, #0]
 800873c:	4605      	mov	r5, r0
 800873e:	b911      	cbnz	r1, 8008746 <sbrk_aligned+0x12>
 8008740:	f000 fe3e 	bl	80093c0 <_sbrk_r>
 8008744:	6030      	str	r0, [r6, #0]
 8008746:	4621      	mov	r1, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f000 fe39 	bl	80093c0 <_sbrk_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d103      	bne.n	800875a <sbrk_aligned+0x26>
 8008752:	f04f 34ff 	mov.w	r4, #4294967295
 8008756:	4620      	mov	r0, r4
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	1cc4      	adds	r4, r0, #3
 800875c:	f024 0403 	bic.w	r4, r4, #3
 8008760:	42a0      	cmp	r0, r4
 8008762:	d0f8      	beq.n	8008756 <sbrk_aligned+0x22>
 8008764:	1a21      	subs	r1, r4, r0
 8008766:	4628      	mov	r0, r5
 8008768:	f000 fe2a 	bl	80093c0 <_sbrk_r>
 800876c:	3001      	adds	r0, #1
 800876e:	d1f2      	bne.n	8008756 <sbrk_aligned+0x22>
 8008770:	e7ef      	b.n	8008752 <sbrk_aligned+0x1e>
 8008772:	bf00      	nop
 8008774:	2000072c 	.word	0x2000072c

08008778 <_malloc_r>:
 8008778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4606      	mov	r6, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d904      	bls.n	800879e <_malloc_r+0x26>
 8008794:	230c      	movs	r3, #12
 8008796:	6033      	str	r3, [r6, #0]
 8008798:	2000      	movs	r0, #0
 800879a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008874 <_malloc_r+0xfc>
 80087a2:	f000 f869 	bl	8008878 <__malloc_lock>
 80087a6:	f8d8 3000 	ldr.w	r3, [r8]
 80087aa:	461c      	mov	r4, r3
 80087ac:	bb44      	cbnz	r4, 8008800 <_malloc_r+0x88>
 80087ae:	4629      	mov	r1, r5
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff ffbf 	bl	8008734 <sbrk_aligned>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	4604      	mov	r4, r0
 80087ba:	d158      	bne.n	800886e <_malloc_r+0xf6>
 80087bc:	f8d8 4000 	ldr.w	r4, [r8]
 80087c0:	4627      	mov	r7, r4
 80087c2:	2f00      	cmp	r7, #0
 80087c4:	d143      	bne.n	800884e <_malloc_r+0xd6>
 80087c6:	2c00      	cmp	r4, #0
 80087c8:	d04b      	beq.n	8008862 <_malloc_r+0xea>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	4639      	mov	r1, r7
 80087ce:	4630      	mov	r0, r6
 80087d0:	eb04 0903 	add.w	r9, r4, r3
 80087d4:	f000 fdf4 	bl	80093c0 <_sbrk_r>
 80087d8:	4581      	cmp	r9, r0
 80087da:	d142      	bne.n	8008862 <_malloc_r+0xea>
 80087dc:	6821      	ldr	r1, [r4, #0]
 80087de:	1a6d      	subs	r5, r5, r1
 80087e0:	4629      	mov	r1, r5
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ffa6 	bl	8008734 <sbrk_aligned>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d03a      	beq.n	8008862 <_malloc_r+0xea>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	442b      	add	r3, r5
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	f8d8 3000 	ldr.w	r3, [r8]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	bb62      	cbnz	r2, 8008854 <_malloc_r+0xdc>
 80087fa:	f8c8 7000 	str.w	r7, [r8]
 80087fe:	e00f      	b.n	8008820 <_malloc_r+0xa8>
 8008800:	6822      	ldr	r2, [r4, #0]
 8008802:	1b52      	subs	r2, r2, r5
 8008804:	d420      	bmi.n	8008848 <_malloc_r+0xd0>
 8008806:	2a0b      	cmp	r2, #11
 8008808:	d917      	bls.n	800883a <_malloc_r+0xc2>
 800880a:	1961      	adds	r1, r4, r5
 800880c:	42a3      	cmp	r3, r4
 800880e:	6025      	str	r5, [r4, #0]
 8008810:	bf18      	it	ne
 8008812:	6059      	strne	r1, [r3, #4]
 8008814:	6863      	ldr	r3, [r4, #4]
 8008816:	bf08      	it	eq
 8008818:	f8c8 1000 	streq.w	r1, [r8]
 800881c:	5162      	str	r2, [r4, r5]
 800881e:	604b      	str	r3, [r1, #4]
 8008820:	4630      	mov	r0, r6
 8008822:	f000 f82f 	bl	8008884 <__malloc_unlock>
 8008826:	f104 000b 	add.w	r0, r4, #11
 800882a:	1d23      	adds	r3, r4, #4
 800882c:	f020 0007 	bic.w	r0, r0, #7
 8008830:	1ac2      	subs	r2, r0, r3
 8008832:	bf1c      	itt	ne
 8008834:	1a1b      	subne	r3, r3, r0
 8008836:	50a3      	strne	r3, [r4, r2]
 8008838:	e7af      	b.n	800879a <_malloc_r+0x22>
 800883a:	6862      	ldr	r2, [r4, #4]
 800883c:	42a3      	cmp	r3, r4
 800883e:	bf0c      	ite	eq
 8008840:	f8c8 2000 	streq.w	r2, [r8]
 8008844:	605a      	strne	r2, [r3, #4]
 8008846:	e7eb      	b.n	8008820 <_malloc_r+0xa8>
 8008848:	4623      	mov	r3, r4
 800884a:	6864      	ldr	r4, [r4, #4]
 800884c:	e7ae      	b.n	80087ac <_malloc_r+0x34>
 800884e:	463c      	mov	r4, r7
 8008850:	687f      	ldr	r7, [r7, #4]
 8008852:	e7b6      	b.n	80087c2 <_malloc_r+0x4a>
 8008854:	461a      	mov	r2, r3
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	42a3      	cmp	r3, r4
 800885a:	d1fb      	bne.n	8008854 <_malloc_r+0xdc>
 800885c:	2300      	movs	r3, #0
 800885e:	6053      	str	r3, [r2, #4]
 8008860:	e7de      	b.n	8008820 <_malloc_r+0xa8>
 8008862:	230c      	movs	r3, #12
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	4630      	mov	r0, r6
 8008868:	f000 f80c 	bl	8008884 <__malloc_unlock>
 800886c:	e794      	b.n	8008798 <_malloc_r+0x20>
 800886e:	6005      	str	r5, [r0, #0]
 8008870:	e7d6      	b.n	8008820 <_malloc_r+0xa8>
 8008872:	bf00      	nop
 8008874:	20000730 	.word	0x20000730

08008878 <__malloc_lock>:
 8008878:	4801      	ldr	r0, [pc, #4]	@ (8008880 <__malloc_lock+0x8>)
 800887a:	f7ff b8ae 	b.w	80079da <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	20000728 	.word	0x20000728

08008884 <__malloc_unlock>:
 8008884:	4801      	ldr	r0, [pc, #4]	@ (800888c <__malloc_unlock+0x8>)
 8008886:	f7ff b8a9 	b.w	80079dc <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	20000728 	.word	0x20000728

08008890 <_Balloc>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	69c6      	ldr	r6, [r0, #28]
 8008894:	4604      	mov	r4, r0
 8008896:	460d      	mov	r5, r1
 8008898:	b976      	cbnz	r6, 80088b8 <_Balloc+0x28>
 800889a:	2010      	movs	r0, #16
 800889c:	f7ff ff42 	bl	8008724 <malloc>
 80088a0:	4602      	mov	r2, r0
 80088a2:	61e0      	str	r0, [r4, #28]
 80088a4:	b920      	cbnz	r0, 80088b0 <_Balloc+0x20>
 80088a6:	4b18      	ldr	r3, [pc, #96]	@ (8008908 <_Balloc+0x78>)
 80088a8:	4818      	ldr	r0, [pc, #96]	@ (800890c <_Balloc+0x7c>)
 80088aa:	216b      	movs	r1, #107	@ 0x6b
 80088ac:	f000 fda6 	bl	80093fc <__assert_func>
 80088b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088b4:	6006      	str	r6, [r0, #0]
 80088b6:	60c6      	str	r6, [r0, #12]
 80088b8:	69e6      	ldr	r6, [r4, #28]
 80088ba:	68f3      	ldr	r3, [r6, #12]
 80088bc:	b183      	cbz	r3, 80088e0 <_Balloc+0x50>
 80088be:	69e3      	ldr	r3, [r4, #28]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088c6:	b9b8      	cbnz	r0, 80088f8 <_Balloc+0x68>
 80088c8:	2101      	movs	r1, #1
 80088ca:	fa01 f605 	lsl.w	r6, r1, r5
 80088ce:	1d72      	adds	r2, r6, #5
 80088d0:	0092      	lsls	r2, r2, #2
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fdb0 	bl	8009438 <_calloc_r>
 80088d8:	b160      	cbz	r0, 80088f4 <_Balloc+0x64>
 80088da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088de:	e00e      	b.n	80088fe <_Balloc+0x6e>
 80088e0:	2221      	movs	r2, #33	@ 0x21
 80088e2:	2104      	movs	r1, #4
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fda7 	bl	8009438 <_calloc_r>
 80088ea:	69e3      	ldr	r3, [r4, #28]
 80088ec:	60f0      	str	r0, [r6, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e4      	bne.n	80088be <_Balloc+0x2e>
 80088f4:	2000      	movs	r0, #0
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	6802      	ldr	r2, [r0, #0]
 80088fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088fe:	2300      	movs	r3, #0
 8008900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008904:	e7f7      	b.n	80088f6 <_Balloc+0x66>
 8008906:	bf00      	nop
 8008908:	0800a025 	.word	0x0800a025
 800890c:	0800a0a5 	.word	0x0800a0a5

08008910 <_Bfree>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	69c6      	ldr	r6, [r0, #28]
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	b976      	cbnz	r6, 8008938 <_Bfree+0x28>
 800891a:	2010      	movs	r0, #16
 800891c:	f7ff ff02 	bl	8008724 <malloc>
 8008920:	4602      	mov	r2, r0
 8008922:	61e8      	str	r0, [r5, #28]
 8008924:	b920      	cbnz	r0, 8008930 <_Bfree+0x20>
 8008926:	4b09      	ldr	r3, [pc, #36]	@ (800894c <_Bfree+0x3c>)
 8008928:	4809      	ldr	r0, [pc, #36]	@ (8008950 <_Bfree+0x40>)
 800892a:	218f      	movs	r1, #143	@ 0x8f
 800892c:	f000 fd66 	bl	80093fc <__assert_func>
 8008930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008934:	6006      	str	r6, [r0, #0]
 8008936:	60c6      	str	r6, [r0, #12]
 8008938:	b13c      	cbz	r4, 800894a <_Bfree+0x3a>
 800893a:	69eb      	ldr	r3, [r5, #28]
 800893c:	6862      	ldr	r2, [r4, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008944:	6021      	str	r1, [r4, #0]
 8008946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	0800a025 	.word	0x0800a025
 8008950:	0800a0a5 	.word	0x0800a0a5

08008954 <__multadd>:
 8008954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008958:	690d      	ldr	r5, [r1, #16]
 800895a:	4607      	mov	r7, r0
 800895c:	460c      	mov	r4, r1
 800895e:	461e      	mov	r6, r3
 8008960:	f101 0c14 	add.w	ip, r1, #20
 8008964:	2000      	movs	r0, #0
 8008966:	f8dc 3000 	ldr.w	r3, [ip]
 800896a:	b299      	uxth	r1, r3
 800896c:	fb02 6101 	mla	r1, r2, r1, r6
 8008970:	0c1e      	lsrs	r6, r3, #16
 8008972:	0c0b      	lsrs	r3, r1, #16
 8008974:	fb02 3306 	mla	r3, r2, r6, r3
 8008978:	b289      	uxth	r1, r1
 800897a:	3001      	adds	r0, #1
 800897c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008980:	4285      	cmp	r5, r0
 8008982:	f84c 1b04 	str.w	r1, [ip], #4
 8008986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800898a:	dcec      	bgt.n	8008966 <__multadd+0x12>
 800898c:	b30e      	cbz	r6, 80089d2 <__multadd+0x7e>
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	42ab      	cmp	r3, r5
 8008992:	dc19      	bgt.n	80089c8 <__multadd+0x74>
 8008994:	6861      	ldr	r1, [r4, #4]
 8008996:	4638      	mov	r0, r7
 8008998:	3101      	adds	r1, #1
 800899a:	f7ff ff79 	bl	8008890 <_Balloc>
 800899e:	4680      	mov	r8, r0
 80089a0:	b928      	cbnz	r0, 80089ae <__multadd+0x5a>
 80089a2:	4602      	mov	r2, r0
 80089a4:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <__multadd+0x84>)
 80089a6:	480d      	ldr	r0, [pc, #52]	@ (80089dc <__multadd+0x88>)
 80089a8:	21ba      	movs	r1, #186	@ 0xba
 80089aa:	f000 fd27 	bl	80093fc <__assert_func>
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	3202      	adds	r2, #2
 80089b2:	f104 010c 	add.w	r1, r4, #12
 80089b6:	0092      	lsls	r2, r2, #2
 80089b8:	300c      	adds	r0, #12
 80089ba:	f000 fd11 	bl	80093e0 <memcpy>
 80089be:	4621      	mov	r1, r4
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7ff ffa5 	bl	8008910 <_Bfree>
 80089c6:	4644      	mov	r4, r8
 80089c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089cc:	3501      	adds	r5, #1
 80089ce:	615e      	str	r6, [r3, #20]
 80089d0:	6125      	str	r5, [r4, #16]
 80089d2:	4620      	mov	r0, r4
 80089d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d8:	0800a094 	.word	0x0800a094
 80089dc:	0800a0a5 	.word	0x0800a0a5

080089e0 <__hi0bits>:
 80089e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089e4:	4603      	mov	r3, r0
 80089e6:	bf36      	itet	cc
 80089e8:	0403      	lslcc	r3, r0, #16
 80089ea:	2000      	movcs	r0, #0
 80089ec:	2010      	movcc	r0, #16
 80089ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089f2:	bf3c      	itt	cc
 80089f4:	021b      	lslcc	r3, r3, #8
 80089f6:	3008      	addcc	r0, #8
 80089f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089fc:	bf3c      	itt	cc
 80089fe:	011b      	lslcc	r3, r3, #4
 8008a00:	3004      	addcc	r0, #4
 8008a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a06:	bf3c      	itt	cc
 8008a08:	009b      	lslcc	r3, r3, #2
 8008a0a:	3002      	addcc	r0, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	db05      	blt.n	8008a1c <__hi0bits+0x3c>
 8008a10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a14:	f100 0001 	add.w	r0, r0, #1
 8008a18:	bf08      	it	eq
 8008a1a:	2020      	moveq	r0, #32
 8008a1c:	4770      	bx	lr

08008a1e <__lo0bits>:
 8008a1e:	6803      	ldr	r3, [r0, #0]
 8008a20:	4602      	mov	r2, r0
 8008a22:	f013 0007 	ands.w	r0, r3, #7
 8008a26:	d00b      	beq.n	8008a40 <__lo0bits+0x22>
 8008a28:	07d9      	lsls	r1, r3, #31
 8008a2a:	d421      	bmi.n	8008a70 <__lo0bits+0x52>
 8008a2c:	0798      	lsls	r0, r3, #30
 8008a2e:	bf49      	itett	mi
 8008a30:	085b      	lsrmi	r3, r3, #1
 8008a32:	089b      	lsrpl	r3, r3, #2
 8008a34:	2001      	movmi	r0, #1
 8008a36:	6013      	strmi	r3, [r2, #0]
 8008a38:	bf5c      	itt	pl
 8008a3a:	6013      	strpl	r3, [r2, #0]
 8008a3c:	2002      	movpl	r0, #2
 8008a3e:	4770      	bx	lr
 8008a40:	b299      	uxth	r1, r3
 8008a42:	b909      	cbnz	r1, 8008a48 <__lo0bits+0x2a>
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	2010      	movs	r0, #16
 8008a48:	b2d9      	uxtb	r1, r3
 8008a4a:	b909      	cbnz	r1, 8008a50 <__lo0bits+0x32>
 8008a4c:	3008      	adds	r0, #8
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	0719      	lsls	r1, r3, #28
 8008a52:	bf04      	itt	eq
 8008a54:	091b      	lsreq	r3, r3, #4
 8008a56:	3004      	addeq	r0, #4
 8008a58:	0799      	lsls	r1, r3, #30
 8008a5a:	bf04      	itt	eq
 8008a5c:	089b      	lsreq	r3, r3, #2
 8008a5e:	3002      	addeq	r0, #2
 8008a60:	07d9      	lsls	r1, r3, #31
 8008a62:	d403      	bmi.n	8008a6c <__lo0bits+0x4e>
 8008a64:	085b      	lsrs	r3, r3, #1
 8008a66:	f100 0001 	add.w	r0, r0, #1
 8008a6a:	d003      	beq.n	8008a74 <__lo0bits+0x56>
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	4770      	bx	lr
 8008a70:	2000      	movs	r0, #0
 8008a72:	4770      	bx	lr
 8008a74:	2020      	movs	r0, #32
 8008a76:	4770      	bx	lr

08008a78 <__i2b>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	f7ff ff07 	bl	8008890 <_Balloc>
 8008a82:	4602      	mov	r2, r0
 8008a84:	b928      	cbnz	r0, 8008a92 <__i2b+0x1a>
 8008a86:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <__i2b+0x24>)
 8008a88:	4805      	ldr	r0, [pc, #20]	@ (8008aa0 <__i2b+0x28>)
 8008a8a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a8e:	f000 fcb5 	bl	80093fc <__assert_func>
 8008a92:	2301      	movs	r3, #1
 8008a94:	6144      	str	r4, [r0, #20]
 8008a96:	6103      	str	r3, [r0, #16]
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0800a094 	.word	0x0800a094
 8008aa0:	0800a0a5 	.word	0x0800a0a5

08008aa4 <__multiply>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	4617      	mov	r7, r2
 8008aaa:	690a      	ldr	r2, [r1, #16]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	bfa8      	it	ge
 8008ab2:	463b      	movge	r3, r7
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	bfa4      	itt	ge
 8008ab8:	460f      	movge	r7, r1
 8008aba:	4699      	movge	r9, r3
 8008abc:	693d      	ldr	r5, [r7, #16]
 8008abe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	eb05 060a 	add.w	r6, r5, sl
 8008aca:	42b3      	cmp	r3, r6
 8008acc:	b085      	sub	sp, #20
 8008ace:	bfb8      	it	lt
 8008ad0:	3101      	addlt	r1, #1
 8008ad2:	f7ff fedd 	bl	8008890 <_Balloc>
 8008ad6:	b930      	cbnz	r0, 8008ae6 <__multiply+0x42>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	4b41      	ldr	r3, [pc, #260]	@ (8008be0 <__multiply+0x13c>)
 8008adc:	4841      	ldr	r0, [pc, #260]	@ (8008be4 <__multiply+0x140>)
 8008ade:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ae2:	f000 fc8b 	bl	80093fc <__assert_func>
 8008ae6:	f100 0414 	add.w	r4, r0, #20
 8008aea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008aee:	4623      	mov	r3, r4
 8008af0:	2200      	movs	r2, #0
 8008af2:	4573      	cmp	r3, lr
 8008af4:	d320      	bcc.n	8008b38 <__multiply+0x94>
 8008af6:	f107 0814 	add.w	r8, r7, #20
 8008afa:	f109 0114 	add.w	r1, r9, #20
 8008afe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b06:	9302      	str	r3, [sp, #8]
 8008b08:	1beb      	subs	r3, r5, r7
 8008b0a:	3b15      	subs	r3, #21
 8008b0c:	f023 0303 	bic.w	r3, r3, #3
 8008b10:	3304      	adds	r3, #4
 8008b12:	3715      	adds	r7, #21
 8008b14:	42bd      	cmp	r5, r7
 8008b16:	bf38      	it	cc
 8008b18:	2304      	movcc	r3, #4
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	9b02      	ldr	r3, [sp, #8]
 8008b1e:	9103      	str	r1, [sp, #12]
 8008b20:	428b      	cmp	r3, r1
 8008b22:	d80c      	bhi.n	8008b3e <__multiply+0x9a>
 8008b24:	2e00      	cmp	r6, #0
 8008b26:	dd03      	ble.n	8008b30 <__multiply+0x8c>
 8008b28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d055      	beq.n	8008bdc <__multiply+0x138>
 8008b30:	6106      	str	r6, [r0, #16]
 8008b32:	b005      	add	sp, #20
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	f843 2b04 	str.w	r2, [r3], #4
 8008b3c:	e7d9      	b.n	8008af2 <__multiply+0x4e>
 8008b3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b42:	f1ba 0f00 	cmp.w	sl, #0
 8008b46:	d01f      	beq.n	8008b88 <__multiply+0xe4>
 8008b48:	46c4      	mov	ip, r8
 8008b4a:	46a1      	mov	r9, r4
 8008b4c:	2700      	movs	r7, #0
 8008b4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b52:	f8d9 3000 	ldr.w	r3, [r9]
 8008b56:	fa1f fb82 	uxth.w	fp, r2
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b60:	443b      	add	r3, r7
 8008b62:	f8d9 7000 	ldr.w	r7, [r9]
 8008b66:	0c12      	lsrs	r2, r2, #16
 8008b68:	0c3f      	lsrs	r7, r7, #16
 8008b6a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b78:	4565      	cmp	r5, ip
 8008b7a:	f849 3b04 	str.w	r3, [r9], #4
 8008b7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b82:	d8e4      	bhi.n	8008b4e <__multiply+0xaa>
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	50e7      	str	r7, [r4, r3]
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b8e:	3104      	adds	r1, #4
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	d020      	beq.n	8008bd8 <__multiply+0x134>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	4647      	mov	r7, r8
 8008b9a:	46a4      	mov	ip, r4
 8008b9c:	f04f 0a00 	mov.w	sl, #0
 8008ba0:	f8b7 b000 	ldrh.w	fp, [r7]
 8008ba4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008ba8:	fb09 220b 	mla	r2, r9, fp, r2
 8008bac:	4452      	add	r2, sl
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb4:	f84c 3b04 	str.w	r3, [ip], #4
 8008bb8:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bc0:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bc4:	fb09 330a 	mla	r3, r9, sl, r3
 8008bc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008bcc:	42bd      	cmp	r5, r7
 8008bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bd2:	d8e5      	bhi.n	8008ba0 <__multiply+0xfc>
 8008bd4:	9a01      	ldr	r2, [sp, #4]
 8008bd6:	50a3      	str	r3, [r4, r2]
 8008bd8:	3404      	adds	r4, #4
 8008bda:	e79f      	b.n	8008b1c <__multiply+0x78>
 8008bdc:	3e01      	subs	r6, #1
 8008bde:	e7a1      	b.n	8008b24 <__multiply+0x80>
 8008be0:	0800a094 	.word	0x0800a094
 8008be4:	0800a0a5 	.word	0x0800a0a5

08008be8 <__pow5mult>:
 8008be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	4615      	mov	r5, r2
 8008bee:	f012 0203 	ands.w	r2, r2, #3
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	d007      	beq.n	8008c08 <__pow5mult+0x20>
 8008bf8:	4c25      	ldr	r4, [pc, #148]	@ (8008c90 <__pow5mult+0xa8>)
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c02:	f7ff fea7 	bl	8008954 <__multadd>
 8008c06:	4606      	mov	r6, r0
 8008c08:	10ad      	asrs	r5, r5, #2
 8008c0a:	d03d      	beq.n	8008c88 <__pow5mult+0xa0>
 8008c0c:	69fc      	ldr	r4, [r7, #28]
 8008c0e:	b97c      	cbnz	r4, 8008c30 <__pow5mult+0x48>
 8008c10:	2010      	movs	r0, #16
 8008c12:	f7ff fd87 	bl	8008724 <malloc>
 8008c16:	4602      	mov	r2, r0
 8008c18:	61f8      	str	r0, [r7, #28]
 8008c1a:	b928      	cbnz	r0, 8008c28 <__pow5mult+0x40>
 8008c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c94 <__pow5mult+0xac>)
 8008c1e:	481e      	ldr	r0, [pc, #120]	@ (8008c98 <__pow5mult+0xb0>)
 8008c20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c24:	f000 fbea 	bl	80093fc <__assert_func>
 8008c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c2c:	6004      	str	r4, [r0, #0]
 8008c2e:	60c4      	str	r4, [r0, #12]
 8008c30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c38:	b94c      	cbnz	r4, 8008c4e <__pow5mult+0x66>
 8008c3a:	f240 2171 	movw	r1, #625	@ 0x271
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7ff ff1a 	bl	8008a78 <__i2b>
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	6003      	str	r3, [r0, #0]
 8008c4e:	f04f 0900 	mov.w	r9, #0
 8008c52:	07eb      	lsls	r3, r5, #31
 8008c54:	d50a      	bpl.n	8008c6c <__pow5mult+0x84>
 8008c56:	4631      	mov	r1, r6
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f7ff ff22 	bl	8008aa4 <__multiply>
 8008c60:	4631      	mov	r1, r6
 8008c62:	4680      	mov	r8, r0
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff fe53 	bl	8008910 <_Bfree>
 8008c6a:	4646      	mov	r6, r8
 8008c6c:	106d      	asrs	r5, r5, #1
 8008c6e:	d00b      	beq.n	8008c88 <__pow5mult+0xa0>
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	b938      	cbnz	r0, 8008c84 <__pow5mult+0x9c>
 8008c74:	4622      	mov	r2, r4
 8008c76:	4621      	mov	r1, r4
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff ff13 	bl	8008aa4 <__multiply>
 8008c7e:	6020      	str	r0, [r4, #0]
 8008c80:	f8c0 9000 	str.w	r9, [r0]
 8008c84:	4604      	mov	r4, r0
 8008c86:	e7e4      	b.n	8008c52 <__pow5mult+0x6a>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8e:	bf00      	nop
 8008c90:	0800a158 	.word	0x0800a158
 8008c94:	0800a025 	.word	0x0800a025
 8008c98:	0800a0a5 	.word	0x0800a0a5

08008c9c <__lshift>:
 8008c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	6849      	ldr	r1, [r1, #4]
 8008ca4:	6923      	ldr	r3, [r4, #16]
 8008ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	4607      	mov	r7, r0
 8008cae:	4691      	mov	r9, r2
 8008cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cb4:	f108 0601 	add.w	r6, r8, #1
 8008cb8:	42b3      	cmp	r3, r6
 8008cba:	db0b      	blt.n	8008cd4 <__lshift+0x38>
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff fde7 	bl	8008890 <_Balloc>
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	b948      	cbnz	r0, 8008cda <__lshift+0x3e>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	4b28      	ldr	r3, [pc, #160]	@ (8008d6c <__lshift+0xd0>)
 8008cca:	4829      	ldr	r0, [pc, #164]	@ (8008d70 <__lshift+0xd4>)
 8008ccc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cd0:	f000 fb94 	bl	80093fc <__assert_func>
 8008cd4:	3101      	adds	r1, #1
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	e7ee      	b.n	8008cb8 <__lshift+0x1c>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f100 0114 	add.w	r1, r0, #20
 8008ce0:	f100 0210 	add.w	r2, r0, #16
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	4553      	cmp	r3, sl
 8008ce8:	db33      	blt.n	8008d52 <__lshift+0xb6>
 8008cea:	6920      	ldr	r0, [r4, #16]
 8008cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cf0:	f104 0314 	add.w	r3, r4, #20
 8008cf4:	f019 091f 	ands.w	r9, r9, #31
 8008cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d00:	d02b      	beq.n	8008d5a <__lshift+0xbe>
 8008d02:	f1c9 0e20 	rsb	lr, r9, #32
 8008d06:	468a      	mov	sl, r1
 8008d08:	2200      	movs	r2, #0
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d10:	4310      	orrs	r0, r2
 8008d12:	f84a 0b04 	str.w	r0, [sl], #4
 8008d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1a:	459c      	cmp	ip, r3
 8008d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d20:	d8f3      	bhi.n	8008d0a <__lshift+0x6e>
 8008d22:	ebac 0304 	sub.w	r3, ip, r4
 8008d26:	3b15      	subs	r3, #21
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	f104 0015 	add.w	r0, r4, #21
 8008d32:	4560      	cmp	r0, ip
 8008d34:	bf88      	it	hi
 8008d36:	2304      	movhi	r3, #4
 8008d38:	50ca      	str	r2, [r1, r3]
 8008d3a:	b10a      	cbz	r2, 8008d40 <__lshift+0xa4>
 8008d3c:	f108 0602 	add.w	r6, r8, #2
 8008d40:	3e01      	subs	r6, #1
 8008d42:	4638      	mov	r0, r7
 8008d44:	612e      	str	r6, [r5, #16]
 8008d46:	4621      	mov	r1, r4
 8008d48:	f7ff fde2 	bl	8008910 <_Bfree>
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d56:	3301      	adds	r3, #1
 8008d58:	e7c5      	b.n	8008ce6 <__lshift+0x4a>
 8008d5a:	3904      	subs	r1, #4
 8008d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d64:	459c      	cmp	ip, r3
 8008d66:	d8f9      	bhi.n	8008d5c <__lshift+0xc0>
 8008d68:	e7ea      	b.n	8008d40 <__lshift+0xa4>
 8008d6a:	bf00      	nop
 8008d6c:	0800a094 	.word	0x0800a094
 8008d70:	0800a0a5 	.word	0x0800a0a5

08008d74 <__mcmp>:
 8008d74:	690a      	ldr	r2, [r1, #16]
 8008d76:	4603      	mov	r3, r0
 8008d78:	6900      	ldr	r0, [r0, #16]
 8008d7a:	1a80      	subs	r0, r0, r2
 8008d7c:	b530      	push	{r4, r5, lr}
 8008d7e:	d10e      	bne.n	8008d9e <__mcmp+0x2a>
 8008d80:	3314      	adds	r3, #20
 8008d82:	3114      	adds	r1, #20
 8008d84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d94:	4295      	cmp	r5, r2
 8008d96:	d003      	beq.n	8008da0 <__mcmp+0x2c>
 8008d98:	d205      	bcs.n	8008da6 <__mcmp+0x32>
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	bd30      	pop	{r4, r5, pc}
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	d3f3      	bcc.n	8008d8c <__mcmp+0x18>
 8008da4:	e7fb      	b.n	8008d9e <__mcmp+0x2a>
 8008da6:	2001      	movs	r0, #1
 8008da8:	e7f9      	b.n	8008d9e <__mcmp+0x2a>
	...

08008dac <__mdiff>:
 8008dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4689      	mov	r9, r1
 8008db2:	4606      	mov	r6, r0
 8008db4:	4611      	mov	r1, r2
 8008db6:	4648      	mov	r0, r9
 8008db8:	4614      	mov	r4, r2
 8008dba:	f7ff ffdb 	bl	8008d74 <__mcmp>
 8008dbe:	1e05      	subs	r5, r0, #0
 8008dc0:	d112      	bne.n	8008de8 <__mdiff+0x3c>
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f7ff fd63 	bl	8008890 <_Balloc>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	b928      	cbnz	r0, 8008dda <__mdiff+0x2e>
 8008dce:	4b3f      	ldr	r3, [pc, #252]	@ (8008ecc <__mdiff+0x120>)
 8008dd0:	f240 2137 	movw	r1, #567	@ 0x237
 8008dd4:	483e      	ldr	r0, [pc, #248]	@ (8008ed0 <__mdiff+0x124>)
 8008dd6:	f000 fb11 	bl	80093fc <__assert_func>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008de0:	4610      	mov	r0, r2
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de8:	bfbc      	itt	lt
 8008dea:	464b      	movlt	r3, r9
 8008dec:	46a1      	movlt	r9, r4
 8008dee:	4630      	mov	r0, r6
 8008df0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008df4:	bfba      	itte	lt
 8008df6:	461c      	movlt	r4, r3
 8008df8:	2501      	movlt	r5, #1
 8008dfa:	2500      	movge	r5, #0
 8008dfc:	f7ff fd48 	bl	8008890 <_Balloc>
 8008e00:	4602      	mov	r2, r0
 8008e02:	b918      	cbnz	r0, 8008e0c <__mdiff+0x60>
 8008e04:	4b31      	ldr	r3, [pc, #196]	@ (8008ecc <__mdiff+0x120>)
 8008e06:	f240 2145 	movw	r1, #581	@ 0x245
 8008e0a:	e7e3      	b.n	8008dd4 <__mdiff+0x28>
 8008e0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e10:	6926      	ldr	r6, [r4, #16]
 8008e12:	60c5      	str	r5, [r0, #12]
 8008e14:	f109 0310 	add.w	r3, r9, #16
 8008e18:	f109 0514 	add.w	r5, r9, #20
 8008e1c:	f104 0e14 	add.w	lr, r4, #20
 8008e20:	f100 0b14 	add.w	fp, r0, #20
 8008e24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	46d9      	mov	r9, fp
 8008e30:	f04f 0c00 	mov.w	ip, #0
 8008e34:	9b01      	ldr	r3, [sp, #4]
 8008e36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	fa1f f38a 	uxth.w	r3, sl
 8008e44:	4619      	mov	r1, r3
 8008e46:	b283      	uxth	r3, r0
 8008e48:	1acb      	subs	r3, r1, r3
 8008e4a:	0c00      	lsrs	r0, r0, #16
 8008e4c:	4463      	add	r3, ip
 8008e4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e5c:	4576      	cmp	r6, lr
 8008e5e:	f849 3b04 	str.w	r3, [r9], #4
 8008e62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e66:	d8e5      	bhi.n	8008e34 <__mdiff+0x88>
 8008e68:	1b33      	subs	r3, r6, r4
 8008e6a:	3b15      	subs	r3, #21
 8008e6c:	f023 0303 	bic.w	r3, r3, #3
 8008e70:	3415      	adds	r4, #21
 8008e72:	3304      	adds	r3, #4
 8008e74:	42a6      	cmp	r6, r4
 8008e76:	bf38      	it	cc
 8008e78:	2304      	movcc	r3, #4
 8008e7a:	441d      	add	r5, r3
 8008e7c:	445b      	add	r3, fp
 8008e7e:	461e      	mov	r6, r3
 8008e80:	462c      	mov	r4, r5
 8008e82:	4544      	cmp	r4, r8
 8008e84:	d30e      	bcc.n	8008ea4 <__mdiff+0xf8>
 8008e86:	f108 0103 	add.w	r1, r8, #3
 8008e8a:	1b49      	subs	r1, r1, r5
 8008e8c:	f021 0103 	bic.w	r1, r1, #3
 8008e90:	3d03      	subs	r5, #3
 8008e92:	45a8      	cmp	r8, r5
 8008e94:	bf38      	it	cc
 8008e96:	2100      	movcc	r1, #0
 8008e98:	440b      	add	r3, r1
 8008e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e9e:	b191      	cbz	r1, 8008ec6 <__mdiff+0x11a>
 8008ea0:	6117      	str	r7, [r2, #16]
 8008ea2:	e79d      	b.n	8008de0 <__mdiff+0x34>
 8008ea4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ea8:	46e6      	mov	lr, ip
 8008eaa:	0c08      	lsrs	r0, r1, #16
 8008eac:	fa1c fc81 	uxtah	ip, ip, r1
 8008eb0:	4471      	add	r1, lr
 8008eb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008eb6:	b289      	uxth	r1, r1
 8008eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ebc:	f846 1b04 	str.w	r1, [r6], #4
 8008ec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ec4:	e7dd      	b.n	8008e82 <__mdiff+0xd6>
 8008ec6:	3f01      	subs	r7, #1
 8008ec8:	e7e7      	b.n	8008e9a <__mdiff+0xee>
 8008eca:	bf00      	nop
 8008ecc:	0800a094 	.word	0x0800a094
 8008ed0:	0800a0a5 	.word	0x0800a0a5

08008ed4 <__d2b>:
 8008ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	460f      	mov	r7, r1
 8008eda:	2101      	movs	r1, #1
 8008edc:	ec59 8b10 	vmov	r8, r9, d0
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	f7ff fcd5 	bl	8008890 <_Balloc>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	b930      	cbnz	r0, 8008ef8 <__d2b+0x24>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b23      	ldr	r3, [pc, #140]	@ (8008f7c <__d2b+0xa8>)
 8008eee:	4824      	ldr	r0, [pc, #144]	@ (8008f80 <__d2b+0xac>)
 8008ef0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ef4:	f000 fa82 	bl	80093fc <__assert_func>
 8008ef8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008efc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f00:	b10d      	cbz	r5, 8008f06 <__d2b+0x32>
 8008f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	f1b8 0300 	subs.w	r3, r8, #0
 8008f0c:	d023      	beq.n	8008f56 <__d2b+0x82>
 8008f0e:	4668      	mov	r0, sp
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	f7ff fd84 	bl	8008a1e <__lo0bits>
 8008f16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f1a:	b1d0      	cbz	r0, 8008f52 <__d2b+0x7e>
 8008f1c:	f1c0 0320 	rsb	r3, r0, #32
 8008f20:	fa02 f303 	lsl.w	r3, r2, r3
 8008f24:	430b      	orrs	r3, r1
 8008f26:	40c2      	lsrs	r2, r0
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	9201      	str	r2, [sp, #4]
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	61a3      	str	r3, [r4, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bf0c      	ite	eq
 8008f34:	2201      	moveq	r2, #1
 8008f36:	2202      	movne	r2, #2
 8008f38:	6122      	str	r2, [r4, #16]
 8008f3a:	b1a5      	cbz	r5, 8008f66 <__d2b+0x92>
 8008f3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f40:	4405      	add	r5, r0
 8008f42:	603d      	str	r5, [r7, #0]
 8008f44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f48:	6030      	str	r0, [r6, #0]
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f52:	6161      	str	r1, [r4, #20]
 8008f54:	e7ea      	b.n	8008f2c <__d2b+0x58>
 8008f56:	a801      	add	r0, sp, #4
 8008f58:	f7ff fd61 	bl	8008a1e <__lo0bits>
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	6163      	str	r3, [r4, #20]
 8008f60:	3020      	adds	r0, #32
 8008f62:	2201      	movs	r2, #1
 8008f64:	e7e8      	b.n	8008f38 <__d2b+0x64>
 8008f66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f6e:	6038      	str	r0, [r7, #0]
 8008f70:	6918      	ldr	r0, [r3, #16]
 8008f72:	f7ff fd35 	bl	80089e0 <__hi0bits>
 8008f76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f7a:	e7e5      	b.n	8008f48 <__d2b+0x74>
 8008f7c:	0800a094 	.word	0x0800a094
 8008f80:	0800a0a5 	.word	0x0800a0a5

08008f84 <__ssputs_r>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	688e      	ldr	r6, [r1, #8]
 8008f8a:	461f      	mov	r7, r3
 8008f8c:	42be      	cmp	r6, r7
 8008f8e:	680b      	ldr	r3, [r1, #0]
 8008f90:	4682      	mov	sl, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	4690      	mov	r8, r2
 8008f96:	d82d      	bhi.n	8008ff4 <__ssputs_r+0x70>
 8008f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fa0:	d026      	beq.n	8008ff0 <__ssputs_r+0x6c>
 8008fa2:	6965      	ldr	r5, [r4, #20]
 8008fa4:	6909      	ldr	r1, [r1, #16]
 8008fa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008faa:	eba3 0901 	sub.w	r9, r3, r1
 8008fae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb2:	1c7b      	adds	r3, r7, #1
 8008fb4:	444b      	add	r3, r9
 8008fb6:	106d      	asrs	r5, r5, #1
 8008fb8:	429d      	cmp	r5, r3
 8008fba:	bf38      	it	cc
 8008fbc:	461d      	movcc	r5, r3
 8008fbe:	0553      	lsls	r3, r2, #21
 8008fc0:	d527      	bpl.n	8009012 <__ssputs_r+0x8e>
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	f7ff fbd8 	bl	8008778 <_malloc_r>
 8008fc8:	4606      	mov	r6, r0
 8008fca:	b360      	cbz	r0, 8009026 <__ssputs_r+0xa2>
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	464a      	mov	r2, r9
 8008fd0:	f000 fa06 	bl	80093e0 <memcpy>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6126      	str	r6, [r4, #16]
 8008fe2:	6165      	str	r5, [r4, #20]
 8008fe4:	444e      	add	r6, r9
 8008fe6:	eba5 0509 	sub.w	r5, r5, r9
 8008fea:	6026      	str	r6, [r4, #0]
 8008fec:	60a5      	str	r5, [r4, #8]
 8008fee:	463e      	mov	r6, r7
 8008ff0:	42be      	cmp	r6, r7
 8008ff2:	d900      	bls.n	8008ff6 <__ssputs_r+0x72>
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	6820      	ldr	r0, [r4, #0]
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	f000 f9c6 	bl	800938c <memmove>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	1b9b      	subs	r3, r3, r6
 8009004:	60a3      	str	r3, [r4, #8]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	4433      	add	r3, r6
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	2000      	movs	r0, #0
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	462a      	mov	r2, r5
 8009014:	f000 fa36 	bl	8009484 <_realloc_r>
 8009018:	4606      	mov	r6, r0
 800901a:	2800      	cmp	r0, #0
 800901c:	d1e0      	bne.n	8008fe0 <__ssputs_r+0x5c>
 800901e:	6921      	ldr	r1, [r4, #16]
 8009020:	4650      	mov	r0, sl
 8009022:	f7ff fb35 	bl	8008690 <_free_r>
 8009026:	230c      	movs	r3, #12
 8009028:	f8ca 3000 	str.w	r3, [sl]
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	e7e9      	b.n	800900e <__ssputs_r+0x8a>
	...

0800903c <_svfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4698      	mov	r8, r3
 8009042:	898b      	ldrh	r3, [r1, #12]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	b09d      	sub	sp, #116	@ 0x74
 8009048:	4607      	mov	r7, r0
 800904a:	460d      	mov	r5, r1
 800904c:	4614      	mov	r4, r2
 800904e:	d510      	bpl.n	8009072 <_svfiprintf_r+0x36>
 8009050:	690b      	ldr	r3, [r1, #16]
 8009052:	b973      	cbnz	r3, 8009072 <_svfiprintf_r+0x36>
 8009054:	2140      	movs	r1, #64	@ 0x40
 8009056:	f7ff fb8f 	bl	8008778 <_malloc_r>
 800905a:	6028      	str	r0, [r5, #0]
 800905c:	6128      	str	r0, [r5, #16]
 800905e:	b930      	cbnz	r0, 800906e <_svfiprintf_r+0x32>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b01d      	add	sp, #116	@ 0x74
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	2340      	movs	r3, #64	@ 0x40
 8009070:	616b      	str	r3, [r5, #20]
 8009072:	2300      	movs	r3, #0
 8009074:	9309      	str	r3, [sp, #36]	@ 0x24
 8009076:	2320      	movs	r3, #32
 8009078:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800907c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009080:	2330      	movs	r3, #48	@ 0x30
 8009082:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009220 <_svfiprintf_r+0x1e4>
 8009086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	4623      	mov	r3, r4
 8009090:	469a      	mov	sl, r3
 8009092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009096:	b10a      	cbz	r2, 800909c <_svfiprintf_r+0x60>
 8009098:	2a25      	cmp	r2, #37	@ 0x25
 800909a:	d1f9      	bne.n	8009090 <_svfiprintf_r+0x54>
 800909c:	ebba 0b04 	subs.w	fp, sl, r4
 80090a0:	d00b      	beq.n	80090ba <_svfiprintf_r+0x7e>
 80090a2:	465b      	mov	r3, fp
 80090a4:	4622      	mov	r2, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ff6b 	bl	8008f84 <__ssputs_r>
 80090ae:	3001      	adds	r0, #1
 80090b0:	f000 80a7 	beq.w	8009202 <_svfiprintf_r+0x1c6>
 80090b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090b6:	445a      	add	r2, fp
 80090b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ba:	f89a 3000 	ldrb.w	r3, [sl]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 809f 	beq.w	8009202 <_svfiprintf_r+0x1c6>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ce:	f10a 0a01 	add.w	sl, sl, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090da:	931a      	str	r3, [sp, #104]	@ 0x68
 80090dc:	4654      	mov	r4, sl
 80090de:	2205      	movs	r2, #5
 80090e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e4:	484e      	ldr	r0, [pc, #312]	@ (8009220 <_svfiprintf_r+0x1e4>)
 80090e6:	f7f7 f87b 	bl	80001e0 <memchr>
 80090ea:	9a04      	ldr	r2, [sp, #16]
 80090ec:	b9d8      	cbnz	r0, 8009126 <_svfiprintf_r+0xea>
 80090ee:	06d0      	lsls	r0, r2, #27
 80090f0:	bf44      	itt	mi
 80090f2:	2320      	movmi	r3, #32
 80090f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f8:	0711      	lsls	r1, r2, #28
 80090fa:	bf44      	itt	mi
 80090fc:	232b      	movmi	r3, #43	@ 0x2b
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009102:	f89a 3000 	ldrb.w	r3, [sl]
 8009106:	2b2a      	cmp	r3, #42	@ 0x2a
 8009108:	d015      	beq.n	8009136 <_svfiprintf_r+0xfa>
 800910a:	9a07      	ldr	r2, [sp, #28]
 800910c:	4654      	mov	r4, sl
 800910e:	2000      	movs	r0, #0
 8009110:	f04f 0c0a 	mov.w	ip, #10
 8009114:	4621      	mov	r1, r4
 8009116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911a:	3b30      	subs	r3, #48	@ 0x30
 800911c:	2b09      	cmp	r3, #9
 800911e:	d94b      	bls.n	80091b8 <_svfiprintf_r+0x17c>
 8009120:	b1b0      	cbz	r0, 8009150 <_svfiprintf_r+0x114>
 8009122:	9207      	str	r2, [sp, #28]
 8009124:	e014      	b.n	8009150 <_svfiprintf_r+0x114>
 8009126:	eba0 0308 	sub.w	r3, r0, r8
 800912a:	fa09 f303 	lsl.w	r3, r9, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	46a2      	mov	sl, r4
 8009134:	e7d2      	b.n	80090dc <_svfiprintf_r+0xa0>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	1d19      	adds	r1, r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	9103      	str	r1, [sp, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbb      	ittet	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	f042 0202 	orrlt.w	r2, r2, #2
 8009148:	9307      	strge	r3, [sp, #28]
 800914a:	9307      	strlt	r3, [sp, #28]
 800914c:	bfb8      	it	lt
 800914e:	9204      	strlt	r2, [sp, #16]
 8009150:	7823      	ldrb	r3, [r4, #0]
 8009152:	2b2e      	cmp	r3, #46	@ 0x2e
 8009154:	d10a      	bne.n	800916c <_svfiprintf_r+0x130>
 8009156:	7863      	ldrb	r3, [r4, #1]
 8009158:	2b2a      	cmp	r3, #42	@ 0x2a
 800915a:	d132      	bne.n	80091c2 <_svfiprintf_r+0x186>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9203      	str	r2, [sp, #12]
 8009164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009168:	3402      	adds	r4, #2
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009230 <_svfiprintf_r+0x1f4>
 8009170:	7821      	ldrb	r1, [r4, #0]
 8009172:	2203      	movs	r2, #3
 8009174:	4650      	mov	r0, sl
 8009176:	f7f7 f833 	bl	80001e0 <memchr>
 800917a:	b138      	cbz	r0, 800918c <_svfiprintf_r+0x150>
 800917c:	9b04      	ldr	r3, [sp, #16]
 800917e:	eba0 000a 	sub.w	r0, r0, sl
 8009182:	2240      	movs	r2, #64	@ 0x40
 8009184:	4082      	lsls	r2, r0
 8009186:	4313      	orrs	r3, r2
 8009188:	3401      	adds	r4, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009190:	4824      	ldr	r0, [pc, #144]	@ (8009224 <_svfiprintf_r+0x1e8>)
 8009192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009196:	2206      	movs	r2, #6
 8009198:	f7f7 f822 	bl	80001e0 <memchr>
 800919c:	2800      	cmp	r0, #0
 800919e:	d036      	beq.n	800920e <_svfiprintf_r+0x1d2>
 80091a0:	4b21      	ldr	r3, [pc, #132]	@ (8009228 <_svfiprintf_r+0x1ec>)
 80091a2:	bb1b      	cbnz	r3, 80091ec <_svfiprintf_r+0x1b0>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	3307      	adds	r3, #7
 80091a8:	f023 0307 	bic.w	r3, r3, #7
 80091ac:	3308      	adds	r3, #8
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b2:	4433      	add	r3, r6
 80091b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b6:	e76a      	b.n	800908e <_svfiprintf_r+0x52>
 80091b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091bc:	460c      	mov	r4, r1
 80091be:	2001      	movs	r0, #1
 80091c0:	e7a8      	b.n	8009114 <_svfiprintf_r+0xd8>
 80091c2:	2300      	movs	r3, #0
 80091c4:	3401      	adds	r4, #1
 80091c6:	9305      	str	r3, [sp, #20]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	4620      	mov	r0, r4
 80091d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d4:	3a30      	subs	r2, #48	@ 0x30
 80091d6:	2a09      	cmp	r2, #9
 80091d8:	d903      	bls.n	80091e2 <_svfiprintf_r+0x1a6>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c6      	beq.n	800916c <_svfiprintf_r+0x130>
 80091de:	9105      	str	r1, [sp, #20]
 80091e0:	e7c4      	b.n	800916c <_svfiprintf_r+0x130>
 80091e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e6:	4604      	mov	r4, r0
 80091e8:	2301      	movs	r3, #1
 80091ea:	e7f0      	b.n	80091ce <_svfiprintf_r+0x192>
 80091ec:	ab03      	add	r3, sp, #12
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	462a      	mov	r2, r5
 80091f2:	4b0e      	ldr	r3, [pc, #56]	@ (800922c <_svfiprintf_r+0x1f0>)
 80091f4:	a904      	add	r1, sp, #16
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7fd fe94 	bl	8006f24 <_printf_float>
 80091fc:	1c42      	adds	r2, r0, #1
 80091fe:	4606      	mov	r6, r0
 8009200:	d1d6      	bne.n	80091b0 <_svfiprintf_r+0x174>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	065b      	lsls	r3, r3, #25
 8009206:	f53f af2d 	bmi.w	8009064 <_svfiprintf_r+0x28>
 800920a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800920c:	e72c      	b.n	8009068 <_svfiprintf_r+0x2c>
 800920e:	ab03      	add	r3, sp, #12
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	462a      	mov	r2, r5
 8009214:	4b05      	ldr	r3, [pc, #20]	@ (800922c <_svfiprintf_r+0x1f0>)
 8009216:	a904      	add	r1, sp, #16
 8009218:	4638      	mov	r0, r7
 800921a:	f7fe f91b 	bl	8007454 <_printf_i>
 800921e:	e7ed      	b.n	80091fc <_svfiprintf_r+0x1c0>
 8009220:	0800a0fe 	.word	0x0800a0fe
 8009224:	0800a108 	.word	0x0800a108
 8009228:	08006f25 	.word	0x08006f25
 800922c:	08008f85 	.word	0x08008f85
 8009230:	0800a104 	.word	0x0800a104

08009234 <__sflush_r>:
 8009234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923c:	0716      	lsls	r6, r2, #28
 800923e:	4605      	mov	r5, r0
 8009240:	460c      	mov	r4, r1
 8009242:	d454      	bmi.n	80092ee <__sflush_r+0xba>
 8009244:	684b      	ldr	r3, [r1, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dc02      	bgt.n	8009250 <__sflush_r+0x1c>
 800924a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd48      	ble.n	80092e2 <__sflush_r+0xae>
 8009250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009252:	2e00      	cmp	r6, #0
 8009254:	d045      	beq.n	80092e2 <__sflush_r+0xae>
 8009256:	2300      	movs	r3, #0
 8009258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800925c:	682f      	ldr	r7, [r5, #0]
 800925e:	6a21      	ldr	r1, [r4, #32]
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	d030      	beq.n	80092c6 <__sflush_r+0x92>
 8009264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	0759      	lsls	r1, r3, #29
 800926a:	d505      	bpl.n	8009278 <__sflush_r+0x44>
 800926c:	6863      	ldr	r3, [r4, #4]
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009272:	b10b      	cbz	r3, 8009278 <__sflush_r+0x44>
 8009274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009276:	1ad2      	subs	r2, r2, r3
 8009278:	2300      	movs	r3, #0
 800927a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800927c:	6a21      	ldr	r1, [r4, #32]
 800927e:	4628      	mov	r0, r5
 8009280:	47b0      	blx	r6
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	d106      	bne.n	8009296 <__sflush_r+0x62>
 8009288:	6829      	ldr	r1, [r5, #0]
 800928a:	291d      	cmp	r1, #29
 800928c:	d82b      	bhi.n	80092e6 <__sflush_r+0xb2>
 800928e:	4a2a      	ldr	r2, [pc, #168]	@ (8009338 <__sflush_r+0x104>)
 8009290:	40ca      	lsrs	r2, r1
 8009292:	07d6      	lsls	r6, r2, #31
 8009294:	d527      	bpl.n	80092e6 <__sflush_r+0xb2>
 8009296:	2200      	movs	r2, #0
 8009298:	6062      	str	r2, [r4, #4]
 800929a:	04d9      	lsls	r1, r3, #19
 800929c:	6922      	ldr	r2, [r4, #16]
 800929e:	6022      	str	r2, [r4, #0]
 80092a0:	d504      	bpl.n	80092ac <__sflush_r+0x78>
 80092a2:	1c42      	adds	r2, r0, #1
 80092a4:	d101      	bne.n	80092aa <__sflush_r+0x76>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	b903      	cbnz	r3, 80092ac <__sflush_r+0x78>
 80092aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80092ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092ae:	602f      	str	r7, [r5, #0]
 80092b0:	b1b9      	cbz	r1, 80092e2 <__sflush_r+0xae>
 80092b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092b6:	4299      	cmp	r1, r3
 80092b8:	d002      	beq.n	80092c0 <__sflush_r+0x8c>
 80092ba:	4628      	mov	r0, r5
 80092bc:	f7ff f9e8 	bl	8008690 <_free_r>
 80092c0:	2300      	movs	r3, #0
 80092c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80092c4:	e00d      	b.n	80092e2 <__sflush_r+0xae>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b0      	blx	r6
 80092cc:	4602      	mov	r2, r0
 80092ce:	1c50      	adds	r0, r2, #1
 80092d0:	d1c9      	bne.n	8009266 <__sflush_r+0x32>
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0c6      	beq.n	8009266 <__sflush_r+0x32>
 80092d8:	2b1d      	cmp	r3, #29
 80092da:	d001      	beq.n	80092e0 <__sflush_r+0xac>
 80092dc:	2b16      	cmp	r3, #22
 80092de:	d11e      	bne.n	800931e <__sflush_r+0xea>
 80092e0:	602f      	str	r7, [r5, #0]
 80092e2:	2000      	movs	r0, #0
 80092e4:	e022      	b.n	800932c <__sflush_r+0xf8>
 80092e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	e01b      	b.n	8009326 <__sflush_r+0xf2>
 80092ee:	690f      	ldr	r7, [r1, #16]
 80092f0:	2f00      	cmp	r7, #0
 80092f2:	d0f6      	beq.n	80092e2 <__sflush_r+0xae>
 80092f4:	0793      	lsls	r3, r2, #30
 80092f6:	680e      	ldr	r6, [r1, #0]
 80092f8:	bf08      	it	eq
 80092fa:	694b      	ldreq	r3, [r1, #20]
 80092fc:	600f      	str	r7, [r1, #0]
 80092fe:	bf18      	it	ne
 8009300:	2300      	movne	r3, #0
 8009302:	eba6 0807 	sub.w	r8, r6, r7
 8009306:	608b      	str	r3, [r1, #8]
 8009308:	f1b8 0f00 	cmp.w	r8, #0
 800930c:	dde9      	ble.n	80092e2 <__sflush_r+0xae>
 800930e:	6a21      	ldr	r1, [r4, #32]
 8009310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009312:	4643      	mov	r3, r8
 8009314:	463a      	mov	r2, r7
 8009316:	4628      	mov	r0, r5
 8009318:	47b0      	blx	r6
 800931a:	2800      	cmp	r0, #0
 800931c:	dc08      	bgt.n	8009330 <__sflush_r+0xfc>
 800931e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009330:	4407      	add	r7, r0
 8009332:	eba8 0800 	sub.w	r8, r8, r0
 8009336:	e7e7      	b.n	8009308 <__sflush_r+0xd4>
 8009338:	20400001 	.word	0x20400001

0800933c <_fflush_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	690b      	ldr	r3, [r1, #16]
 8009340:	4605      	mov	r5, r0
 8009342:	460c      	mov	r4, r1
 8009344:	b913      	cbnz	r3, 800934c <_fflush_r+0x10>
 8009346:	2500      	movs	r5, #0
 8009348:	4628      	mov	r0, r5
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	b118      	cbz	r0, 8009356 <_fflush_r+0x1a>
 800934e:	6a03      	ldr	r3, [r0, #32]
 8009350:	b90b      	cbnz	r3, 8009356 <_fflush_r+0x1a>
 8009352:	f7fe fa29 	bl	80077a8 <__sinit>
 8009356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f3      	beq.n	8009346 <_fflush_r+0xa>
 800935e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009360:	07d0      	lsls	r0, r2, #31
 8009362:	d404      	bmi.n	800936e <_fflush_r+0x32>
 8009364:	0599      	lsls	r1, r3, #22
 8009366:	d402      	bmi.n	800936e <_fflush_r+0x32>
 8009368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936a:	f7fe fb36 	bl	80079da <__retarget_lock_acquire_recursive>
 800936e:	4628      	mov	r0, r5
 8009370:	4621      	mov	r1, r4
 8009372:	f7ff ff5f 	bl	8009234 <__sflush_r>
 8009376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009378:	07da      	lsls	r2, r3, #31
 800937a:	4605      	mov	r5, r0
 800937c:	d4e4      	bmi.n	8009348 <_fflush_r+0xc>
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	059b      	lsls	r3, r3, #22
 8009382:	d4e1      	bmi.n	8009348 <_fflush_r+0xc>
 8009384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009386:	f7fe fb29 	bl	80079dc <__retarget_lock_release_recursive>
 800938a:	e7dd      	b.n	8009348 <_fflush_r+0xc>

0800938c <memmove>:
 800938c:	4288      	cmp	r0, r1
 800938e:	b510      	push	{r4, lr}
 8009390:	eb01 0402 	add.w	r4, r1, r2
 8009394:	d902      	bls.n	800939c <memmove+0x10>
 8009396:	4284      	cmp	r4, r0
 8009398:	4623      	mov	r3, r4
 800939a:	d807      	bhi.n	80093ac <memmove+0x20>
 800939c:	1e43      	subs	r3, r0, #1
 800939e:	42a1      	cmp	r1, r4
 80093a0:	d008      	beq.n	80093b4 <memmove+0x28>
 80093a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093aa:	e7f8      	b.n	800939e <memmove+0x12>
 80093ac:	4402      	add	r2, r0
 80093ae:	4601      	mov	r1, r0
 80093b0:	428a      	cmp	r2, r1
 80093b2:	d100      	bne.n	80093b6 <memmove+0x2a>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093be:	e7f7      	b.n	80093b0 <memmove+0x24>

080093c0 <_sbrk_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	@ (80093dc <_sbrk_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7fa f892 	bl	80034f4 <_sbrk>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_sbrk_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_sbrk_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000724 	.word	0x20000724

080093e0 <memcpy>:
 80093e0:	440a      	add	r2, r1
 80093e2:	4291      	cmp	r1, r2
 80093e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e8:	d100      	bne.n	80093ec <memcpy+0xc>
 80093ea:	4770      	bx	lr
 80093ec:	b510      	push	{r4, lr}
 80093ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f6:	4291      	cmp	r1, r2
 80093f8:	d1f9      	bne.n	80093ee <memcpy+0xe>
 80093fa:	bd10      	pop	{r4, pc}

080093fc <__assert_func>:
 80093fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093fe:	4614      	mov	r4, r2
 8009400:	461a      	mov	r2, r3
 8009402:	4b09      	ldr	r3, [pc, #36]	@ (8009428 <__assert_func+0x2c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4605      	mov	r5, r0
 8009408:	68d8      	ldr	r0, [r3, #12]
 800940a:	b14c      	cbz	r4, 8009420 <__assert_func+0x24>
 800940c:	4b07      	ldr	r3, [pc, #28]	@ (800942c <__assert_func+0x30>)
 800940e:	9100      	str	r1, [sp, #0]
 8009410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009414:	4906      	ldr	r1, [pc, #24]	@ (8009430 <__assert_func+0x34>)
 8009416:	462b      	mov	r3, r5
 8009418:	f000 f870 	bl	80094fc <fiprintf>
 800941c:	f000 f880 	bl	8009520 <abort>
 8009420:	4b04      	ldr	r3, [pc, #16]	@ (8009434 <__assert_func+0x38>)
 8009422:	461c      	mov	r4, r3
 8009424:	e7f3      	b.n	800940e <__assert_func+0x12>
 8009426:	bf00      	nop
 8009428:	20000020 	.word	0x20000020
 800942c:	0800a119 	.word	0x0800a119
 8009430:	0800a126 	.word	0x0800a126
 8009434:	0800a154 	.word	0x0800a154

08009438 <_calloc_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	fba1 5402 	umull	r5, r4, r1, r2
 800943e:	b934      	cbnz	r4, 800944e <_calloc_r+0x16>
 8009440:	4629      	mov	r1, r5
 8009442:	f7ff f999 	bl	8008778 <_malloc_r>
 8009446:	4606      	mov	r6, r0
 8009448:	b928      	cbnz	r0, 8009456 <_calloc_r+0x1e>
 800944a:	4630      	mov	r0, r6
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	220c      	movs	r2, #12
 8009450:	6002      	str	r2, [r0, #0]
 8009452:	2600      	movs	r6, #0
 8009454:	e7f9      	b.n	800944a <_calloc_r+0x12>
 8009456:	462a      	mov	r2, r5
 8009458:	4621      	mov	r1, r4
 800945a:	f7fe fa40 	bl	80078de <memset>
 800945e:	e7f4      	b.n	800944a <_calloc_r+0x12>

08009460 <__ascii_mbtowc>:
 8009460:	b082      	sub	sp, #8
 8009462:	b901      	cbnz	r1, 8009466 <__ascii_mbtowc+0x6>
 8009464:	a901      	add	r1, sp, #4
 8009466:	b142      	cbz	r2, 800947a <__ascii_mbtowc+0x1a>
 8009468:	b14b      	cbz	r3, 800947e <__ascii_mbtowc+0x1e>
 800946a:	7813      	ldrb	r3, [r2, #0]
 800946c:	600b      	str	r3, [r1, #0]
 800946e:	7812      	ldrb	r2, [r2, #0]
 8009470:	1e10      	subs	r0, r2, #0
 8009472:	bf18      	it	ne
 8009474:	2001      	movne	r0, #1
 8009476:	b002      	add	sp, #8
 8009478:	4770      	bx	lr
 800947a:	4610      	mov	r0, r2
 800947c:	e7fb      	b.n	8009476 <__ascii_mbtowc+0x16>
 800947e:	f06f 0001 	mvn.w	r0, #1
 8009482:	e7f8      	b.n	8009476 <__ascii_mbtowc+0x16>

08009484 <_realloc_r>:
 8009484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009488:	4607      	mov	r7, r0
 800948a:	4614      	mov	r4, r2
 800948c:	460d      	mov	r5, r1
 800948e:	b921      	cbnz	r1, 800949a <_realloc_r+0x16>
 8009490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4611      	mov	r1, r2
 8009496:	f7ff b96f 	b.w	8008778 <_malloc_r>
 800949a:	b92a      	cbnz	r2, 80094a8 <_realloc_r+0x24>
 800949c:	f7ff f8f8 	bl	8008690 <_free_r>
 80094a0:	4625      	mov	r5, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a8:	f000 f841 	bl	800952e <_malloc_usable_size_r>
 80094ac:	4284      	cmp	r4, r0
 80094ae:	4606      	mov	r6, r0
 80094b0:	d802      	bhi.n	80094b8 <_realloc_r+0x34>
 80094b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094b6:	d8f4      	bhi.n	80094a2 <_realloc_r+0x1e>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4638      	mov	r0, r7
 80094bc:	f7ff f95c 	bl	8008778 <_malloc_r>
 80094c0:	4680      	mov	r8, r0
 80094c2:	b908      	cbnz	r0, 80094c8 <_realloc_r+0x44>
 80094c4:	4645      	mov	r5, r8
 80094c6:	e7ec      	b.n	80094a2 <_realloc_r+0x1e>
 80094c8:	42b4      	cmp	r4, r6
 80094ca:	4622      	mov	r2, r4
 80094cc:	4629      	mov	r1, r5
 80094ce:	bf28      	it	cs
 80094d0:	4632      	movcs	r2, r6
 80094d2:	f7ff ff85 	bl	80093e0 <memcpy>
 80094d6:	4629      	mov	r1, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff f8d9 	bl	8008690 <_free_r>
 80094de:	e7f1      	b.n	80094c4 <_realloc_r+0x40>

080094e0 <__ascii_wctomb>:
 80094e0:	4603      	mov	r3, r0
 80094e2:	4608      	mov	r0, r1
 80094e4:	b141      	cbz	r1, 80094f8 <__ascii_wctomb+0x18>
 80094e6:	2aff      	cmp	r2, #255	@ 0xff
 80094e8:	d904      	bls.n	80094f4 <__ascii_wctomb+0x14>
 80094ea:	228a      	movs	r2, #138	@ 0x8a
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	4770      	bx	lr
 80094f4:	700a      	strb	r2, [r1, #0]
 80094f6:	2001      	movs	r0, #1
 80094f8:	4770      	bx	lr
	...

080094fc <fiprintf>:
 80094fc:	b40e      	push	{r1, r2, r3}
 80094fe:	b503      	push	{r0, r1, lr}
 8009500:	4601      	mov	r1, r0
 8009502:	ab03      	add	r3, sp, #12
 8009504:	4805      	ldr	r0, [pc, #20]	@ (800951c <fiprintf+0x20>)
 8009506:	f853 2b04 	ldr.w	r2, [r3], #4
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	f000 f83f 	bl	8009590 <_vfiprintf_r>
 8009512:	b002      	add	sp, #8
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	b003      	add	sp, #12
 800951a:	4770      	bx	lr
 800951c:	20000020 	.word	0x20000020

08009520 <abort>:
 8009520:	b508      	push	{r3, lr}
 8009522:	2006      	movs	r0, #6
 8009524:	f000 fa08 	bl	8009938 <raise>
 8009528:	2001      	movs	r0, #1
 800952a:	f7f9 ff6b 	bl	8003404 <_exit>

0800952e <_malloc_usable_size_r>:
 800952e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009532:	1f18      	subs	r0, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfbc      	itt	lt
 8009538:	580b      	ldrlt	r3, [r1, r0]
 800953a:	18c0      	addlt	r0, r0, r3
 800953c:	4770      	bx	lr

0800953e <__sfputc_r>:
 800953e:	6893      	ldr	r3, [r2, #8]
 8009540:	3b01      	subs	r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	b410      	push	{r4}
 8009546:	6093      	str	r3, [r2, #8]
 8009548:	da08      	bge.n	800955c <__sfputc_r+0x1e>
 800954a:	6994      	ldr	r4, [r2, #24]
 800954c:	42a3      	cmp	r3, r4
 800954e:	db01      	blt.n	8009554 <__sfputc_r+0x16>
 8009550:	290a      	cmp	r1, #10
 8009552:	d103      	bne.n	800955c <__sfputc_r+0x1e>
 8009554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009558:	f000 b932 	b.w	80097c0 <__swbuf_r>
 800955c:	6813      	ldr	r3, [r2, #0]
 800955e:	1c58      	adds	r0, r3, #1
 8009560:	6010      	str	r0, [r2, #0]
 8009562:	7019      	strb	r1, [r3, #0]
 8009564:	4608      	mov	r0, r1
 8009566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956a:	4770      	bx	lr

0800956c <__sfputs_r>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	4606      	mov	r6, r0
 8009570:	460f      	mov	r7, r1
 8009572:	4614      	mov	r4, r2
 8009574:	18d5      	adds	r5, r2, r3
 8009576:	42ac      	cmp	r4, r5
 8009578:	d101      	bne.n	800957e <__sfputs_r+0x12>
 800957a:	2000      	movs	r0, #0
 800957c:	e007      	b.n	800958e <__sfputs_r+0x22>
 800957e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009582:	463a      	mov	r2, r7
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff ffda 	bl	800953e <__sfputc_r>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	d1f3      	bne.n	8009576 <__sfputs_r+0xa>
 800958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009590 <_vfiprintf_r>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	460d      	mov	r5, r1
 8009596:	b09d      	sub	sp, #116	@ 0x74
 8009598:	4614      	mov	r4, r2
 800959a:	4698      	mov	r8, r3
 800959c:	4606      	mov	r6, r0
 800959e:	b118      	cbz	r0, 80095a8 <_vfiprintf_r+0x18>
 80095a0:	6a03      	ldr	r3, [r0, #32]
 80095a2:	b90b      	cbnz	r3, 80095a8 <_vfiprintf_r+0x18>
 80095a4:	f7fe f900 	bl	80077a8 <__sinit>
 80095a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d405      	bmi.n	80095ba <_vfiprintf_r+0x2a>
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	059a      	lsls	r2, r3, #22
 80095b2:	d402      	bmi.n	80095ba <_vfiprintf_r+0x2a>
 80095b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095b6:	f7fe fa10 	bl	80079da <__retarget_lock_acquire_recursive>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	071b      	lsls	r3, r3, #28
 80095be:	d501      	bpl.n	80095c4 <_vfiprintf_r+0x34>
 80095c0:	692b      	ldr	r3, [r5, #16]
 80095c2:	b99b      	cbnz	r3, 80095ec <_vfiprintf_r+0x5c>
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 f938 	bl	800983c <__swsetup_r>
 80095cc:	b170      	cbz	r0, 80095ec <_vfiprintf_r+0x5c>
 80095ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095d0:	07dc      	lsls	r4, r3, #31
 80095d2:	d504      	bpl.n	80095de <_vfiprintf_r+0x4e>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	b01d      	add	sp, #116	@ 0x74
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	0598      	lsls	r0, r3, #22
 80095e2:	d4f7      	bmi.n	80095d4 <_vfiprintf_r+0x44>
 80095e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095e6:	f7fe f9f9 	bl	80079dc <__retarget_lock_release_recursive>
 80095ea:	e7f3      	b.n	80095d4 <_vfiprintf_r+0x44>
 80095ec:	2300      	movs	r3, #0
 80095ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f0:	2320      	movs	r3, #32
 80095f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fa:	2330      	movs	r3, #48	@ 0x30
 80095fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097ac <_vfiprintf_r+0x21c>
 8009600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009604:	f04f 0901 	mov.w	r9, #1
 8009608:	4623      	mov	r3, r4
 800960a:	469a      	mov	sl, r3
 800960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009610:	b10a      	cbz	r2, 8009616 <_vfiprintf_r+0x86>
 8009612:	2a25      	cmp	r2, #37	@ 0x25
 8009614:	d1f9      	bne.n	800960a <_vfiprintf_r+0x7a>
 8009616:	ebba 0b04 	subs.w	fp, sl, r4
 800961a:	d00b      	beq.n	8009634 <_vfiprintf_r+0xa4>
 800961c:	465b      	mov	r3, fp
 800961e:	4622      	mov	r2, r4
 8009620:	4629      	mov	r1, r5
 8009622:	4630      	mov	r0, r6
 8009624:	f7ff ffa2 	bl	800956c <__sfputs_r>
 8009628:	3001      	adds	r0, #1
 800962a:	f000 80a7 	beq.w	800977c <_vfiprintf_r+0x1ec>
 800962e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009630:	445a      	add	r2, fp
 8009632:	9209      	str	r2, [sp, #36]	@ 0x24
 8009634:	f89a 3000 	ldrb.w	r3, [sl]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 809f 	beq.w	800977c <_vfiprintf_r+0x1ec>
 800963e:	2300      	movs	r3, #0
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009648:	f10a 0a01 	add.w	sl, sl, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009654:	931a      	str	r3, [sp, #104]	@ 0x68
 8009656:	4654      	mov	r4, sl
 8009658:	2205      	movs	r2, #5
 800965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965e:	4853      	ldr	r0, [pc, #332]	@ (80097ac <_vfiprintf_r+0x21c>)
 8009660:	f7f6 fdbe 	bl	80001e0 <memchr>
 8009664:	9a04      	ldr	r2, [sp, #16]
 8009666:	b9d8      	cbnz	r0, 80096a0 <_vfiprintf_r+0x110>
 8009668:	06d1      	lsls	r1, r2, #27
 800966a:	bf44      	itt	mi
 800966c:	2320      	movmi	r3, #32
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009672:	0713      	lsls	r3, r2, #28
 8009674:	bf44      	itt	mi
 8009676:	232b      	movmi	r3, #43	@ 0x2b
 8009678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800967c:	f89a 3000 	ldrb.w	r3, [sl]
 8009680:	2b2a      	cmp	r3, #42	@ 0x2a
 8009682:	d015      	beq.n	80096b0 <_vfiprintf_r+0x120>
 8009684:	9a07      	ldr	r2, [sp, #28]
 8009686:	4654      	mov	r4, sl
 8009688:	2000      	movs	r0, #0
 800968a:	f04f 0c0a 	mov.w	ip, #10
 800968e:	4621      	mov	r1, r4
 8009690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009694:	3b30      	subs	r3, #48	@ 0x30
 8009696:	2b09      	cmp	r3, #9
 8009698:	d94b      	bls.n	8009732 <_vfiprintf_r+0x1a2>
 800969a:	b1b0      	cbz	r0, 80096ca <_vfiprintf_r+0x13a>
 800969c:	9207      	str	r2, [sp, #28]
 800969e:	e014      	b.n	80096ca <_vfiprintf_r+0x13a>
 80096a0:	eba0 0308 	sub.w	r3, r0, r8
 80096a4:	fa09 f303 	lsl.w	r3, r9, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	46a2      	mov	sl, r4
 80096ae:	e7d2      	b.n	8009656 <_vfiprintf_r+0xc6>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1d19      	adds	r1, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9103      	str	r1, [sp, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfbb      	ittet	lt
 80096bc:	425b      	neglt	r3, r3
 80096be:	f042 0202 	orrlt.w	r2, r2, #2
 80096c2:	9307      	strge	r3, [sp, #28]
 80096c4:	9307      	strlt	r3, [sp, #28]
 80096c6:	bfb8      	it	lt
 80096c8:	9204      	strlt	r2, [sp, #16]
 80096ca:	7823      	ldrb	r3, [r4, #0]
 80096cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ce:	d10a      	bne.n	80096e6 <_vfiprintf_r+0x156>
 80096d0:	7863      	ldrb	r3, [r4, #1]
 80096d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d4:	d132      	bne.n	800973c <_vfiprintf_r+0x1ac>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	9203      	str	r2, [sp, #12]
 80096de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096e2:	3402      	adds	r4, #2
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097bc <_vfiprintf_r+0x22c>
 80096ea:	7821      	ldrb	r1, [r4, #0]
 80096ec:	2203      	movs	r2, #3
 80096ee:	4650      	mov	r0, sl
 80096f0:	f7f6 fd76 	bl	80001e0 <memchr>
 80096f4:	b138      	cbz	r0, 8009706 <_vfiprintf_r+0x176>
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	eba0 000a 	sub.w	r0, r0, sl
 80096fc:	2240      	movs	r2, #64	@ 0x40
 80096fe:	4082      	lsls	r2, r0
 8009700:	4313      	orrs	r3, r2
 8009702:	3401      	adds	r4, #1
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970a:	4829      	ldr	r0, [pc, #164]	@ (80097b0 <_vfiprintf_r+0x220>)
 800970c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009710:	2206      	movs	r2, #6
 8009712:	f7f6 fd65 	bl	80001e0 <memchr>
 8009716:	2800      	cmp	r0, #0
 8009718:	d03f      	beq.n	800979a <_vfiprintf_r+0x20a>
 800971a:	4b26      	ldr	r3, [pc, #152]	@ (80097b4 <_vfiprintf_r+0x224>)
 800971c:	bb1b      	cbnz	r3, 8009766 <_vfiprintf_r+0x1d6>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	3307      	adds	r3, #7
 8009722:	f023 0307 	bic.w	r3, r3, #7
 8009726:	3308      	adds	r3, #8
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972c:	443b      	add	r3, r7
 800972e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009730:	e76a      	b.n	8009608 <_vfiprintf_r+0x78>
 8009732:	fb0c 3202 	mla	r2, ip, r2, r3
 8009736:	460c      	mov	r4, r1
 8009738:	2001      	movs	r0, #1
 800973a:	e7a8      	b.n	800968e <_vfiprintf_r+0xfe>
 800973c:	2300      	movs	r3, #0
 800973e:	3401      	adds	r4, #1
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	4619      	mov	r1, r3
 8009744:	f04f 0c0a 	mov.w	ip, #10
 8009748:	4620      	mov	r0, r4
 800974a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974e:	3a30      	subs	r2, #48	@ 0x30
 8009750:	2a09      	cmp	r2, #9
 8009752:	d903      	bls.n	800975c <_vfiprintf_r+0x1cc>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0c6      	beq.n	80096e6 <_vfiprintf_r+0x156>
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	e7c4      	b.n	80096e6 <_vfiprintf_r+0x156>
 800975c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009760:	4604      	mov	r4, r0
 8009762:	2301      	movs	r3, #1
 8009764:	e7f0      	b.n	8009748 <_vfiprintf_r+0x1b8>
 8009766:	ab03      	add	r3, sp, #12
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	462a      	mov	r2, r5
 800976c:	4b12      	ldr	r3, [pc, #72]	@ (80097b8 <_vfiprintf_r+0x228>)
 800976e:	a904      	add	r1, sp, #16
 8009770:	4630      	mov	r0, r6
 8009772:	f7fd fbd7 	bl	8006f24 <_printf_float>
 8009776:	4607      	mov	r7, r0
 8009778:	1c78      	adds	r0, r7, #1
 800977a:	d1d6      	bne.n	800972a <_vfiprintf_r+0x19a>
 800977c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d405      	bmi.n	800978e <_vfiprintf_r+0x1fe>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d402      	bmi.n	800978e <_vfiprintf_r+0x1fe>
 8009788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800978a:	f7fe f927 	bl	80079dc <__retarget_lock_release_recursive>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	065b      	lsls	r3, r3, #25
 8009792:	f53f af1f 	bmi.w	80095d4 <_vfiprintf_r+0x44>
 8009796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009798:	e71e      	b.n	80095d8 <_vfiprintf_r+0x48>
 800979a:	ab03      	add	r3, sp, #12
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	462a      	mov	r2, r5
 80097a0:	4b05      	ldr	r3, [pc, #20]	@ (80097b8 <_vfiprintf_r+0x228>)
 80097a2:	a904      	add	r1, sp, #16
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7fd fe55 	bl	8007454 <_printf_i>
 80097aa:	e7e4      	b.n	8009776 <_vfiprintf_r+0x1e6>
 80097ac:	0800a0fe 	.word	0x0800a0fe
 80097b0:	0800a108 	.word	0x0800a108
 80097b4:	08006f25 	.word	0x08006f25
 80097b8:	0800956d 	.word	0x0800956d
 80097bc:	0800a104 	.word	0x0800a104

080097c0 <__swbuf_r>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	460e      	mov	r6, r1
 80097c4:	4614      	mov	r4, r2
 80097c6:	4605      	mov	r5, r0
 80097c8:	b118      	cbz	r0, 80097d2 <__swbuf_r+0x12>
 80097ca:	6a03      	ldr	r3, [r0, #32]
 80097cc:	b90b      	cbnz	r3, 80097d2 <__swbuf_r+0x12>
 80097ce:	f7fd ffeb 	bl	80077a8 <__sinit>
 80097d2:	69a3      	ldr	r3, [r4, #24]
 80097d4:	60a3      	str	r3, [r4, #8]
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	d501      	bpl.n	80097e0 <__swbuf_r+0x20>
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	b943      	cbnz	r3, 80097f2 <__swbuf_r+0x32>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 f82a 	bl	800983c <__swsetup_r>
 80097e8:	b118      	cbz	r0, 80097f2 <__swbuf_r+0x32>
 80097ea:	f04f 37ff 	mov.w	r7, #4294967295
 80097ee:	4638      	mov	r0, r7
 80097f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	1a98      	subs	r0, r3, r2
 80097f8:	6963      	ldr	r3, [r4, #20]
 80097fa:	b2f6      	uxtb	r6, r6
 80097fc:	4283      	cmp	r3, r0
 80097fe:	4637      	mov	r7, r6
 8009800:	dc05      	bgt.n	800980e <__swbuf_r+0x4e>
 8009802:	4621      	mov	r1, r4
 8009804:	4628      	mov	r0, r5
 8009806:	f7ff fd99 	bl	800933c <_fflush_r>
 800980a:	2800      	cmp	r0, #0
 800980c:	d1ed      	bne.n	80097ea <__swbuf_r+0x2a>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	3b01      	subs	r3, #1
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	6022      	str	r2, [r4, #0]
 800981a:	701e      	strb	r6, [r3, #0]
 800981c:	6962      	ldr	r2, [r4, #20]
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	429a      	cmp	r2, r3
 8009822:	d004      	beq.n	800982e <__swbuf_r+0x6e>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	07db      	lsls	r3, r3, #31
 8009828:	d5e1      	bpl.n	80097ee <__swbuf_r+0x2e>
 800982a:	2e0a      	cmp	r6, #10
 800982c:	d1df      	bne.n	80097ee <__swbuf_r+0x2e>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f7ff fd83 	bl	800933c <_fflush_r>
 8009836:	2800      	cmp	r0, #0
 8009838:	d0d9      	beq.n	80097ee <__swbuf_r+0x2e>
 800983a:	e7d6      	b.n	80097ea <__swbuf_r+0x2a>

0800983c <__swsetup_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4b29      	ldr	r3, [pc, #164]	@ (80098e4 <__swsetup_r+0xa8>)
 8009840:	4605      	mov	r5, r0
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	460c      	mov	r4, r1
 8009846:	b118      	cbz	r0, 8009850 <__swsetup_r+0x14>
 8009848:	6a03      	ldr	r3, [r0, #32]
 800984a:	b90b      	cbnz	r3, 8009850 <__swsetup_r+0x14>
 800984c:	f7fd ffac 	bl	80077a8 <__sinit>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	0719      	lsls	r1, r3, #28
 8009856:	d422      	bmi.n	800989e <__swsetup_r+0x62>
 8009858:	06da      	lsls	r2, r3, #27
 800985a:	d407      	bmi.n	800986c <__swsetup_r+0x30>
 800985c:	2209      	movs	r2, #9
 800985e:	602a      	str	r2, [r5, #0]
 8009860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	f04f 30ff 	mov.w	r0, #4294967295
 800986a:	e033      	b.n	80098d4 <__swsetup_r+0x98>
 800986c:	0758      	lsls	r0, r3, #29
 800986e:	d512      	bpl.n	8009896 <__swsetup_r+0x5a>
 8009870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009872:	b141      	cbz	r1, 8009886 <__swsetup_r+0x4a>
 8009874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009878:	4299      	cmp	r1, r3
 800987a:	d002      	beq.n	8009882 <__swsetup_r+0x46>
 800987c:	4628      	mov	r0, r5
 800987e:	f7fe ff07 	bl	8008690 <_free_r>
 8009882:	2300      	movs	r3, #0
 8009884:	6363      	str	r3, [r4, #52]	@ 0x34
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	2300      	movs	r3, #0
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0308 	orr.w	r3, r3, #8
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	b94b      	cbnz	r3, 80098b6 <__swsetup_r+0x7a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ac:	d003      	beq.n	80098b6 <__swsetup_r+0x7a>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f000 f883 	bl	80099bc <__smakebuf_r>
 80098b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ba:	f013 0201 	ands.w	r2, r3, #1
 80098be:	d00a      	beq.n	80098d6 <__swsetup_r+0x9a>
 80098c0:	2200      	movs	r2, #0
 80098c2:	60a2      	str	r2, [r4, #8]
 80098c4:	6962      	ldr	r2, [r4, #20]
 80098c6:	4252      	negs	r2, r2
 80098c8:	61a2      	str	r2, [r4, #24]
 80098ca:	6922      	ldr	r2, [r4, #16]
 80098cc:	b942      	cbnz	r2, 80098e0 <__swsetup_r+0xa4>
 80098ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098d2:	d1c5      	bne.n	8009860 <__swsetup_r+0x24>
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	0799      	lsls	r1, r3, #30
 80098d8:	bf58      	it	pl
 80098da:	6962      	ldrpl	r2, [r4, #20]
 80098dc:	60a2      	str	r2, [r4, #8]
 80098de:	e7f4      	b.n	80098ca <__swsetup_r+0x8e>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7f7      	b.n	80098d4 <__swsetup_r+0x98>
 80098e4:	20000020 	.word	0x20000020

080098e8 <_raise_r>:
 80098e8:	291f      	cmp	r1, #31
 80098ea:	b538      	push	{r3, r4, r5, lr}
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	d904      	bls.n	80098fc <_raise_r+0x14>
 80098f2:	2316      	movs	r3, #22
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098fe:	b112      	cbz	r2, 8009906 <_raise_r+0x1e>
 8009900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009904:	b94b      	cbnz	r3, 800991a <_raise_r+0x32>
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f830 	bl	800996c <_getpid_r>
 800990c:	4622      	mov	r2, r4
 800990e:	4601      	mov	r1, r0
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009916:	f000 b817 	b.w	8009948 <_kill_r>
 800991a:	2b01      	cmp	r3, #1
 800991c:	d00a      	beq.n	8009934 <_raise_r+0x4c>
 800991e:	1c59      	adds	r1, r3, #1
 8009920:	d103      	bne.n	800992a <_raise_r+0x42>
 8009922:	2316      	movs	r3, #22
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	2001      	movs	r0, #1
 8009928:	e7e7      	b.n	80098fa <_raise_r+0x12>
 800992a:	2100      	movs	r1, #0
 800992c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009930:	4620      	mov	r0, r4
 8009932:	4798      	blx	r3
 8009934:	2000      	movs	r0, #0
 8009936:	e7e0      	b.n	80098fa <_raise_r+0x12>

08009938 <raise>:
 8009938:	4b02      	ldr	r3, [pc, #8]	@ (8009944 <raise+0xc>)
 800993a:	4601      	mov	r1, r0
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f7ff bfd3 	b.w	80098e8 <_raise_r>
 8009942:	bf00      	nop
 8009944:	20000020 	.word	0x20000020

08009948 <_kill_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	@ (8009968 <_kill_r+0x20>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	f7f9 fd45 	bl	80033e4 <_kill>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d102      	bne.n	8009964 <_kill_r+0x1c>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	b103      	cbz	r3, 8009964 <_kill_r+0x1c>
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	20000724 	.word	0x20000724

0800996c <_getpid_r>:
 800996c:	f7f9 bd32 	b.w	80033d4 <_getpid>

08009970 <__swhatbuf_r>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2900      	cmp	r1, #0
 800997a:	b096      	sub	sp, #88	@ 0x58
 800997c:	4615      	mov	r5, r2
 800997e:	461e      	mov	r6, r3
 8009980:	da0d      	bge.n	800999e <__swhatbuf_r+0x2e>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	bf14      	ite	ne
 800998e:	2340      	movne	r3, #64	@ 0x40
 8009990:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009994:	2000      	movs	r0, #0
 8009996:	6031      	str	r1, [r6, #0]
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	b016      	add	sp, #88	@ 0x58
 800999c:	bd70      	pop	{r4, r5, r6, pc}
 800999e:	466a      	mov	r2, sp
 80099a0:	f000 f848 	bl	8009a34 <_fstat_r>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	dbec      	blt.n	8009982 <__swhatbuf_r+0x12>
 80099a8:	9901      	ldr	r1, [sp, #4]
 80099aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099b2:	4259      	negs	r1, r3
 80099b4:	4159      	adcs	r1, r3
 80099b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099ba:	e7eb      	b.n	8009994 <__swhatbuf_r+0x24>

080099bc <__smakebuf_r>:
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c0:	079d      	lsls	r5, r3, #30
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	d507      	bpl.n	80099d8 <__smakebuf_r+0x1c>
 80099c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	2301      	movs	r3, #1
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	b003      	add	sp, #12
 80099d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d8:	ab01      	add	r3, sp, #4
 80099da:	466a      	mov	r2, sp
 80099dc:	f7ff ffc8 	bl	8009970 <__swhatbuf_r>
 80099e0:	9f00      	ldr	r7, [sp, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	4639      	mov	r1, r7
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7fe fec6 	bl	8008778 <_malloc_r>
 80099ec:	b948      	cbnz	r0, 8009a02 <__smakebuf_r+0x46>
 80099ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f2:	059a      	lsls	r2, r3, #22
 80099f4:	d4ee      	bmi.n	80099d4 <__smakebuf_r+0x18>
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	f043 0302 	orr.w	r3, r3, #2
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	e7e2      	b.n	80099c8 <__smakebuf_r+0xc>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	6020      	str	r0, [r4, #0]
 8009a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a12:	b15b      	cbz	r3, 8009a2c <__smakebuf_r+0x70>
 8009a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 f81d 	bl	8009a58 <_isatty_r>
 8009a1e:	b128      	cbz	r0, 8009a2c <__smakebuf_r+0x70>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	431d      	orrs	r5, r3
 8009a30:	81a5      	strh	r5, [r4, #12]
 8009a32:	e7cf      	b.n	80099d4 <__smakebuf_r+0x18>

08009a34 <_fstat_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	@ (8009a54 <_fstat_r+0x20>)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f9 fd2f 	bl	80034a4 <_fstat>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d102      	bne.n	8009a50 <_fstat_r+0x1c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b103      	cbz	r3, 8009a50 <_fstat_r+0x1c>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	20000724 	.word	0x20000724

08009a58 <_isatty_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	@ (8009a74 <_isatty_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f9 fd2e 	bl	80034c4 <_isatty>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_isatty_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_isatty_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000724 	.word	0x20000724

08009a78 <_init>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	bf00      	nop
 8009a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7e:	bc08      	pop	{r3}
 8009a80:	469e      	mov	lr, r3
 8009a82:	4770      	bx	lr

08009a84 <_fini>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr
